{"info":{"author":"Microsoft Corporation","author_email":"azpysdkhelp@microsoft.com","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# Azure AI Inference client library for Python\n\nUse the Inference client library (in preview) to:\n\n* Authenticate against the service\n* Get information about the AI model\n* Do chat completions\n* Get text embeddings\n* Get image embeddings\n\nThe Inference client library supports AI models deployed to the following services:\n\n* [GitHub Models](https://github.com/marketplace/models) - Free-tier endpoint for AI models from different providers\n* Serverless API endpoints and Managed Compute endpoints - AI models from different providers deployed from [Azure AI Foundry](https://ai.azure.com). See [Overview: Deploy models, flows, and web apps with Azure AI Foundry](https://learn.microsoft.com/azure/ai-studio/concepts/deployments-overview).\n* Azure OpenAI Service - OpenAI models deployed from [Azure AI Foundry](https://oai.azure.com/). See [What is Azure OpenAI Service?](https://learn.microsoft.com/azure/ai-services/openai/overview). Although we recommend you use the official [OpenAI client library](https://pypi.org/project/openai/) in your production code for this service, you can use the Azure AI Inference client library to easily compare the performance of OpenAI models to other models, using the same client library and Python code.\n\nThe Inference client library makes services calls using REST API version `2024-05-01-preview`, as documented in [Azure AI Model Inference API](https://aka.ms/azureai/modelinference).\n\n[Product documentation](https://aka.ms/azureai/modelinference)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/samples)\n| [API reference documentation](https://aka.ms/azsdk/azure-ai-inference/python/reference)\n| [Package (Pypi)](https://aka.ms/azsdk/azure-ai-inference/python/package)\n| [SDK source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/azure/ai/inference)\n\n## Reporting issues\n\nTo report an issue with the client library, or request additional features, please open a GitHub issue [here](https://github.com/Azure/azure-sdk-for-python/issues). Mention the package name \"azure-ai-inference\" in the title or content.\n\n## Getting started\n\n### Prerequisites\n\n* [Python 3.8](https://www.python.org/) or later installed, including [pip](https://pip.pypa.io/en/stable/).\n* For GitHub models\n  * The AI model name, such as \"gpt-4o\" or \"mistral-large\"\n  * A GitHub personal access token. [Create one here](https://github.com/settings/tokens). You do not need to give any permissions to the token. The token is a string that starts with `github_pat_`.\n* For Serverless API endpoints or Managed Compute endpoints\n  * An [Azure subscription](https://azure.microsoft.com/free).\n  * An [AI Model from the catalog](https://ai.azure.com/explore/models) deployed through Azure AI Foundry.\n  * The endpoint URL of your model, in of the form `https://<your-host-name>.<your-azure-region>.models.ai.azure.com`, where `your-host-name` is your unique model deployment host name and `your-azure-region` is the Azure region where the model is deployed (e.g. `eastus2`).\n  * Depending on your authentication preference, you either need an API key to authenticate against the service, or Entra ID credentials. The API key is a 32-character string.\n* For Azure OpenAI (AOAI) service\n  * An [Azure subscription](https://azure.microsoft.com/free).\n  * An [OpenAI Model from the catalog](https://oai.azure.com/resource/models) deployed through Azure AI Foundry.\n  * The endpoint URL of your model, in the form `https://<your-resouce-name>.openai.azure.com/openai/deployments/<your-deployment-name>`, where `your-resource-name` is your globally unique AOAI resource name, and `your-deployment-name` is your AI Model deployment name.\n  * Depending on your authentication preference, you either need an API key to authenticate against the service, or Entra ID credentials. The API key is a 32-character string.\n  * An api-version. Latest preview or GA version listed in the `Data plane - inference` row in [the API Specs table](https://aka.ms/azsdk/azure-ai-inference/azure-openai-api-versions). At the time of writing, latest GA version was \"2024-06-01\".\n\n### Install the package\n\nTo install the Azure AI Inferencing package use the following command:\n\n```bash\npip install azure-ai-inference\n```\n\nTo update an existing installation of the package, use:\n\n```bash\npip install --upgrade azure-ai-inference\n```\n\nIf you want to install Azure AI Inferencing package with support for OpenTelemetry based tracing, use the following command:\n\n```bash\npip install azure-ai-inference[opentelemetry]\n```\n\n## Key concepts\n\n### Create and authenticate a client directly, using API key or GitHub token\n\nThe package includes two clients `ChatCompletionsClient` and `EmbeddingsClient`<!-- and `ImageGenerationClients`-->. Both can be created in the similar manner. For example, assuming `endpoint`, `key` and `github_token` are strings holding your endpoint URL, API key or GitHub token, this Python code will create and authenticate a synchronous `ChatCompletionsClient`:\n\n```python\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\n\n# For GitHub models\nclient = ChatCompletionsClient(\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(github_token),\n    model=\"mistral-large\" # Update as needed. Alternatively, you can include this is the `complete` call.\n)\n\n# For Serverless API or Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,  # Of the form https://<your-host-name>.<your-azure-region>.models.ai.azure.com\n    credential=AzureKeyCredential(key)\n)\n\n# For Azure OpenAI endpoint\nclient = ChatCompletionsClient(\n    endpoint=endpoint,  # Of the form https://<your-resouce-name>.openai.azure.com/openai/deployments/<your-deployment-name>\n    credential=AzureKeyCredential(key),\n    api_version=\"2024-06-01\",  # Azure OpenAI api-version. See https://aka.ms/azsdk/azure-ai-inference/azure-openai-api-versions\n)\n```\n\nA synchronous client supports synchronous inference methods, meaning they will block until the service responds with inference results. For simplicity the code snippets below all use synchronous methods. The client offers equivalent asynchronous methods which are more commonly used in production.\n\nTo create an asynchronous client, Install the additional package [aiohttp](https://pypi.org/project/aiohttp/):\n\n```bash\npip install aiohttp\n```\n\nand update the code above to import `asyncio`, and import `ChatCompletionsClient` from the `azure.ai.inference.aio` namespace instead of `azure.ai.inference`. For example:\n\n```python\nimport asyncio\nfrom azure.ai.inference.aio import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\n\n# For Serverless API or Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key)\n)\n```\n\n### Create and authenticate a client directly, using Entra ID\n\n_Note: At the time of writing, only Managed Compute endpoints and Azure OpenAI endpoints support Entra ID authentication.\n\nTo use an Entra ID token credential, first install the [azure-identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity) package:\n\n```python\npip install azure.identity\n```\n\nYou will need to provide the desired credential type obtained from that package. A common selection is [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential) and it can be used as follows:\n\n```python\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.identity import DefaultAzureCredential\n\n# For Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=DefaultAzureCredential(exclude_interactive_browser_credential=False)\n)\n\n# For Azure OpenAI endpoint\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=DefaultAzureCredential(exclude_interactive_browser_credential=False),\n    credential_scopes=[\"https://cognitiveservices.azure.com/.default\"],\n    api_version=\"2024-06-01\",  # Azure OpenAI api-version. See https://aka.ms/azsdk/azure-ai-inference/azure-openai-api-versions\n)\n```\n\nDuring application development, you would typically set up the environment for authentication using Entra ID by first [Installing the Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli), running `az login` in your console window, then entering your credentials in the browser window that was opened. The call to `DefaultAzureCredential()` will then succeed. Setting `exclude_interactive_browser_credential=False` in that call will enable launching a browser window if the user isn't already logged in.\n\n### Defining default settings while creating the clients\n\nYou can define default chat completions or embeddings configurations while constructing the relevant client. These configurations will be applied to all future service calls.\n\nFor example, here we create a `ChatCompletionsClient` using API key authentication, and apply two settings, `temperature` and `max_tokens`:\n\n```python\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\n\n# For Serverless API or Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key)\n    temperature=0.5,\n    max_tokens=1000\n)\n```\n\nDefault settings can be overridden in individual service calls.\n\n### Create and authenticate clients using `load_client`\n\nIf you are using Serverless API or Managed Compute endpoints, there is an alternative to creating a specific client directly. You can instead use the function `load_client` to return the relevant client (of types `ChatCompletionsClient` or `EmbeddingsClient`) based on the provided endpoint:\n\n```python\nfrom azure.ai.inference import load_client\nfrom azure.core.credentials import AzureKeyCredential\n\n# For Serverless API or Managed Compute endpoints only.\n# This will not work on GitHub Models endpoint or Azure OpenAI endpoint.\nclient = load_client(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key)\n)\n\nprint(f\"Created client of type `{type(client).__name__}`.\")\n```\n\nTo load an asynchronous client, import the `load_client` function from `azure.ai.inference.aio` instead.\n\nEntra ID authentication is also supported by the `load_client` function. Replace the key authentication above with `credential=DefaultAzureCredential(exclude_interactive_browser_credential=False)` for example.\n\n### Get AI model information\n\nIf you are using Serverless API or Managed Compute endpoints, you can call the client method `get_model_info` to retrive AI model information. This makes a REST call to the `/info` route on the provided endpoint, as documented in [the REST API reference](https://learn.microsoft.com/azure/ai-studio/reference/reference-model-inference-info). This call will not work for GitHub Models or Azure OpenAI endpoints.\n\n<!-- SNIPPET:sample_get_model_info.get_model_info -->\n\n```python\nmodel_info = client.get_model_info()\n\nprint(f\"Model name: {model_info.model_name}\")\nprint(f\"Model provider name: {model_info.model_provider_name}\")\nprint(f\"Model type: {model_info.model_type}\")\n```\n\n<!-- END SNIPPET -->\n\nAI model information is cached in the client, and futher calls to `get_model_info` will access the cached value and wil not result in a REST API call. Note that if you created the client using `load_client` function, model information will already be cached in the client.\n\nAI model information is displayed (if available) when you `print(client)`.\n\n### Chat Completions\n\nThe `ChatCompletionsClient` has a method named `complete`. The method makes a REST API call to the `/chat/completions` route on the provided endpoint, as documented in [the REST API reference](https://learn.microsoft.com/azure/ai-studio/reference/reference-model-inference-chat-completions).\n\nSee simple chat completion examples below. More can be found in the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/samples) folder.\n\n### Text Embeddings\n\nThe `EmbeddingsClient` has a method named `embed`. The method makes a REST API call to the `/embeddings` route on the provided endpoint, as documented in [the REST API reference](https://learn.microsoft.com/azure/ai-studio/reference/reference-model-inference-embeddings).\n\nSee simple text embedding example below. More can be found in the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/samples) folder.\n\n### Image Embeddings\n\nThe `ImageEmbeddingsClient` has a method named `embed`. The method makes a REST API call to the `/images/embeddings` route on the provided endpoint, as documented in [the REST API reference](https://learn.microsoft.com/azure/ai-studio/reference/reference-model-inference-images-embeddings).\n\nSee simple image embedding example below. More can be found in the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/samples) folder.\n\n## Examples\n\nIn the following sections you will find simple examples of:\n\n* [Chat completions](#chat-completions-example)\n* [Streaming chat completions](#streaming-chat-completions-example)\n* [Chat completions with additional model-specific parameters](#chat-completions-with-additional-model-specific-parameters)\n* [Text Embeddings](#text-embeddings-example)\n* [Image Embeddings](#image-embeddings-example)\n\nThe examples create a synchronous client assuming a Serverless API or Managed Compute endpoint. Modify client\nconstruction code as descirbed in [Key concepts](#key-concepts) to have it work with GitHub Models endpoint or Azure OpenAI\nendpoint. Only mandatory input settings are shown for simplicity.\n\nSee the [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/samples) folder for full working samples for synchronous and asynchronous clients.\n\n### Chat completions example\n\nThis example demonstrates how to generate a single chat completions, for a Serverless API or Managed Compute endpoint, with key authentication, assuming `endpoint` and `key` are already defined. For Entra ID authentication, GitHub models endpoint or Azure OpenAI endpoint, modify the code to create the client as specified in the above sections.\n\n<!-- SNIPPET:sample_chat_completions.chat_completions -->\n\n```python\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.ai.inference.models import SystemMessage, UserMessage\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.complete(\n    messages=[\n        SystemMessage(\"You are a helpful assistant.\"),\n        UserMessage(\"How many feet are in a mile?\"),\n    ]\n)\n\nprint(response.choices[0].message.content)\n```\n\n<!-- END SNIPPET -->\n\nThe following types of messages are supported: `SystemMessage`,`UserMessage`, `AssistantMessage`, `ToolMessage`. See also samples:\n\n* [sample_chat_completions_with_tools.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/sample_chat_completions_with_tools.py) for usage of `ToolMessage`.\n* [sample_chat_completions_with_image_url.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/sample_chat_completions_with_image_url.py) for usage of `UserMessage` that\nincludes sending an image URL.\n* [sample_chat_completions_with_image_data.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/sample_chat_completions_with_image_data.py) for usage of `UserMessage` that\nincludes sending image data read from a local file.\n* [sample_chat_completions_with_structured_output.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/sample_chat_completions_with_structured_output.py) and [sample_chat_completions_with_structured_output_pydantic.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/sample_chat_completions_with_structured_output_pydantic.py) for configuring the service to respond with a JSON-formatted string, adhering to your schema.\n\n\nAlternatively, you can provide the messages as dictionary instead of using the strongly typed classes like `SystemMessage` and `UserMessage`:\n\n<!-- SNIPPET:sample_chat_completions_from_input_dict.chat_completions -->\n\n```python\nresponse = client.complete(\n    {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are an AI assistant that helps people find information. Your replies are short, no more than two sentences.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"What year was construction of the International Space Station mostly done?\",\n            },\n            {\n                \"role\": \"assistant\",\n                \"content\": \"The main construction of the International Space Station (ISS) was completed between 1998 and 2011. During this period, more than 30 flights by US space shuttles and 40 by Russian rockets were conducted to transport components and modules to the station.\",\n            },\n            {\"role\": \"user\", \"content\": \"And what was the estimated cost to build it?\"},\n        ]\n    }\n)\n```\n\n<!-- END SNIPPET -->\n\nTo generate completions for additional messages, simply call `client.complete` multiple times using the same `client`.\n\n### Streaming chat completions example\n\nThis example demonstrates how to generate a single chat completions with streaming response, for a Serverless API or Managed Compute endpoint, with key authentication, assuming `endpoint` and `key` are already defined. You simply need to add `stream=True` to the `complete` call to enable streaming.\n\nFor Entra ID authentication, GitHub models endpoint or Azure OpenAI endpoint, modify the code to create the client as specified in the above sections.\n\n<!-- SNIPPET:sample_chat_completions_streaming.chat_completions_streaming -->\n\n```python\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.ai.inference.models import SystemMessage, UserMessage\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.complete(\n    stream=True,\n    messages=[\n        SystemMessage(\"You are a helpful assistant.\"),\n        UserMessage(\"Give me 5 good reasons why I should exercise every day.\"),\n    ],\n)\n\nfor update in response:\n    print(update.choices[0].delta.content or \"\", end=\"\", flush=True)\n\nclient.close()\n```\n\n<!-- END SNIPPET -->\n\nIn the above `for` loop that prints the results you should see the answer progressively get longer as updates get streamed to the client.\n\nTo generate completions for additional messages, simply call `client.complete` multiple times using the same `client`.\n\n### Chat completions with additional model-specific parameters\n\nIn this example, extra JSON elements are inserted at the root of the request body by setting `model_extras` when calling the `complete` method. These are intended for AI models that require additional model-specific parameters beyond what is defined in the REST API [Request Body table](https://learn.microsoft.com/azure/ai-studio/reference/reference-model-inference-chat-completions#request-body).\n\n<!-- SNIPPET:sample_chat_completions_with_model_extras.model_extras -->\n\n```python\nresponse = client.complete(\n    messages=[\n        SystemMessage(\"You are a helpful assistant.\"),\n        UserMessage(\"How many feet are in a mile?\"),\n    ],\n    model_extras={\"key1\": \"value1\", \"key2\": \"value2\"},  # Optional. Additional parameters to pass to the model.\n)\n```\n\n<!-- END SNIPPET -->\nIn the above example, this will be the JSON payload in the HTTP request:\n\n```json\n{\n    \"messages\":\n    [\n        {\"role\":\"system\",\"content\":\"You are a helpful assistant.\"},\n        {\"role\":\"user\",\"content\":\"How many feet are in a mile?\"}\n    ],\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\n```\n\nNote that by default, the service will reject any request payload that includes extra parameters. In order to change the default service behaviour, when the `complete` method includes `model_extras`, the client library will automatically add the HTTP request header `\"extra-parameters\": \"pass-through\"`.\n\n### Text Embeddings example\n\nThis example demonstrates how to get text embeddings, for a Serverless API or Managed Compute endpoint, with key authentication, assuming `endpoint` and `key` are already defined. For Entra ID authentication, GitHub models endpoint or Azure OpenAI endpoint, modify the code to create the client as specified in the above sections.\n\n<!-- SNIPPET:sample_embeddings.embeddings -->\n\n```python\nfrom azure.ai.inference import EmbeddingsClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = EmbeddingsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.embed(input=[\"first phrase\", \"second phrase\", \"third phrase\"])\n\nfor item in response.data:\n    length = len(item.embedding)\n    print(\n        f\"data[{item.index}]: length={length}, [{item.embedding[0]}, {item.embedding[1]}, \"\n        f\"..., {item.embedding[length-2]}, {item.embedding[length-1]}]\"\n    )\n```\n\n<!-- END SNIPPET -->\n\nThe length of the embedding vector depends on the model, but you should see something like this:\n\n```text\ndata[0]: length=1024, [0.0013399124, -0.01576233, ..., 0.007843018, 0.000238657]\ndata[1]: length=1024, [0.036590576, -0.0059547424, ..., 0.011405945, 0.004863739]\ndata[2]: length=1024, [0.04196167, 0.029083252, ..., -0.0027484894, 0.0073127747]\n```\n\nTo generate embeddings for additional phrases, simply call `client.embed` multiple times using the same `client`.\n\n### Image Embeddings example\n\nThis example demonstrates how to get image embeddings, for a Serverless API or Managed Compute endpoint, with key authentication, assuming `endpoint` and `key` are already defined. For Entra ID authentication, GitHub models endpoint or Azure OpenAI endpoint, modify the code to create the client as specified in the above sections.\n\n<!-- SNIPPET:sample_image_embeddings.image_embeddings -->\n\n```python\nfrom azure.ai.inference import ImageEmbeddingsClient\nfrom azure.ai.inference.models import ImageEmbeddingInput\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = ImageEmbeddingsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.embed(input=[ImageEmbeddingInput.load(image_file=\"sample1.png\", image_format=\"png\")])\n\nfor item in response.data:\n    length = len(item.embedding)\n    print(\n        f\"data[{item.index}]: length={length}, [{item.embedding[0]}, {item.embedding[1]}, \"\n        f\"..., {item.embedding[length-2]}, {item.embedding[length-1]}]\"\n    )\n```\n\n<!-- END SNIPPET -->\n\nThe length of the embedding vector depends on the model, but you should see something like this:\n\n```text\ndata[0]: length=1024, [0.0103302, -0.04425049, ..., -0.011543274, -0.0009088516]\n```\n\nTo generate image embeddings for additional images, simply call `client.embed` multiple times using the same `client`.\n\n<!--\n### Image Embeddings example\n\nThis example demonstrates how to get image embeddings.\n\n <! -- SNIPPET:sample_image_embeddings.image_embeddings -- >\n\n```python\nfrom azure.ai.inference import ImageEmbeddingsClient\nfrom azure.ai.inference.models import ImageEmbeddingInput\nfrom azure.core.credentials import AzureKeyCredential\n\nwith open(\"sample1.png\", \"rb\") as f:\n    image1: str = base64.b64encode(f.read()).decode(\"utf-8\")\nwith open(\"sample2.png\", \"rb\") as f:\n    image2: str = base64.b64encode(f.read()).decode(\"utf-8\")\n\nclient = ImageEmbeddingsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.embed(input=[ImageEmbeddingInput(image=image1), ImageEmbeddingInput(image=image2)])\n\nfor item in response.data:\n    length = len(item.embedding)\n    print(\n        f\"data[{item.index}]: length={length}, [{item.embedding[0]}, {item.embedding[1]}, \"\n        f\"..., {item.embedding[length-2]}, {item.embedding[length-1]}]\"\n    )\n```\n\n-- END SNIPPET --\n\nThe printed result of course depends on the model, but you should see something like this:\n\n```txt\nTBD\n```\n\nTo generate embeddings for additional phrases, simply call `client.embed` multiple times using the same `client`.\n-->\n\n## Troubleshooting\n\n### Exceptions\n\nThe `complete`, `embed` and `get_model_info` methods on the clients raise an [HttpResponseError](https://learn.microsoft.com/python/api/azure-core/azure.core.exceptions.httpresponseerror) exception for a non-success HTTP status code response from the service. The exception's `status_code` will hold the HTTP response status code (with `reason` showing the friendly name). The exception's `error.message` contains a detailed message that may be helpful in diagnosing the issue:\n\n```python\nfrom azure.core.exceptions import HttpResponseError\n\n...\n\ntry:\n    result = client.complete( ... )\nexcept HttpResponseError as e:\n    print(f\"Status code: {e.status_code} ({e.reason})\")\n    print(e.message)\n```\n\nFor example, when you provide a wrong authentication key:\n\n```text\nStatus code: 401 (Unauthorized)\nOperation returned an invalid status 'Unauthorized'\n```\n\nOr when you create an `EmbeddingsClient` and call `embed` on the client, but the endpoint does not\nsupport the `/embeddings` route:\n\n```text\nStatus code: 405 (Method Not Allowed)\nOperation returned an invalid status 'Method Not Allowed'\n```\n\n### Logging\n\nThe client uses the standard [Python logging library](https://docs.python.org/3/library/logging.html). The SDK logs HTTP request and response details, which may be useful in troubleshooting. To log to stdout, add the following:\n\n```python\nimport sys\nimport logging\n\n# Acquire the logger for this client library. Use 'azure' to affect both\n# 'azure.core` and `azure.ai.inference' libraries.\nlogger = logging.getLogger(\"azure\")\n\n# Set the desired logging level. logging.INFO or logging.DEBUG are good options.\nlogger.setLevel(logging.DEBUG)\n\n# Direct logging output to stdout:\nhandler = logging.StreamHandler(stream=sys.stdout)\n# Or direct logging output to a file:\n# handler = logging.FileHandler(filename=\"sample.log\")\nlogger.addHandler(handler)\n\n# Optional: change the default logging format. Here we add a timestamp.\nformatter = logging.Formatter(\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\nhandler.setFormatter(formatter)\n```\n\nBy default logs redact the values of URL query strings, the values of some HTTP request and response headers (including `Authorization` which holds the key or token), and the request and response payloads. To create logs without redaction, do these two things:\n\n1. Set the method argument `logging_enable = True` when you construct the client library, or when you call the client's `complete` or `embed`  methods.\n    ```python\n    client = ChatCompletionsClient(\n        endpoint=endpoint,\n        credential=AzureKeyCredential(key),\n        logging_enable=True\n    )\n    ```\n1. Set the log level to `logging.DEBUG`. Logs will be redacted with any other log level.\n\nBe sure to protect non redacted logs to avoid compromising security.\n\nFor more information, see [Configure logging in the Azure libraries for Python](https://aka.ms/azsdk/python/logging)\n\n### Reporting issues\n\nTo report an issue with the client library, or request additional features, please open a GitHub issue [here](https://github.com/Azure/azure-sdk-for-python/issues). Mention \"azure-ai-inference\" in the title or content.\n\n## Observability With OpenTelemetry\n\nThe Azure AI Inference client library provides experimental support for tracing with OpenTelemetry.\n\nYou can capture prompt and completion contents by setting `AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED` environment to `true` (case insensitive).\nBy default prompts, completions, function name, parameters or outputs are not recorded.\n\n### Setup with Azure Monitor\n\nWhen using Azure AI Inference library with [Azure Monitor OpenTelemetry Distro](https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-enable?tabs=python),\ndistributed tracing for Azure AI Inference calls is enabled by default when using latest version of the distro.\n\n### Setup with OpenTelemetry\n\nCheck out your observability vendor documentation on how to configure OpenTelemetry or refer to the [official OpenTelemetry documentation](https://opentelemetry.io/docs/languages/python/).\n\n#### Installation\n\nMake sure to install OpenTelemetry and the Azure SDK tracing plugin via\n\n```bash\npip install opentelemetry\npip install azure-core-tracing-opentelemetry\n```\n\nYou will also need an exporter to send telemetry to your observability backend. You can print traces to the console or use a local viewer such as [Aspire Dashboard](https://learn.microsoft.com/dotnet/aspire/fundamentals/dashboard/standalone?tabs=bash).\n\nTo connect to Aspire Dashboard or another OpenTelemetry compatible backend, install OTLP exporter:\n\n```bash\npip install opentelemetry-exporter-otlp\n```\n\n#### Configuration\n\nTo enable Azure SDK tracing set `AZURE_SDK_TRACING_IMPLEMENTATION` environment variable to `opentelemetry`.\n\nOr configure it in the code with the following snippet:\n\n<!-- SNIPPET:sample_chat_completions_with_tracing.trace_setting -->\n\n```python\nfrom azure.core.settings import settings\n\nsettings.tracing_implementation = \"opentelemetry\"\n```\n\n<!-- END SNIPPET -->\n\nPlease refer to [azure-core-tracing-documentation](https://learn.microsoft.com/python/api/overview/azure/core-tracing-opentelemetry-readme) for more information.\n\nThe final step is to enable Azure AI Inference instrumentation with the following code snippet:\n\n<!-- SNIPPET:sample_chat_completions_with_tracing.instrument_inferencing -->\n\n```python\nfrom azure.ai.inference.tracing import AIInferenceInstrumentor\n\n# Instrument AI Inference API\nAIInferenceInstrumentor().instrument()\n```\n\n<!-- END SNIPPET -->\n\n\nIt is also possible to uninstrument the Azure AI Inferencing API by using the uninstrument call. After this call, the traces will no longer be emitted by the Azure AI Inferencing API until instrument is called again.\n\n<!-- SNIPPET:sample_chat_completions_with_tracing.uninstrument_inferencing -->\n\n```python\nAIInferenceInstrumentor().uninstrument()\n```\n\n<!-- END SNIPPET -->\n\n### Tracing Your Own Functions\n\nThe `@tracer.start_as_current_span` decorator can be used to trace your own functions. This will trace the function parameters and their values. You can also add further attributes to the span in the function implementation as demonstrated below. Note that you will have to setup the tracer in your code before using the decorator. More information is available [here](https://opentelemetry.io/docs/languages/python/).\n\n<!-- SNIPPET:sample_chat_completions_with_tracing.trace_function -->\n\n```python\nfrom opentelemetry.trace import get_tracer\n\ntracer = get_tracer(__name__)\n\n\n# The tracer.start_as_current_span decorator will trace the function call and enable adding additional attributes\n# to the span in the function implementation. Note that this will trace the function parameters and their values.\n@tracer.start_as_current_span(\"get_temperature\")  # type: ignore\ndef get_temperature(city: str) -> str:\n\n    # Adding attributes to the current span\n    span = trace.get_current_span()\n    span.set_attribute(\"requested_city\", city)\n\n    if city == \"Seattle\":\n        return \"75\"\n    elif city == \"New York City\":\n        return \"80\"\n    else:\n        return \"Unavailable\"\n```\n\n<!-- END SNIPPET -->\n\n## Next steps\n\n* Have a look at the [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference/samples) folder, containing fully runnable Python code for doing inference using synchronous and asynchronous clients.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct). For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n\n<!-- Note: I did not use LINKS section here with a list of `[link-label](link-url)` because these\nlinks don't work in the Sphinx generated documentation. The index.html page of these docs\ninclude this README, but with broken links.-->\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference","keywords":"azure, azure sdk","license":"MIT License","license_expression":null,"license_files":null,"maintainer":null,"maintainer_email":null,"name":"azure-ai-inference","package_url":"https://pypi.org/project/azure-ai-inference/","platform":null,"project_url":"https://pypi.org/project/azure-ai-inference/","project_urls":{"Homepage":"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ai/azure-ai-inference"},"provides_extra":null,"release_url":"https://pypi.org/project/azure-ai-inference/1.0.0b7/","requires_dist":["isodate>=0.6.1","azure-core>=1.30.0","typing-extensions>=4.6.0","azure-core-tracing-opentelemetry; extra == \"opentelemetry\"","pyyaml; extra == \"prompts\""],"requires_python":">=3.8","summary":"Microsoft Azure AI Inference Client Library for Python","version":"1.0.0b7","yanked":false,"yanked_reason":null},"last_serial":26951222,"releases":{"1.0.0b1":[{"comment_text":null,"digests":{"blake2b_256":"f958436220c284c2ab3e37461facbd85736511ef476eb8e9a9ad1c998e19c60a","md5":"9c5332bd9daf0a12ce1d0a028737c49b","sha256":"c62279a36c232a98cb69bcbbf6b8f1974316922350e20f990bc27c041881c854"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b1-py3-none-any.whl","has_sig":false,"md5_digest":"9c5332bd9daf0a12ce1d0a028737c49b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":84773,"upload_time":"2024-06-14T16:04:48","upload_time_iso_8601":"2024-06-14T16:04:48.235737Z","url":"https://files.pythonhosted.org/packages/f9/58/436220c284c2ab3e37461facbd85736511ef476eb8e9a9ad1c998e19c60a/azure_ai_inference-1.0.0b1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"e901dffe8290e40752a243e8982c82aefcbbe0c3d290042dc5b759b02bd09644","md5":"01329fd9f48b148c8e7ea1c967d59ccb","sha256":"e44c58ccc38a6ae335193d4ba99d9424b1d9cdfc7f18d5285dc17ba988404dfd"},"downloads":-1,"filename":"azure-ai-inference-1.0.0b1.tar.gz","has_sig":false,"md5_digest":"01329fd9f48b148c8e7ea1c967d59ccb","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":97105,"upload_time":"2024-06-14T16:04:36","upload_time_iso_8601":"2024-06-14T16:04:36.952665Z","url":"https://files.pythonhosted.org/packages/e9/01/dffe8290e40752a243e8982c82aefcbbe0c3d290042dc5b759b02bd09644/azure-ai-inference-1.0.0b1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0b2":[{"comment_text":null,"digests":{"blake2b_256":"0091193690b266936b674671ca29a0cfd1cc63aa00a18f16c3e57b44da90d222","md5":"7c47fb2374f669c001db3a114b98e276","sha256":"fb35a30867419590d2c7a52e287c456c9bd264690bdfcdec54930c3e73897a8f"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b2-py3-none-any.whl","has_sig":false,"md5_digest":"7c47fb2374f669c001db3a114b98e276","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":84574,"upload_time":"2024-06-22T16:34:05","upload_time_iso_8601":"2024-06-22T16:34:05.272965Z","url":"https://files.pythonhosted.org/packages/00/91/193690b266936b674671ca29a0cfd1cc63aa00a18f16c3e57b44da90d222/azure_ai_inference-1.0.0b2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"8a933e5671c857d28339b186b1398c3c6913e9c7b15bc08b41063bbbd2e55ac7","md5":"3d398c2206f9714df203dbbd741ff628","sha256":"efe2ad0c79ab80d3323edb919cb769a5e21d8ed2c56fe17f9b737893432e0a99"},"downloads":-1,"filename":"azure-ai-inference-1.0.0b2.tar.gz","has_sig":false,"md5_digest":"3d398c2206f9714df203dbbd741ff628","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":98527,"upload_time":"2024-06-22T16:34:03","upload_time_iso_8601":"2024-06-22T16:34:03.692155Z","url":"https://files.pythonhosted.org/packages/8a/93/3e5671c857d28339b186b1398c3c6913e9c7b15bc08b41063bbbd2e55ac7/azure-ai-inference-1.0.0b2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0b3":[{"comment_text":null,"digests":{"blake2b_256":"c4799f84eb6c03c6e18b36317b587b29b3244037ab2f65acd48666d9e62fdfdc","md5":"0fe4418cc1eb77b94021a37e592ba7e9","sha256":"6734ca7334c809a170beb767f1f1455724ab3f006cb60045e42a833c0e764403"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b3-py3-none-any.whl","has_sig":false,"md5_digest":"0fe4418cc1eb77b94021a37e592ba7e9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":85951,"upload_time":"2024-07-28T15:29:55","upload_time_iso_8601":"2024-07-28T15:29:55.228161Z","url":"https://files.pythonhosted.org/packages/c4/79/9f84eb6c03c6e18b36317b587b29b3244037ab2f65acd48666d9e62fdfdc/azure_ai_inference-1.0.0b3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"71895ddefdc2ce920b68bc741e3be6c2a0ca58702eeca778546a356c3ae7fe24","md5":"86b3f42ae499b5a545b24565dc275a3e","sha256":"1e99dc74c3b335a457500311bbbadb348f54dc4c12252a93cb8ab78d6d217ff0"},"downloads":-1,"filename":"azure-ai-inference-1.0.0b3.tar.gz","has_sig":false,"md5_digest":"86b3f42ae499b5a545b24565dc275a3e","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":104451,"upload_time":"2024-07-28T15:29:53","upload_time_iso_8601":"2024-07-28T15:29:53.524617Z","url":"https://files.pythonhosted.org/packages/71/89/5ddefdc2ce920b68bc741e3be6c2a0ca58702eeca778546a356c3ae7fe24/azure-ai-inference-1.0.0b3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0b4":[{"comment_text":null,"digests":{"blake2b_256":"6da066c46c43cce5937072d6480f7836c4429272cf143f78c2b3a984efceff0f","md5":"5237a90ce60a94121c0b8d8f3a5d4e23","sha256":"e2c949f91845a8cd96cb9a61ffd432b5b0f4ce236b9be8c29d10f38e0a327412"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b4-py3-none-any.whl","has_sig":false,"md5_digest":"5237a90ce60a94121c0b8d8f3a5d4e23","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":85007,"upload_time":"2024-08-28T17:10:44","upload_time_iso_8601":"2024-08-28T17:10:44.000562Z","url":"https://files.pythonhosted.org/packages/6d/a0/66c46c43cce5937072d6480f7836c4429272cf143f78c2b3a984efceff0f/azure_ai_inference-1.0.0b4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"64e8e3c85e49d2e379256f23c685699a36206bfff84d1ae26ffb784ef09ac621","md5":"6381767196a10caf4c7bb9e38b707cc2","sha256":"5464404bef337338d4af6eefde3af903400ddb8e5c9e6820f902303542fa0f72"},"downloads":-1,"filename":"azure-ai-inference-1.0.0b4.tar.gz","has_sig":false,"md5_digest":"6381767196a10caf4c7bb9e38b707cc2","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":108285,"upload_time":"2024-08-28T17:10:42","upload_time_iso_8601":"2024-08-28T17:10:42.157657Z","url":"https://files.pythonhosted.org/packages/64/e8/e3c85e49d2e379256f23c685699a36206bfff84d1ae26ffb784ef09ac621/azure-ai-inference-1.0.0b4.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0b5":[{"comment_text":null,"digests":{"blake2b_256":"ea5795d198fcd7d8dba3ba820ba0bd9dae192d4c4f93a65eed9303db24ccaf67","md5":"26d4eba570efebb56fb137970192d0f5","sha256":"0147653088033f1fd059d5f4bd0fedac82529fdcc7a0d2183d9508b3f80cf549"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b5-py3-none-any.whl","has_sig":false,"md5_digest":"26d4eba570efebb56fb137970192d0f5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":92510,"upload_time":"2024-10-16T22:56:44","upload_time_iso_8601":"2024-10-16T22:56:44.707235Z","url":"https://files.pythonhosted.org/packages/ea/57/95d198fcd7d8dba3ba820ba0bd9dae192d4c4f93a65eed9303db24ccaf67/azure_ai_inference-1.0.0b5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"07eaa245bd0b622b6bf4771f1a237c717138448fb3b49cceb7aa21817311a72b","md5":"879cd669bd4f6dc4e118d3a963d8533c","sha256":"c95b490bcd670ccdeb1048dc2b45e0f8252a4d69a348ca15d4510d327b64dd0d"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b5.tar.gz","has_sig":false,"md5_digest":"879cd669bd4f6dc4e118d3a963d8533c","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":123097,"upload_time":"2024-10-16T22:56:41","upload_time_iso_8601":"2024-10-16T22:56:41.862797Z","url":"https://files.pythonhosted.org/packages/07/ea/a245bd0b622b6bf4771f1a237c717138448fb3b49cceb7aa21817311a72b/azure_ai_inference-1.0.0b5.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0b6":[{"comment_text":null,"digests":{"blake2b_256":"5aaa47459ab2e67c55ff98dbb9694c47cf98e484ce1ae1acb244d28b25a8c1c1","md5":"f27e6638819ce3a09dece4c386785aec","sha256":"5699ad78d70ec2d227a5eff2c1bafc845018f6624edc5b03589dfff861c54958"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b6-py3-none-any.whl","has_sig":false,"md5_digest":"f27e6638819ce3a09dece4c386785aec","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":115312,"upload_time":"2024-11-12T21:11:17","upload_time_iso_8601":"2024-11-12T21:11:17.584919Z","url":"https://files.pythonhosted.org/packages/5a/aa/47459ab2e67c55ff98dbb9694c47cf98e484ce1ae1acb244d28b25a8c1c1/azure_ai_inference-1.0.0b6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"2ac9264ae0ef0460dbd7c7efe1d3a093ad6a00fb2823d341ac457459396df2d6","md5":"df340e5665bd078d7c8896b907bf3d4b","sha256":"b8ac941de1e69151bad464191e18856d4e74f962ae03235da137a9a326143676"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b6.tar.gz","has_sig":false,"md5_digest":"df340e5665bd078d7c8896b907bf3d4b","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":145414,"upload_time":"2024-11-12T21:11:15","upload_time_iso_8601":"2024-11-12T21:11:15.336318Z","url":"https://files.pythonhosted.org/packages/2a/c9/264ae0ef0460dbd7c7efe1d3a093ad6a00fb2823d341ac457459396df2d6/azure_ai_inference-1.0.0b6.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0b7":[{"comment_text":null,"digests":{"blake2b_256":"cdb65ba830eddc59f820c654694d476c14a3dd9c1f828ff9b48eb8b21dfd5f01","md5":"443b4c35af75ff591739043893d39123","sha256":"59bb6a9ee62bd7654a69ca2bf12fe9335d7045df95b491cb8b5f9e3791c86175"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b7-py3-none-any.whl","has_sig":false,"md5_digest":"443b4c35af75ff591739043893d39123","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":123030,"upload_time":"2025-01-15T01:12:57","upload_time_iso_8601":"2025-01-15T01:12:57.781583Z","url":"https://files.pythonhosted.org/packages/cd/b6/5ba830eddc59f820c654694d476c14a3dd9c1f828ff9b48eb8b21dfd5f01/azure_ai_inference-1.0.0b7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"af37233eee0bebbf631d2f911a9f1ebbc3784b100d9bfb84efc275e71c1ea636","md5":"93cfeb1f9280254f024243743fb703ec","sha256":"bd912f71f7f855036ca46c9a21439f290eed5e61da418fd26bbb32e3c68bcce3"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b7.tar.gz","has_sig":false,"md5_digest":"93cfeb1f9280254f024243743fb703ec","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":175883,"upload_time":"2025-01-15T01:12:54","upload_time_iso_8601":"2025-01-15T01:12:54.899047Z","url":"https://files.pythonhosted.org/packages/af/37/233eee0bebbf631d2f911a9f1ebbc3784b100d9bfb84efc275e71c1ea636/azure_ai_inference-1.0.0b7.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":null,"digests":{"blake2b_256":"cdb65ba830eddc59f820c654694d476c14a3dd9c1f828ff9b48eb8b21dfd5f01","md5":"443b4c35af75ff591739043893d39123","sha256":"59bb6a9ee62bd7654a69ca2bf12fe9335d7045df95b491cb8b5f9e3791c86175"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b7-py3-none-any.whl","has_sig":false,"md5_digest":"443b4c35af75ff591739043893d39123","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":123030,"upload_time":"2025-01-15T01:12:57","upload_time_iso_8601":"2025-01-15T01:12:57.781583Z","url":"https://files.pythonhosted.org/packages/cd/b6/5ba830eddc59f820c654694d476c14a3dd9c1f828ff9b48eb8b21dfd5f01/azure_ai_inference-1.0.0b7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"af37233eee0bebbf631d2f911a9f1ebbc3784b100d9bfb84efc275e71c1ea636","md5":"93cfeb1f9280254f024243743fb703ec","sha256":"bd912f71f7f855036ca46c9a21439f290eed5e61da418fd26bbb32e3c68bcce3"},"downloads":-1,"filename":"azure_ai_inference-1.0.0b7.tar.gz","has_sig":false,"md5_digest":"93cfeb1f9280254f024243743fb703ec","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":175883,"upload_time":"2025-01-15T01:12:54","upload_time_iso_8601":"2025-01-15T01:12:54.899047Z","url":"https://files.pythonhosted.org/packages/af/37/233eee0bebbf631d2f911a9f1ebbc3784b100d9bfb84efc275e71c1ea636/azure_ai_inference-1.0.0b7.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
