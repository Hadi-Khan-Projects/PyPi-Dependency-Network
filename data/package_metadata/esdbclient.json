{"info":{"author":"John Bywater","author_email":"john.bywater@appropriatesoftware.net","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","License :: OSI Approved :: BSD License","License :: Other/Proprietary License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# Python gRPC Client for EventStoreDB\n\nThis [Python package](https://pypi.org/project/esdbclient/) provides multithreaded and asyncio Python\nclients for the [EventStoreDB](https://www.eventstore.com/) database.\n\nThe multithreaded `EventStoreDBClient` is described in detail below. Please scroll\ndown for <a href=\"#asyncio-client\">information</a> about `AsyncEventStoreDBClient`.\n\nThese clients have been developed and are being maintained in a collaboration\nwith the EventStoreDB team, and are officially support by Event Store Ltd.\nAlthough not all aspects of the EventStoreDB gRPC API are implemented, most\nfeatures are presented in an easy-to-use interface.\n\nThese clients have been tested to work with EventStoreDB LTS versions 22.10, 23.10,\nand 24.10, without and without SSL/TLS, with both single-server\nand cluster modes, and with Python versions 3.8, 3.9, 3.10, 3.11, 3.12, and 3.13.\n\nThe test suite has 100% line and branch coverage. The code has typing annotations\nchecked strictly with mypy. The code is formatted with black and isort, and checked\nwith flake8. Poetry is used for package management during development, and for\nbuilding and publishing distributions to [PyPI](https://pypi.org/project/esdbclient/).\n\nFor an example of usage, see the [eventsourcing-eventstoredb](\nhttps://github.com/pyeventsourcing/eventsourcing-eventstoredb) package.\n\n\n<!-- TOC -->\n* [Synopsis](#synopsis)\n* [Install package](#install-package)\n  * [From PyPI](#from-pypi)\n  * [With Poetry](#with-poetry)\n* [EventStoreDB server](#eventstoredb-server)\n  * [Run container](#run-container)\n  * [Stop container](#stop-container)\n* [EventStoreDB client](#eventstoredb-client)\n  * [Import class](#import-class)\n  * [Construct client](#construct-client)\n* [Connection strings](#connection-strings)\n  * [Two schemes](#two-schemes)\n  * [User info string](#user-info-string)\n  * [Query string](#query-string)\n  * [Examples](#examples)\n* [Event objects](#event-objects)\n  * [New events](#new-events)\n  * [Recorded events](#recorded-events)\n* [Streams](#streams)\n  * [Append events](#append-events)\n  * [Idempotent append operations](#idempotent-append-operations)\n  * [Read stream events](#read-stream-events)\n  * [Get current version](#get-current-version)\n  * [How to implement snapshotting with EventStoreDB](#how-to-implement-snapshotting-with-eventstoredb)\n  * [Read all events](#read-all-events)\n  * [Get commit position](#get-commit-position)\n  * [Get stream metadata](#get-stream-metadata)\n  * [Set stream metadata](#set-stream-metadata)\n  * [Delete stream](#delete-stream)\n  * [Tombstone stream](#tombstone-stream)\n* [Catch-up subscriptions](#catch-up-subscriptions)\n  * [Subscribe to all events](#subscribe-to-all-events)\n  * [Subscribe to stream events](#subscribe-to-stream-events)\n  * [How to implement exactly-once event processing](#how-to-implement-exactly-once-event-processing)\n* [Persistent subscriptions](#persistent-subscriptions)\n  * [Create subscription to all](#create-subscription-to-all)\n  * [Read subscription to all](#read-subscription-to-all)\n  * [How to write a persistent subscription consumer](#how-to-write-a-persistent-subscription-consumer)\n  * [Update subscription to all](#update-subscription-to-all)\n  * [Create subscription to stream](#create-subscription-to-stream)\n  * [Read subscription to stream](#read-subscription-to-stream)\n  * [Update subscription to stream](#update-subscription-to-stream)\n  * [Replay parked events](#replay-parked-events)\n  * [Get subscription info](#get-subscription-info)\n  * [List subscriptions](#list-subscriptions)\n  * [List subscriptions to stream](#list-subscriptions-to-stream)\n  * [Delete subscription](#delete-subscription)\n* [Projections](#projections)\n  * [Create projection](#create-projection)\n  * [Get projection state](#get-projection-state)\n  * [Get projection statistics](#get-projection-statistics)\n  * [Update projection](#update-projection)\n  * [Enable projection](#enable-projection)\n  * [Disable projection](#disable-projection)\n  * [Reset projection](#reset-projection)\n  * [Delete projection](#delete-projection)\n  * [Restart projections subsystem](#restart-projections-subsystem)\n* [Call credentials](#call-credentials)\n  * [Construct call credentials](#construct-call-credentials)\n* [Connection](#connection)\n  * [Reconnect](#reconnect)\n  * [Close](#close)\n* [Asyncio client](#asyncio-client)\n  * [Synopsis](#synopsis-1)\n  * [FastAPI](#fastapi)\n* [Notes](#notes)\n  * [Regular expression filters](#regular-expression-filters)\n  * [Reconnect and retry method decorators](#reconnect-and-retry-method-decorators)\n* [Instrumentation](#instrumentation)\n  * [OpenTelemetry](#open-telemetry)\n* [Communities](#communities)\n* [Contributors](#contributors)\n  * [Install Poetry](#install-poetry)\n  * [Setup for PyCharm users](#setup-for-pycharm-users)\n  * [Setup from command line](#setup-from-command-line)\n  * [Project Makefile commands](#project-makefile-commands)\n<!-- TOC -->\n\n## Synopsis<a id=\"synopsis\"></a>\n\nThe `EventStoreDBClient` class can be imported from the `esdbclient` package.\n\nProbably the three most useful methods of `EventStoreDBClient` are:\n\n* `append_to_stream()` This method can be used to record new events in a particular\n\"stream\". This is useful, for example, when executing a command in an application\nthat mutates an aggregate. This method is \"atomic\" in that either all or none of\nthe events will be recorded.\n\n* `get_stream()` This method can be used to retrieve all the recorded\nevents in a \"stream\". This is useful, for example, when reconstructing\nan aggregate from recorded events before executing a command in an\napplication that creates new events.\n\n* `subscribe_to_all()` This method can be used to receive all recorded events in\nthe database. This is useful, for example, in event-processing components because\nit supports processing events with \"exactly-once\" semantics.\n\nThe example below uses an \"insecure\" EventStoreDB server running locally on port 2113.\n\n```python\nimport uuid\n\nfrom esdbclient import EventStoreDBClient, NewEvent, StreamState\n\n\n# Construct EventStoreDBClient with an EventStoreDB URI. The\n# connection string URI specifies that the client should\n# connect to an \"insecure\" server running on port 2113.\n\nclient = EventStoreDBClient(\n    uri=\"esdb://localhost:2113?Tls=false\"\n)\n\n\n# Generate new events. Typically, domain events of different\n# types are generated in a domain model, and then serialized\n# into NewEvent objects. An aggregate ID may be used as the\n# name of a stream in EventStoreDB.\n\nstream_name1 = str(uuid.uuid4())\nevent1 = NewEvent(\n    type='OrderCreated',\n    data=b'{\"order_number\": \"123456\"}'\n)\nevent2 = NewEvent(\n    type='OrderSubmitted',\n    data=b'{}'\n)\nevent3 = NewEvent(\n    type='OrderCancelled',\n    data=b'{}'\n)\n\n\n# Append new events to a new stream. The value returned\n# from the append_to_stream() method is the overall\n# \"commit position\" in the database of the last new event\n# recorded by this operation. The returned \"commit position\"\n# may be used in a user interface to poll an eventually\n# consistent event-processing component until it can\n# present an up-to-date materialized view. New events are\n# each allocated a \"stream position\", which is the next\n# available position in the stream, starting from 0.\n\ncommit_position1 = client.append_to_stream(\n    stream_name=stream_name1,\n    current_version=StreamState.NO_STREAM,\n    events=[event1, event2],\n)\n\n# Append events to an existing stream. The \"current version\"\n# is the \"stream position\" of the last recorded event in a\n# stream. We have recorded two new events, so the \"current\n# version\" is 1. The exception 'WrongCurrentVersion' will be\n# raised if an incorrect value is given.\n\ncommit_position2 = client.append_to_stream(\n    stream_name=stream_name1,\n    current_version=1,\n    events=[event3],\n)\n\n# - allocated commit positions increase monotonically\nassert commit_position2 > commit_position1\n\n\n# Get events recorded in a stream. This method returns\n# a sequence of recorded event objects. The recorded\n# event objects may be deserialized to domain event\n# objects of different types and used to reconstruct\n# an aggregate in a domain model.\n\nrecorded_events = client.get_stream(\n    stream_name=stream_name1\n)\n\n# - stream 'stream_name1' now has three events\nassert len(recorded_events) == 3\n\n# - allocated stream positions are zero-based and gapless\nassert recorded_events[0].stream_position == 0\nassert recorded_events[1].stream_position == 1\nassert recorded_events[2].stream_position == 2\n\n# - event attribute values are recorded faithfully\nassert recorded_events[0].type == \"OrderCreated\"\nassert recorded_events[0].data == b'{\"order_number\": \"123456\"}'\nassert recorded_events[0].id == event1.id\n\nassert recorded_events[1].type == \"OrderSubmitted\"\nassert recorded_events[1].data == b'{}'\nassert recorded_events[1].id == event2.id\n\nassert recorded_events[2].type == \"OrderCancelled\"\nassert recorded_events[2].data == b'{}'\nassert recorded_events[2].id == event3.id\n\n\n# Start a catch-up subscription from last recorded position.\n# This method returns a \"catch-up subscription\" object,\n# which can be iterated over to obtain recorded events.\n# The iterator will not stop when there are no more recorded\n# events to be returned, but instead will block, and then continue\n# when further events are recorded. It can be used as a context\n# manager so that the underlying streaming gRPC call to the database\n# can be cancelled cleanly in case of any error.\n\nreceived_events = []\nwith client.subscribe_to_all(commit_position=0) as subscription:\n\n    # Iterate over the catch-up subscription. Process each recorded\n    # event in turn. Within an atomic database transaction, record\n    # the event's \"commit position\" along with any new state generated\n    # by processing the event. Use the component's last recorded commit\n    # position when restarting the catch-up subscription.\n\n    for event in subscription:\n        received_events.append(event)\n\n        if event.commit_position == commit_position2:\n            # Break so we can continue with the example.\n            break\n\n\n# - events are received in the order they were recorded\nassert received_events[-3].type == \"OrderCreated\"\nassert received_events[-3].data == b'{\"order_number\": \"123456\"}'\nassert received_events[-3].id == event1.id\n\nassert received_events[-2].type == \"OrderSubmitted\"\nassert received_events[-2].data == b'{}'\nassert received_events[-2].id == event2.id\n\nassert received_events[-1].type == \"OrderCancelled\"\nassert received_events[-1].data == b'{}'\nassert received_events[-1].id == event3.id\n\n\n# Close the client's gRPC connection.\n\nclient.close()\n```\n\n\n## Install package<a id=\"install-package\"></a>\n\nIt is recommended to install Python packages into a Python virtual environment.\n\n### From PyPI<a id=\"from-pypi\"></a>\n\nYou can use pip to install this package directly from\n[the Python Package Index](https://pypi.org/project/esdbclient/).\n\n    $ pip install esdbclient\n\n### With Poetry<a id=\"with-poetry\"></a>\n\nYou can use Poetry to add this package to your pyproject.toml and install it.\n\n    $ poetry add esdbclient\n\n## EventStoreDB server<a id=\"eventstoredb-server\"></a>\n\nThe EventStoreDB server can be run locally using the official Docker container image.\n\n### Run container<a id=\"run-container\"></a>\n\nFor development, you can run a \"secure\" EventStoreDB server using the following command.\n\n    $ docker run -d --name eventstoredb-secure -it -p 2113:2113 --env \"HOME=/tmp\" docker.eventstore.com/eventstore/eventstoredb-ee:24.10.0-x64-8.0-bookworm-slim --dev\n\nAs we will see, your client will need an EventStoreDB connection string URI as the value\nof its `uri` constructor argument. The connection string for this \"secure\" EventStoreDB\nserver would be:\n\n    esdb://admin:changeit@localhost:2113\n\nTo connect to a \"secure\" server, you will usually need to include a \"username\"\nand a \"password\" in the connection string, so that the server can authenticate the\nclient. With EventStoreDB, the default username is \"admin\" and the default password\nis \"changeit\".\n\nWhen connecting to a \"secure\" server, you may also need to provide an SSL/TLS certificate\nas the value of the `root_certificates` constructor argument. If the server certificate\nis publicly signed, the root certificates of the certificate authority may be installed\nlocally and picked up by the grpc package from a default location. The client uses the\nroot SSL/TLS certificate to authenticate the server. For development, you can either\nuse the SSL/TLS certificate of a self-signing certificate authority used to create the\nserver's certificate. Or, when using a single-node cluster, you can just use the server\ncertificate itself, getting the server certificate with the following Python code.\n\n```python\nimport ssl\n\nserver_certificate = ssl.get_server_certificate(addr=('localhost', 2113))\n```\n\nAlternatively, you can start an \"insecure\" server using the following command.\n\n    $ docker run -d --name eventstoredb-insecure -it -p 2113:2113 docker.eventstore.com/eventstore/eventstoredb-ee:24.10.0-x64-8.0-bookworm-slim --insecure\n\nThe connection string URI for this \"insecure\" server would be:\n\n    esdb://localhost:2113?Tls=false\n\nAs we will see, when connecting to an \"insecure\" server, there is no need to include\na \"username\" and a \"password\" in the connection string. If you do, these values will\nbe ignored by the client, so that they are not sent over an insecure channel.\n\nPlease note, the \"insecure\" connection string uses a query string with the field-value\n`Tls=false`. The value of this field is by default `true`.\n\n### Stop container<a id=\"stop-container\"></a>\n\nTo stop and remove the \"secure\" container, use the following Docker commands.\n\n    $ docker stop eventstoredb-secure\n\t$ docker rm eventstoredb-secure\n\nTo stop and remove the \"insecure\" container, use the following Docker commands.\n\n    $ docker stop eventstoredb-insecure\n\t$ docker rm eventstoredb-insecure\n\n\n## EventStoreDB client<a id=\"eventstoredb-client\"></a>\n\nThis EventStoreDB client is implemented in the `esdbclient` package with\nthe `EventStoreDBClient` class.\n\n### Import class<a id=\"import-class\"></a>\n\nThe `EventStoreDBClient` class can be imported from the `esdbclient` package.\n\n```python\nfrom esdbclient import EventStoreDBClient\n```\n\n### Construct client<a id=\"construct-client\"></a>\n\nThe `EventStoreDBClient` class has one required constructor argument, `uri`, and three\noptional constructor argument, `root_certificates`, `private_key`, and `certificate_chain`.\n\nThe `uri` argument is expected to be an EventStoreDB connection string URI that\nconforms with the standard EventStoreDB \"esdb\" or \"esdb+discover\" URI schemes.\n\nThe client must be configured to create a \"secure\" connection to a \"secure\" server,\nor alternatively an \"insecure\" connection to an \"insecure\" server. By default, the\nclient will attempt to create a \"secure\" connection. And so, when connecting to an\n\"insecure\" server, the connection string must specify that the client should attempt\nto make an \"insecure\" connection by using the URI query string field-value `Tls=false`.\n\nThe optional `root_certificates` argument can be either a Python `str` or a Python `bytes`\nobject containing PEM encoded SSL/TLS certificate(s), and is used to authenticate the\nserver to the client. When connecting to an \"insecure\" service, the value of this\nargument will be ignored. When connecting to a \"secure\" server, it may be necessary to\nset this argument. Typically, the value of this argument would be the public certificate\nof the certificate authority that was responsible for generating the certificate used by\nthe EventStoreDB server. It is unnecessary to set this value in this case if certificate\nauthority certificates are installed locally, such that the Python grpc library can pick\nthem up from a default location. Alternatively, for development, you can use the server's\ncertificate itself. The value of this argument is passed directly to `grpc.ssl_channel_credentials()`.\n\nAn alternative way to supply the `root_certificates` argument is through the `tlsCaFile` field-value of the connection string URI query string (see below). If the `tlsCaFile` field-value is specified, the `root_certificates` argument will be ignored.\n\nThe optional `private_key` and `certificate_chain` arguments are both either a Python\n`str` or a Python `bytes` object. These arguments may be used to authenticate the client\nto the server. It is necessary to provide correct values for these arguments when connecting\nto a \"secure\" server that is running the commercial edition of EventStoreDB with the\nUser Certificates plugin enabled. The value of `private_key` should be the X.509 user\ncertificate's private key in PEM format. The value of `certificate_chain` should be the\nX.509 user certificate itself in PEM format. The values of these arguments are passed\ndirectly to `grpc.ssl_channel_credentials()`. When connecting to an \"insecure\" service,\nthe values of these arguments will be ignored. Please note, an alternative way of\nsupplying the client with a user certificate and private key is to use the `UserCertFile`\nand `UserKeyFile` field-values of the connection string URI query string (see below).\nIf the `UserCertFile` field-value is specified, the `certificate_chain` argument will be\nignored. If the `UserKeyFile` field-value is specified, the `public_key` argument will be\nignored.\n\nIn the example below, constructor argument values for `uri` and `root_certificates` are\ntaken from the operating system environment.\n\n```python\nimport os\n\nclient = EventStoreDBClient(\n    uri=os.getenv(\"ESDB_URI\"),\n    root_certificates=os.getenv(\"ESDB_ROOT_CERTIFICATES\"),\n)\n```\n\n## Connection strings<a id=\"connection-strings\"></a>\n\nAn EventStoreDB connection string is a URI that conforms with one of two possible\nschemes: either the \"esdb\" scheme, or the \"esdb+discover\" scheme.\n\nThe syntax and semantics of the EventStoreDB URI schemes are described below. The\nsyntax is defined using [EBNF](https://en.wikipedia.org/wiki/Extended_Backus–Naur_form).\n\n### Two schemes<a id=\"two-schemes\"></a>\n\nThe \"esdb\" URI scheme can be defined in the following way.\n\n    esdb-uri = \"esdb://\" , [ user-info , \"@\" ] , grpc-target, { \",\" , grpc-target } , [ \"?\" , query-string ] ;\n\nIn the \"esdb\" URI scheme, after the optional user info string, there must be at least\none gRPC target. If there are several gRPC targets, they must be separated from each\nother with the \",\" character.\n\nEach gRPC target should indicate an EventStoreDB gRPC server socket, all in the same\nEventStoreDB cluster, by specifying a host and a port number separated with the \":\"\ncharacter. The host may be a hostname that can be resolved to an IP address, or an IP\naddress.\n\n    grpc-target = ( hostname | ip-address ) , \":\" , port-number ;\n\nIf there is one gRPC target, the client will simply attempt to connect to this\nserver, and it will use this connection when recording and retrieving events.\n\nIf there are two or more gRPC targets, the client will attempt to connect to the\nGossip API of each in turn, attempting to obtain information about the cluster from\nit, until information about the cluster is obtained. A member of the cluster is then\nselected by the client according to the \"node preference\" specified by the connection\nstring URI. The client will then close its connection and connect to the selected node\nwithout the 'round robin' load balancing strategy. If the \"node preference\" is \"leader\",\nand after connecting to a leader, if the leader becomes a follower, the client will\nreconnect to the new leader.\n\n\nThe \"esdb+discover\" URI scheme can be defined in the following way.\n\n    esdb-discover-uri = \"esdb+discover://\" , [ user-info, \"@\" ] , cluster-domainname, [ \":\" , port-number ] , [ \"?\" , query-string ] ;\n\nIn the \"esdb+discover\" URI scheme, after the optional user info string, there should be\na domain name which identifies a cluster of EventStoreDB servers. Individual nodes in\nthe cluster should be declared with DNS 'A' records.\n\nThe client will use the cluster domain name with the gRPC library's 'round robin' load\nbalancing strategy to call the Gossip APIs of addresses discovered from DNS 'A' records.\nInformation about the EventStoreDB cluster is obtained from the Gossip API. A member of\nthe cluster is then selected by the client according to the \"node preference\" option.\nThe client will then close its connection and connect to the selected node without the\n'round robin' load balancing strategy. If the \"node preference\" is \"leader\",\nand after connecting to a leader, if the leader becomes a follower, the client will\nreconnect to the new leader.\n\n### User info string<a id=\"user-info-string\"></a>\n\nIn both the \"esdb\" and \"esdb+discover\" schemes, the URI may include a user info string.\nIf it exists in the URI, the user info string must be separated from the rest of the URI\nwith the \"@\" character. The user info string must include a username and a password,\nseparated with the \":\" character.\n\n    user-info = username , \":\" , password ;\n\nThe user info is sent by the client in a \"basic auth\" authorization header in each gRPC\ncall to a \"secure\" server. This authorization header is used by the server to authenticate\nthe client. The Python gRPC library does not allow call credentials to be transferred to\n\"insecure\" servers.\n\n### Query string<a id=\"query-string\"></a>\n\nIn both the \"esdb\" and \"esdb+discover\" schemes, the optional query string must be one\nor many field-value arguments, separated from each other with the \"&\" character.\n\n    query-string = field-value, { \"&\", field-value } ;\n\nEach field-value argument must be one of the supported fields, and an\nappropriate value, separated with the \"=\" character.\n\n    field-value = ( \"Tls\", \"=\" , \"true\" | \"false\" )\n                | ( \"TlsVerifyCert\", \"=\" , \"true\" | \"false\" )\n                | ( \"ConnectionName\", \"=\" , string )\n                | ( \"NodePreference\", \"=\" , \"leader\" | \"follower\" | \"readonlyreplica\" | \"random\" )\n                | ( \"DefaultDeadline\", \"=\" , integer )\n                | ( \"GossipTimeout\", \"=\" , integer )\n                | ( \"MaxDiscoverAttempts\", \"=\" , integer )\n                | ( \"DiscoveryInterval\", \"=\" , integer )\n                | ( \"KeepAliveInterval\", \"=\" , integer )\n                | ( \"KeepAliveTimeout\", \"=\" , integer ) ;\n                | ( \"TlsCaFile\", \"=\" , string ) ;\n                | ( \"UserCertFile\", \"=\" , string ) ;\n                | ( \"UserKeyFile\", \"=\" , string ) ;\n\nThe table below describes the query string field-values supported by this client.\n\n| Field               | Value                                                                 | Description                                                                                                                                                       |\n|---------------------|-----------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Tls                 | \"true\", \"false\" (default: \"true\")                                     | If \"true\" the client will create a \"secure\" gRPC channel. If \"false\" the client will create an \"insecure\" gRPC channel. This must match the server configuration. |\n| TlsVerifyCert       | \"true\", \"false\" (default: \"true\")                                     | This value is currently ignored.                                                                                                                                  |\n| ConnectionName      | string (default: auto-generated version-4 UUID)                       | Sent in call metadata for every call, to identify the client to the cluster.                                                                                      |\n| NodePreference      | \"leader\", \"follower\", \"readonlyreplica\", \"random\" (default: \"leader\") | The node state preferred by the client. The client will select a node from the cluster info received from the Gossip API according to this preference.            |\n| DefaultDeadline     | integer (default: `None`)                                             | The default value (in seconds) of the `timeout` argument of client \"write\" methods such as `append_to_stream()`.                                                  |\n| GossipTimeout       | integer (default: 5)                                                  | The default value (in seconds) of the `timeout` argument of gossip read methods, such as `read_gossip()`.                                                         |\n| MaxDiscoverAttempts | integer (default: 10)                                                 | The number of attempts to read gossip when connecting or reconnecting to a cluster member.                                                                        |\n| DiscoveryInterval   | integer (default: 100)                                                | How long to wait (in milliseconds) between gossip retries.                                                                                                        |\n| KeepAliveInterval   | integer (default: `None`)                                             | The value (in milliseconds) of the \"grpc.keepalive_ms\" gRPC channel option.                                                                                       |\n| KeepAliveTimeout    | integer (default: `None`)                                             | The value (in milliseconds) of the \"grpc.keepalive_timeout_ms\" gRPC channel option.                                                                               |\n| TlsCaFile           | string (default: `None`)                                              | Absolute filesystem path to file containing the CA certicate in PEM format. This will be used to verify the server's certificate.                                 |\n| UserCertFile        | string (default: `None`)                                              | Absolute filesystem path to file containing the X.509 user certificate in PEM format.                                                                             |\n| UserKeyFile         | string (default: `None`)                                              | Absolute filesystem path to file containing the X.509 user certificate's private key in PEM format.                                                               |\n\n\nPlease note, the client is insensitive to the case of fields and values. If fields are\nrepeated in the query string, the query string will be parsed without error. However,\nthe connection options used by the client will use the value of the first field. All\nthe other field-values in the query string with the same field name will be ignored.\nFields without values will also be ignored.\n\nIf the client's node preference is \"follower\" and there are no follower\nnodes in the cluster, then the client will raise an exception. Similarly, if the\nclient's node preference is \"readonlyreplica\" and there are no read-only replica\nnodes in the cluster, then the client will also raise an exception.\n\nThe gRPC channel option \"grpc.max_receive_message_length\" is automatically\nconfigured to the value `17 * 1024 * 1024`. This value cannot be configured.\n\n\n### Examples<a id=\"examples\"></a>\n\nHere are some examples of EventStoreDB connection string URIs.\n\nThe following URI will cause the client to make an \"insecure\" connection to\ngRPC target `'localhost:2113'`. Because the client's node preference is \"follower\",\nmethods that can be called on a follower should complete successfully, methods that\nrequire a leader will raise a `NodeIsNotLeader` exception.\n\n    esdb://127.0.0.1:2113?Tls=false&NodePreference=follower\n\nThe following URI will cause the client to make an \"insecure\" connection to\ngRPC target `'localhost:2113'`. Because the client's node preference is \"leader\",\nif this node is not a leader, then a `NodeIsNotLeader` exception will be raised by\nall methods.\n\n    esdb://127.0.0.1:2113?Tls=false&NodePreference=leader\n\nThe following URI will cause the client to make a \"secure\" connection to\ngRPC target `'localhost:2113'` with username `'admin'` and password `'changeit'`\nas the default call credentials when making calls to the EventStoreDB gRPC API.\nBecause the client's node preference is \"leader\", by default, if this node is not\na leader, then a `NodeIsNotLeader` exception will be raised by all methods.\n\n    esdb://admin:changeit@localhost:2113\n\nThe following URI will cause the client to make \"secure\" connections, firstly to\nget cluster info from either `'localhost:2111'`, or `'localhost:2112'`, or `'localhost:2113'`.\nBecause the client's node preference is \"leader\", the client will select the leader\nnode from the cluster info and reconnect to the leader. If the \"leader\" node becomes\na \"follower\" and another node becomes \"leader\", then the client will reconnect to the\nnew leader.\n\n    esdb://admin:changeit@localhost:2111,localhost:2112,localhost:2113?NodePreference=leader\n\n\nThe following URI will cause the client to make \"secure\" connections, firstly to\nget cluster info from either `'localhost:2111'`, or `'localhost:2112'`, or `'localhost:2113'`.\nBecause the client's node preference is \"follower\", the client will select a follower\nnode from the cluster info and reconnect to this follower. Please note, if the \"follower\"\nnode becomes the \"leader\", the client will not reconnect to a follower -- such behavior\nmay be implemented in a future version of the client and server.\n\n    esdb://admin:changeit@localhost:2111,localhost:2112,localhost:2113?NodePreference=follower\n\n\nThe following URI will cause the client to make \"secure\" connections, firstly to get\ncluster info from addresses in DNS 'A' records for `'cluster1.example.com'`, and then\nto connect to a \"leader\" node. The client will use a default timeout\nof 5 seconds when making calls to EventStore API \"write\" methods.\n\n    esdb+discover://admin:changeit@cluster1.example.com?DefaultDeadline=5\n\n\nThe following URI will cause the client to make \"secure\" connections, firstly to get\ncluster info from addresses in DNS 'A' records for `'cluster1.example.com'`, and then\nto connect to a \"leader\" node. It will configure gRPC connections with a \"keep alive\ninterval\" and a \"keep alive timeout\".\n\n    esdb+discover://admin:changeit@cluster1.example.com?KeepAliveInterval=10000&KeepAliveTimeout=10000\n\n\n## Event objects<a id=\"event-objects\"></a>\n\nThis package defines a `NewEvent` class and a `RecordedEvent` class. The\n`NewEvent` class should be used when writing events to the database. The\n`RecordedEvent` class is used when reading events from the database.\n\n### New events<a id=\"new-events\"></a>\n\nThe `NewEvent` class should be used when writing events to an EventStoreDB database.\nYou will need to construct new event objects before calling `append_to_stream()`.\n\nThe `NewEvent` class is a frozen Python dataclass. It has two required constructor\narguments (`type` and `data`) and three optional constructor arguments (`metadata`,\n`content_type` and `id`).\n\nThe required `type` argument is a Python `str`, used to describe the type of\ndomain event that is being recorded.\n\nThe required `data` argument is a Python `bytes` object, used to state the\nserialized data of the domain event that is being recorded.\n\nThe optional `metadata` argument is a Python `bytes` object, used to indicate any\nmetadata of the event that will be recorded. The default value is an empty `bytes`\nobject.\n\nThe optional `content_type` argument is a Python `str`, used to indicate the\nkind of data that is being recorded. The default value is `'application/json'`,\nwhich indicates that the `data` was serialised using JSON. An alternative value\nfor this argument is the more general indication `'application/octet-stream'`.\n\nThe optional `id` argument is a Python `UUID` object, used to specify the unique ID\nof the event that will be recorded. If no value is provided, a new version-4 UUID\nwill be generated.\n\n```python\nnew_event1 = NewEvent(\n    type='OrderCreated',\n    data=b'{\"name\": \"Greg\"}',\n)\nassert new_event1.type == 'OrderCreated'\nassert new_event1.data == b'{\"name\": \"Greg\"}'\nassert new_event1.metadata == b''\nassert new_event1.content_type == 'application/json'\nassert isinstance(new_event1.id, uuid.UUID)\n\nevent_id = uuid.uuid4()\nnew_event2 = NewEvent(\n    type='ImageCreated',\n    data=b'01010101010101',\n    metadata=b'{\"a\": 1}',\n    content_type='application/octet-stream',\n    id=event_id,\n)\nassert new_event2.type == 'ImageCreated'\nassert new_event2.data == b'01010101010101'\nassert new_event2.metadata == b'{\"a\": 1}'\nassert new_event2.content_type == 'application/octet-stream'\nassert new_event2.id == event_id\n```\n\n### Recorded events<a id=\"recorded-events\"></a>\n\nThe `RecordedEvent` class is used when reading events from an EventStoreDB\ndatabase. The client will return event objects of this type from all methods\nthat return recorded events, such as `get_stream()`, `subscribe_to_all()`,\nand `read_subscription_to_all()`. You do not need to construct recorded event objects.\n\nLike `NewEvent`, the `RecordedEvent` class is a frozen Python dataclass. It has\nall the attributes that `NewEvent` has (`type`, `data`, `metadata`, `content_type`, `id`)\nthat follow from an event having been recorded, and some additional attributes that follow\nfrom the recording of an event (`stream_name`, `stream_position`, `commit_position`,\n`recorded_at`). It also has a `link` attribute, which is `None` unless the recorded\nevent is a \"link event\" that has been \"resolved\" to the linked event. And it has a\n`retry_count` which has an integer value when receiving recorded events from persistence\nsubscriptions, otherwise the value of `retry_count` is `None`.\n\nThe `type` attribute is a Python `str`, used to indicate the type of an event\nthat was recorded.\n\nThe `data` attribute is a Python `bytes` object, used to indicate the data of an\nevent that was recorded.\n\nThe `metadata` attribute is a Python `bytes` object, used to indicate the metadata of\nan event that was recorded.\n\nThe `content_type` attribute is a Python `str`, used to indicate the type of\ndata that was recorded for an event. It is usually `'application/json'`, indicating\nthat the data can be parsed as JSON. Alternatively, it is `'application/octet-stream'`.\n\nThe `id` attribute is a Python `UUID` object, used to indicate the unique ID of an\nevent that was recorded.\n\nThe `stream_name` attribute is a Python `str`, used to indicate the name of a\nstream in which an event was recorded.\n\nThe `stream_position` attribute is a Python `int`, used to indicate the position in a\nstream at which an event was recorded.\n\nIn EventStoreDB, a \"stream position\" is an integer representing the position of a\nrecorded event in a stream. Each recorded event is recorded at a position in a stream.\nEach stream position is occupied by only one recorded event. New events are recorded at the\nnext unoccupied position. All sequences of stream positions are zero-based and gapless.\n\nThe `commit_position` attribute is a Python `int`, used to indicate the position in the\ndatabase at which an event was recorded.\n\nIn EventStoreDB, a \"commit position\" is an integer representing the position of a\nrecorded event in the database. Each recorded event is recorded at a position in the\ndatabase. Each commit position is occupied by only one recorded event. Commit positions\nare zero-based and increase monotonically as new events are recorded. But, unlike stream\npositions, the sequence of successive commit positions is not gapless. Indeed, there are\nusually large differences between the commit positions of successively recorded events.\n\nPlease note, in EventStoreDB 21.10, the `commit_position` of all `RecordedEvent` objects\nobtained from `read_stream()` is `None`, whereas those obtained from `read_all()` have\nthe actual commit position of the recorded event. This was changed in version 22.10, so\nthat event objects obtained from both `get_stream()` and `read_all()` have the actual\ncommit position. The `commit_position` attribute of the `RecordedEvent` class is\nannotated with the type `Optional[int]` for this reason only.\n\nThe `recorded_at` attribute is a Python `datetime`, used to indicate when an event was\nrecorded by the database.\n\nThe `link` attribute is an optional `RecordedEvent` that carries information about\na \"link event\" that has been \"resolved\" to the linked event. This allows access to\nthe link event attributes when link events have been resolved, for example access\nto the correct event ID to be used when acknowledging or negatively acknowledging\nlink events. Link events are \"resolved\" when the `resolve_links` argument is `True`\nand when replaying parked events (negatively acknowledging an event received from\na persistent subscription with the `'park'` action will create a link event, and\nwhen parked event are replayed they are received as resolved events). The\n`ack_id` property helps with obtaining the correct event ID to use when acknowledging\nor negatively acknowledging events received from persistent subscriptions.\n\nThe `retry_count` is a Python `int`, used to indicate the number of times a persistent\nsubscription has retried sending the event to a consumer.\n\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\n\n@dataclass(frozen=True)\nclass RecordedEvent:\n    \"\"\"\n    Encapsulates event data that has been recorded in EventStoreDB.\n    \"\"\"\n\n    type: str\n    data: bytes\n    metadata: bytes\n    content_type: str\n    id: UUID\n    stream_name: str\n    stream_position: int\n    commit_position: Optional[int]\n    recorded_at: Optional[datetime] = None\n    link: Optional[\"RecordedEvent\"] = None\n    retry_count: Optional[int] = None\n\n    @property\n    def ack_id(self) -> UUID:\n        if self.link is not None:\n            return self.link.id\n        else:\n            return self.id\n\n    @property\n    def is_system_event(self) -> bool:\n        return self.type.startswith(\"$\")\n\n    @property\n    def is_link_event(self) -> bool:\n        return self.type == \"$>\"\n\n    @property\n    def is_resolved_event(self) -> bool:\n        return self.link is not None\n\n    @property\n    def is_checkpoint(self) -> bool:\n        return False\n```\n\nThe property `ack_id` can be used to obtain the correct event ID to `ack()` or `nack()`\nevents received when reading persistent subscriptions. The returned value is either the\nvalue of the `id` attribute of the `link` attribute, if `link` is not `None`, otherwise\nit is the value of the `id` attribute.\n\nThe property `is_system_event` indicates whether the event is a \"system event\". System\nevents have a `type` value that starts with `'$'`.\n\nThe property `is_link_event` indicates whether the event is a \"link event\". Link\nevents have a `type` value of `'$>'`.\n\nThe property `is_resolve_event` indicates whether the event has been resolved from a\n\"link event\". The returned value is `True` if `link` is not `None`.\n\nThe property `is_checkpoint` is `False`. This can be used to identify `Checkpoint`\ninstances returned when receiving events from `include_checkpoints=True`.\n\n\n\n## Streams<a id=\"streams\"></a>\n\nIn EventStoreDB, a \"stream\" is a sequence of recorded events that all have\nthe same \"stream name\". There will normally be many streams in a database,\neach with many recorded events. Each recorded event has a position in its stream\n(the \"stream position\"), and a position in the database (the \"commit position\").\nStream positions are zero-based and gapless. Commit positions are also zero-based,\nbut are not gapless.\n\nThe methods `append_to_stream()`, `get_stream()` and `read_all()` can\nbe used to read and record in the database.\n\n### Append events<a id=\"append-events\"></a>\n\n*requires leader*\n\nThe `append_to_stream()` method can be used atomically to record a sequence of new events.\nIf the operation is successful, it returns the commit position of the last event in the\nsequence that has been recorded.\n\nThis method has three required arguments, `stream_name`, `current_version`\nand `events`.\n\nThe required `stream_name` argument is a Python `str` that uniquely identifies a\nstream to which a sequence of events will be appended.\n\nThe required `current_version` argument is expected to be either a Python `int`\nthat indicates the stream position of the last recorded event in the stream, or\n`StreamState.NO_STREAM` if the stream does not yet exist or has been deleted. The\nstream positions are zero-based and gapless, so that if a stream has two events, the\n`current_version` should be 1. If an incorrect value is given, this method will raise a\n`WrongCurrentVersion` exception. This behavior is designed to provide concurrency\ncontrol when recording new events. The correct value of `current_version` for any stream\ncan be obtained by calling `get_current_version()`. However, the typical approach is to\nreconstruct an aggregate from the recorded events, so that the version of the aggregate\nis the stream position of the last recorded event, then have the aggregate generate new\nevents, and then use the current version of the aggregate as the value of the\n`current_version` argument when appending the new aggregate events. This ensures\nthe consistency of the recorded aggregate events, because operations that generate\nnew aggregate events can be retried with a freshly reconstructed aggregate if\na `WrongCurrentVersion` exception is encountered when recording new events. This\ncontrolling behavior can be entirely disabled by setting the value of the `current_version`\nargument to the constant `StreamState.ANY`. More selectively, this behaviour can be\ndisabled for existing streams by setting the value of the `current_version`\nargument to the constant `StreamState.EXISTS`.\n\nThe required `events` argument is expected to be a sequence of new event objects. The\n`NewEvent` class should be used to construct new event objects. The `append_to_stream()`\noperation is atomic, so that either all or none of the new events will be recorded. It\nis not possible with EventStoreDB atomically to record new events in more than one stream.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, a new event, `event1`, is appended to a new stream. The stream\ndoes not yet exist, so `current_version` is `StreamState.NO_STREAM`.\n\n```python\n# Construct a new event object.\nevent1 = NewEvent(type='OrderCreated', data=b'{}')\n\n# Define a new stream name.\nstream_name1 = str(uuid.uuid4())\n\n# Append the new events to the new stream.\ncommit_position1 = client.append_to_stream(\n    stream_name=stream_name1,\n    current_version=StreamState.NO_STREAM,\n    events=[event1],\n)\n```\n\nIn the example below, two subsequent events are appended to an existing\nstream. The stream has one recorded event, so `current_version` is `0`.\n\n```python\nevent2 = NewEvent(type='OrderUpdated', data=b'{}')\nevent3 = NewEvent(type='OrderDeleted', data=b'{}')\n\ncommit_position2 = client.append_to_stream(\n    stream_name=stream_name1,\n    current_version=0,\n    events=[event2, event3],\n)\n```\n\nThe returned values, `commit_position1` and `commit_position2`, are the\ncommit positions in the database of the last events in the recorded sequences.\nThat is, `commit_position1` is the commit position of `event1` and\n`commit_position2` is the commit position of `event3`.\n\nCommit positions that are returned in this way can be used by a user interface to poll\na downstream component until it has processed all the newly recorded events. For example,\nconsider a user interface command that results in the recording of new events, and an\neventually consistent materialized view in a downstream component that is updated from\nthese events. If the new events have not yet been processed, the view might be stale,\nor out-of-date. Instead of displaying a stale view, the user interface can poll the\ndownstream component until it has processed the newly recorded events, and then display\nan up-to-date view to the user.\n\n\n### Idempotent append operations<a id=\"idempotent-append-operations\"></a>\n\nThe `append_to_stream()` method is \"idempotent\" with respect to the `id` value of a\n`NewEvent` object. That is to say, if `append_to_stream()` is called with events\nwhose `id` values are equal to those already recorded in the stream, then the\nmethod call will successfully return, with the commit position of the last new event,\nwithout making any changes to the database.\n\nThis is because sometimes it may happen, when calling `append_to_stream()`, that the new\nevents are successfully recorded, but somehow something bad happens before the method call\ncan return successfully to the caller. In this case, we cannot be sure that the events have\nin fact been recorded, and so we may wish to retry.\n\nIf the events were in fact successfully recorded, it is convenient for the retried method call\nto return successfully, and without either raising an exception (when `current_version`\nis either `StreamState.NO_STREAM` an integer value) or creating further event records\n(when `current_version` is `StreamState.ANY` or `StreamState.EXISTS`), as it would\nif the `append_to_stream()` method were not idempotent.\n\nIf the method call initially failed and the new events were not in fact recorded, it\nmakes good sense, when the method call is retried, that the new events are recorded\nand that the method call returns successfully. If the concurrency controls have not been disabled,\nthat is if the `current version` is either `StreamState.NO_STREAM` or an integer value, and\nif a `WrongCurrentVersion` exception is raised when retrying the method call, then we can assume\nboth that the initial method call did not in fact successfully record the events, and also\nthat subsequent events have in the meantime been recorded by somebody else. In this case,\nan application command which generated the new events may need to be executed again. And\nthe user of the application may need to be given an opportunity to decide if they still wish to\nproceed with their original intention, by displaying a suitable error with an up-to-date view of\nthe recorded state. In the case where concurrency controls have been disabled, by using `StreamState.ANY` or\n`StreamState.EXISTS` as the value of `current_version`, retrying a method call that failed to\nreturn successfully will, more simply, just attempt to ensure the new events are recorded, regardless\nof their resulting stream positions. In either case, when the method call does return successfully, we\ncan be sure the events have been recorded.\n\nThe example below shows the `append_to_stream()` method being called again with events\n`event2` and `event3`, and with `current_version=0`. We can see that repeating the call\nto `append_to_stream()` returns successfully without raising a `WrongCurrentVersion`\nexception, as it would if the `append_to_stream()` operation were not idempotent.\n\n```python\n# Retry appending event3.\ncommit_position_retry = client.append_to_stream(\n    stream_name=stream_name1,\n    current_version=0,\n    events=[event2, event3],\n)\n```\n\nWe can see that the same commit position is returned as above.\n\n```python\nassert commit_position_retry == commit_position2\n```\n\nThe example below shows the `append_to_stream()` method being called again with events\n`event2` and `event3`, with and `current_version=StreamState.ANY`.\n\n```python\n# Retry appending event3.\ncommit_position_retry = client.append_to_stream(\n    stream_name=stream_name1,\n    current_version=0,\n    events=[event2, event3],\n)\n```\n\nWe can see that the same commit position is returned as above.\n\n```python\nassert commit_position_retry == commit_position2\n```\n\nBy calling `get_stream()`, we can also see the stream has been unchanged.\nThat is, there are still only three events in the stream.\n\n```python\nevents = client.get_stream(\n    stream_name=stream_name1\n)\n\nassert len(events) == 3\n```\n\nThis idempotent behaviour depends on the `id` attribute of the `NewEvent` class.\nThis attribute is, by default, assigned a new and unique version-4 UUID when an\ninstance of `NewEvent` is constructed. To set the `id` value of a `NewEvent`,\nthe optional `id` constructor argument can be used when constructing `NewEvent` objects.\n\n\n### Read stream events<a id=\"read-stream-events\"></a>\n\nThe `read_stream()` method can be used to get events that have been appended\nto a stream. This method returns a \"read response\" object.\n\nA \"read response\" object is a Python iterator. Recorded events can be\nobtained by iterating over the \"read response\" object. Recorded events are\nstreamed from the server to the client as the iteration proceeds. The iteration\nwill automatically stop when there are no more recorded events to be returned.\nThe streaming of events, and hence the iterator, can also be stopped by calling\nthe `stop()` method on the \"read response\" object.\n\nThe `get_stream()` method can be used to get events that have been appended\nto a stream. This method returns a Python `tuple` of recorded event objects.\nThe recorded event objects are instances of the `RecordedEvent` class. It\ncalls `read_stream()` and passes the \"read response\" iterator into a Python\n`tuple`, so that the streaming will complete before the method returns.\n\nThe `read_stream()` and `get_stream()` methods have one required argument, `stream_name`.\n\nThe required `stream_name` argument is a Python `str` that uniquely identifies a\nstream from which recorded events will be returned.\n\nThe `read_stream()` and `get_stream()` methods also have six optional arguments,\n`stream_position`, `backwards`, `resolve_links`, `limit`, `timeout`, and `credentials`.\n\nThe optional `stream_position` argument is a Python `int` that can be used to\nindicate the position in the stream from which to start reading. The default value\nof `stream_position` is `None`. When reading a stream from a specific position in the\nstream, the recorded event at that position will be included, both when reading\nforwards from that position, and when reading backwards.\n\nThe optional `backwards` argument is a Python `bool`. The default value of `backwards`\nis `False`, which means the stream will be read forwards, so that events are returned\nin the order they were recorded. If `backwards` is `True`, the events are returned in\nreverse order.\n\nIf `backwards` is `False` and `stream_position` is `None`, the stream's events will be\nreturned in the order they were recorded, starting from the first recorded event. If\n`backwards` is `True` and `stream_position` is `None`, the stream's events will be\nreturned in reverse order, starting from the last recorded event.\n\nThe optional `resolve_links` argument is a Python `bool`. The default value of `resolve_links`\nis `False`, which means any event links will not be resolved, so that the events that are\nreturned may represent event links. If `resolve_links` is `True`, any event links will\nbe resolved, so that the linked events will be returned instead of the event links.\n\nThe optional `limit` argument is a Python `int` which restricts the number of events\nthat will be returned. The default value of `limit` is `sys.maxint`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to override call credentials derived\nfrom the connection string URI. A suitable value for this argument can be constructed\nby calling the client method `construct_call_credentials()`.\n\nThe example below shows the default behavior, which is to return all the recorded\nevents of a stream forwards from the first recorded events to the last.\n\n```python\nevents = client.get_stream(\n    stream_name=stream_name1\n)\n\nassert len(events) == 3\nassert events[0] == event1\nassert events[1] == event2\nassert events[2] == event3\n```\n\nThe example below shows how to use the `stream_position` argument to read a stream\nfrom a specific stream position to the end of the stream. Stream positions are\nzero-based, and so `stream_position=1` corresponds to the second event that was\nrecorded in the stream, in this case `event2`.\n\n```python\nevents = client.get_stream(\n    stream_name=stream_name1,\n    stream_position=1,\n)\n\nassert len(events) == 2\nassert events[0] == event2\nassert events[1] == event3\n```\n\nThe example below shows how to use the `backwards` argument to read a stream backwards.\n\n```python\nevents = client.get_stream(\n    stream_name=stream_name1,\n    backwards=True,\n)\n\nassert len(events) == 3\nassert events[0] == event3\nassert events[1] == event2\nassert events[2] == event1\n```\n\nThe example below shows how to use the `limit` argument to read a limited number of\nevents.\n\n```python\nevents = client.get_stream(\n    stream_name=stream_name1,\n    limit=2,\n)\n\nassert len(events) == 2\nassert events[0] == event1\nassert events[1] == event2\n```\n\nThe `read_stream()` and `get_stream()` methods will raise a `NotFound` exception if the\nnamed stream has never existed or has been deleted.\n\n```python\nfrom esdbclient.exceptions import NotFound\n\n\ntry:\n    client.get_stream('does-not-exist')\nexcept NotFound:\n    pass  # The stream does not exist.\nelse:\n    raise Exception(\"Shouldn't get here\")\n```\n\nPlease note, the `get_stream()` method is decorated with the `@autoreconnect` and\n`@retrygrpc` decorators, whilst the `read_stream()` method is not. This means that\nall errors due to connection issues will be caught by the retry and reconnect decorators\nwhen calling the `get_stream()` method, but not when calling `read_stream()`. The\n`read_stream()` method has no such decorators because the streaming only starts\nwhen iterating over the \"read response\" starts, which means that the method returns\nbefore the streaming starts, and so there is no chance for any decorators to catch\nany connection issues.\n\nFor the same reason, `read_stream()` will not raise a `NotFound` exception when\nthe stream does not exist, until iterating over the \"read response\" object begins.\n\nIf you are reading a very large stream, then you might prefer to call `read_stream()`,\nand begin iterating through the recorded events whilst they are being streamed from\nthe server, rather than both waiting and having them all accumulate in memory.\n\n### Get current version<a id=\"get-current-version\"></a>\n\nThe `get_current_version()` method is a convenience method that essentially calls\n`get_stream()` with `backwards=True` and `limit=1`. This method returns\nthe value of the `stream_position` attribute of the last recorded event in a\nstream. If a stream does not exist, the returned value is `StreamState.NO_STREAM`.\nThe returned value is the correct value of `current_version` when appending events\nto a stream, and when deleting or tombstoning a stream.\n\nThis method has one required argument, `stream_name`.\n\nThe required `stream_name` argument is a Python `str` that uniquely identifies a\nstream from which a stream position will be returned.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, the last stream position of `stream_name1` is obtained.\nSince three events have been appended to `stream_name1`, and because positions\nin a stream are zero-based and gapless, so the current version is `2`.\n\n```python\ncurrent_version = client.get_current_version(\n    stream_name=stream_name1\n)\n\nassert current_version == 2\n```\n\nIf a stream has never existed or has been deleted, the returned value is\n`StreamState.NO_STREAM`, which is the correct value of the `current_version`\nargument both when appending the first event of a new stream, and also when\nappending events to a stream that has been deleted.\n\n```python\ncurrent_version = client.get_current_version(\n    stream_name='does-not-exist'\n)\n\nassert current_version is StreamState.NO_STREAM\n```\n\n### How to implement snapshotting with EventStoreDB<a id=\"how-to-implement-snapshotting-with-eventstoredb\"></a>\n\nSnapshots can improve the performance of aggregates that would otherwise be\nreconstructed from very long streams. However, it is generally recommended to design\naggregates to have a finite lifecycle, and so to have relatively short streams,\nthereby avoiding the need for snapshotting. This \"how to\" section is intended merely\nto show how snapshotting of aggregates can be implemented with EventStoreDB using\nthis Python client.\n\nEvent-sourced aggregates are typically reconstructed from recorded events by calling\na mutator function for each recorded event, evolving from an initial state\n`None` to the current state of the aggregate. The function `get_aggregate()` shows\nhow this can be done. The aggregate ID is used as a stream name. The exception\n`AggregateNotFound` is raised if the aggregate stream is not found.\n\n```python\nclass AggregateNotFound(Exception):\n    \"\"\"Raised when an aggregate is not found.\"\"\"\n\n\ndef get_aggregate(aggregate_id, mutator_func):\n    stream_name = aggregate_id\n\n    # Get recorded events.\n    try:\n        events = client.get_stream(\n            stream_name=stream_name,\n            stream_position=None\n        )\n    except NotFound as e:\n        raise AggregateNotFound(aggregate_id) from e\n    else:\n        # Reconstruct aggregate from recorded events.\n        aggregate = None\n        for event in events:\n            aggregate = mutator_func(aggregate, event)\n        return aggregate\n```\n\nSnapshotting of aggregates can be implemented by recording the current state of\nan aggregate as a new event.\n\nIf an aggregate object has a version number that corresponds to the stream position of\nthe last event that was used to reconstruct the aggregate, and this version number\nis recorded in the snapshot metadata, then any events that are recorded after the\nsnapshot can be selected using this version number. The aggregate can then be\nreconstructed from the last snapshot and any subsequent events, without having\nto replay the entire history.\n\nWe will use a separate stream for an aggregate's snapshots that is named after the\nstream used for recording its events. The name of the snapshot stream will be\nconstructed by prefixing the aggregate's stream name with `'snapshot-$'`.\n\n```python\nSNAPSHOT_STREAM_NAME_PREFIX = 'snapshot-$'\n\ndef make_snapshot_stream_name(stream_name):\n    return f'{SNAPSHOT_STREAM_NAME_PREFIX}{stream_name}'\n\n\ndef remove_snapshot_stream_prefix(snapshot_stream_name):\n    assert snapshot_stream_name.startswith(SNAPSHOT_STREAM_NAME_PREFIX)\n    return snapshot_stream_name[len(SNAPSHOT_STREAM_NAME_PREFIX):]\n```\n\nNow, let's redefine the `get_aggregate()` function, so that it looks for a snapshot event,\nthen selects subsequent aggregate events, and then calls a mutator function for each\nrecorded event.\n\nNotice that the aggregate events are read from a stream for serialized aggregate\nevents, whilst the snapshot is read from a separate stream for serialized aggregate\nsnapshots. We will use JSON to serialize and deserialize event data.\n\n\n```python\nimport json\n\n\ndef get_aggregate(aggregate_id, mutator_func):\n    stream_name = aggregate_id\n    recorded_events = []\n\n    # Look for a snapshot.\n    try:\n        snapshots = client.get_stream(\n            stream_name=make_snapshot_stream_name(stream_name),\n            backwards=True,\n            limit=1\n        )\n    except NotFound:\n        stream_position = None\n    else:\n        assert len(snapshots) == 1\n        snapshot = snapshots[0]\n        stream_position = deserialize(snapshot.metadata)['version'] + 1\n        recorded_events.append(snapshot)\n\n    # Get subsequent events.\n    try:\n        events = client.get_stream(\n            stream_name=stream_name,\n            stream_position=stream_position\n        )\n    except NotFound as e:\n        raise AggregateNotFound(aggregate_id) from e\n    else:\n        recorded_events += events\n\n    # Reconstruct aggregate from recorded events.\n    aggregate = None\n    for event in recorded_events:\n        aggregate = mutator_func(aggregate, event)\n\n    return aggregate\n\n\ndef serialize(d):\n    return json.dumps(d).encode('utf8')\n\n\ndef deserialize(s):\n    return json.loads(s.decode('utf8'))\n```\n\nTo show how `get_aggregate()` can be used, let's define a `Dog` aggregate class, with\nattributes `name` and `tricks`. The attributes `id` and `version` will indicate an\naggregate object's ID and version number. The attribute `is_from_snapshot` is added\nhere merely to demonstrate below when an aggregate object has been reconstructed using\na snapshot.\n\n```python\nfrom dataclasses import dataclass\n\n\n@dataclass(frozen=True)\nclass Aggregate:\n    id: str\n    version: int\n    is_from_snapshot: bool\n\n\n@dataclass(frozen=True)\nclass Dog(Aggregate):\n    name: str\n    tricks: list\n```\n\nLet's also define a mutator function `mutate_dog()` that evolves the state of a\n`Dog` aggregate given various different types of events, `'DogRegistered'`,\n`'DogLearnedTrick'`, and `'Snapshot'`.\n\n```python\ndef mutate_dog(dog, event):\n    data = deserialize(event.data)\n    if event.type == 'DogRegistered':\n        return Dog(\n            id=event.stream_name,\n            version=event.stream_position,\n            is_from_snapshot=False,\n            name=data['name'],\n            tricks=[],\n        )\n    elif event.type == 'DogLearnedTrick':\n        assert event.stream_position == dog.version + 1\n        assert event.stream_name == dog.id, (event.stream_name, dog.id)\n        return Dog(\n            id=dog.id,\n            version=event.stream_position,\n            is_from_snapshot=dog.is_from_snapshot,\n            name=dog.name,\n            tricks=dog.tricks + [data['trick']],\n        )\n    elif event.type == 'Snapshot':\n        return Dog(\n            id=remove_snapshot_stream_prefix(event.stream_name),\n            version=deserialize(event.metadata)['version'],\n            is_from_snapshot=True,\n            name=data['name'],\n            tricks=data['tricks'],\n        )\n    else:\n        raise Exception(f\"Unknown event type: {event.type}\")\n```\n\nFor convenience, let's also define a `get_dog()` function that calls `get_aggregate()`\nwith the `mutate_dog()` function as the value of its `mutator_func` argument.\n\n```python\ndef get_dog(dog_id):\n    return get_aggregate(\n        aggregate_id=dog_id,\n        mutator_func=mutate_dog,\n    )\n```\n\nWe can also define some \"command\" functions that append new events to the\ndatabase. The `register_dog()` function appends a `DogRegistered` event. The\n`record_trick_learned()` appends a `DogLearnedTrick` event. The function\n`snapshot_dog()` appends a `Snapshot` event. Notice that the\n`record_trick_learned()` and `snapshot_dog()` functions use `get_dog()`.\n\nNotice also that the `DogRegistered` and `DogLearnedTrick` events are appended to a\nstream for aggregate events, whilst the `Snapshot` event is appended to a separate\nstream for aggregate snapshots.\n\n```python\ndef register_dog(name):\n    dog_id = str(uuid.uuid4())\n    event = NewEvent(\n        type='DogRegistered',\n        data=serialize({'name': name}),\n    )\n    client.append_to_stream(\n        stream_name=dog_id,\n        current_version=StreamState.NO_STREAM,\n        events=event,\n    )\n    return dog_id\n\n\ndef record_trick_learned(dog_id, trick):\n    dog = get_dog(dog_id)\n    event = NewEvent(\n        type='DogLearnedTrick',\n        data=serialize({'trick': trick}),\n    )\n    client.append_to_stream(\n        stream_name=dog_id,\n        current_version=dog.version,\n        events=event,\n    )\n\n\ndef snapshot_dog(dog_id):\n    dog = get_dog(dog_id)\n    event = NewEvent(\n        type='Snapshot',\n        data=serialize({'name': dog.name, 'tricks': dog.tricks}),\n        metadata=serialize({'version': dog.version}),\n    )\n    client.append_to_stream(\n        stream_name=make_snapshot_stream_name(dog_id),\n        current_version=StreamState.ANY,\n        events=event,\n    )\n```\n\nWe can call `register_dog()` to register a new dog.\n\n```python\n# Register a new dog.\ndog_id = register_dog('Fido')\n\ndog = get_dog(dog_id)\nassert dog.name == 'Fido'\nassert dog.tricks == []\nassert dog.version == 0\nassert dog.is_from_snapshot is False\n\n```\n\nWe can call `record_trick_learned()` to record that some tricks have been learned.\n\n```python\n\n# Record that 'Fido' learned a new trick.\nrecord_trick_learned(dog_id, trick='roll over')\n\ndog = get_dog(dog_id)\nassert dog.name == 'Fido'\nassert dog.tricks == ['roll over']\nassert dog.version == 1\nassert dog.is_from_snapshot is False\n\n\n# Record that 'Fido' learned another new trick.\nrecord_trick_learned(dog_id, trick='fetch ball')\n\ndog = get_dog(dog_id)\nassert dog.name == 'Fido'\nassert dog.tricks == ['roll over', 'fetch ball']\nassert dog.version == 2\nassert dog.is_from_snapshot is False\n```\n\nWe can call `snapshot_dog()` to record a snapshot of the current state of the `Dog`\naggregate. After we call `snapshot_dog()`, the `get_dog()` function will return a `Dog`\nobject that has been constructed using the `Snapshot` event.\n\n```python\n# Snapshot 'Fido'.\nsnapshot_dog(dog_id)\n\ndog = get_dog(dog_id)\nassert dog.name == 'Fido'\nassert dog.tricks == ['roll over', 'fetch ball']\nassert dog.version == 2\nassert dog.is_from_snapshot is True\n```\n\nWe can continue to evolve the state of the `Dog` aggregate, using\nthe snapshot both during the call to `record_trick_learned()` and\nwhen calling `get_dog()` directly.\n\n```python\nrecord_trick_learned(dog_id, trick='sit')\n\ndog = get_dog(dog_id)\nassert dog.name == 'Fido'\nassert dog.tricks == ['roll over', 'fetch ball', 'sit']\nassert dog.version == 3\nassert dog.is_from_snapshot is True\n```\n\nWe can see from the `is_from_snapshot` attribute that the `Dog` object was indeed\nreconstructed from the snapshot.\n\nSnapshots can be created at fixed version number intervals, fixed time\nperiods, after a particular type of event, immediately after events are\nappended, or as a background process.\n\n\n### Read all events<a id=\"read-all-events\"></a>\n\nThe `read_all()` method can be used to get all recorded events\nin the database in the order they were recorded. This method returns\na \"read response\" object, just like `read_stream()`.\n\nA \"read response\" is an iterator, and not a sequence. Recorded events can be\nobtained by iterating over the \"read response\" object. Recorded events are\nstreamed from the server to the client as the iteration proceeds. The iteration\nwill automatically stop when there are no more recorded events to be returned.\nThe streaming of events, and hence the iterator, can also be stopped by calling\nthe `stop()` method on the \"read response\" object. The recorded event objects\nare instances of the `RecordedEvent` class.\n\nThis method has nine optional arguments, `commit_position`, `backwards`, `resolve_links`,\n`filter_exclude`, `filter_include`, `filter_by_stream_name`, `limit`, `timeout`,\nand `credentials`.\n\nThe optional `commit_position` argument is a Python `int` that can be used to\nspecify a commit position from which to start reading. The default value of\n`commit_position` is `None`. Please note, if a commit position is specified,\nit must be an actually existing commit position in the database. When reading\nforwards, the event at the commit position may be included, depending upon the\nfilter. When reading backwards, the event at the commit position will not be\nincluded.\n\nThe optional `backwards` argument is a Python `bool`. The default of `backwards` is\n`False`, which means events are returned in the order they were recorded, If\n`backwards` is `True`, then events are returned in reverse order.\n\nIf `backwards` is `False` and `commit_position` is `None`, the database's events will\nbe returned in the order they were recorded, starting from the first recorded event.\nThis is the default behavior of `read_all()`. If `backwards` is `True` and\n`commit_position` is `None`, the database's events will be returned in reverse order,\nstarting from the last recorded event.\n\nThe optional `resolve_links` argument is a Python `bool`. The default value of `resolve_links`\nis `False`, which means any event links will not be resolved, so that the events that are\nreturned may represent event links. If `resolve_links` is `True`, any event links will\nbe resolved, so that the linked events will be returned instead of the event links.\n\nThe optional `filter_exclude` argument is a sequence of regular expressions that\nspecifies which recorded events should be returned. This argument is ignored\nif `filter_include` is set to a non-empty sequence. The default value of this\nargument matches the event types of EventStoreDB \"system events\", so that system\nevents will not normally be included. See the Notes section below for more\ninformation about filter expressions.\n\nThe optional `filter_include` argument is a sequence of regular expressions\nthat specifies which recorded events should be returned. By default, this\nargument is an empty tuple. If this argument is set to a non-empty sequence,\nthe `filter_exclude` argument is ignored.\n\nThe optional `filter_by_stream_name` argument is a Python `bool` that indicates\nwhether the filtering will apply to event types or stream names. By default, this\nvalue is `False` and so the filtering will apply to the event type strings of\nrecorded events.\n\nThe optional `limit` argument is an integer which restricts the number of events that\nwill be returned. The default value is `sys.maxint`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThe filtering of events is done on the EventStoreDB server. The\n`limit` argument is applied on the server after filtering.\n\nThe example below shows how to get all the events we have recorded in the database\nso far, in the order they were recorded. We can see the three events of `stream_name1`\n(`event1`, `event2` and `event3`) are included, along with others.\n\n```python\n# Read all events (creates a streaming gRPC call).\nread_response = client.read_all()\n\n# Convert the iterator into a sequence of recorded events.\nevents = tuple(read_response)\nassert len(events) > 3  # more than three\n\n# Convert the sequence of recorded events into a set of event IDs.\nevent_ids = set(e.id for e in events)\nassert event1.id in event_ids\nassert event2.id in event_ids\nassert event3.id in event_ids\n```\n\nThe example below shows how to read all recorded events in the database from\na particular commit position, in this case `commit_position1`. When reading\nforwards from a specific commit position, the event at the specified position\nwill be included. The value of `commit_position1` is the position we obtained\nwhen appending `event1`. And so `event1` is the first recorded event we shall\nreceive, `event2` is the second, and `event3` is the third.\n\n```python\n# Read all events forwards from a commit position.\nread_response = client.read_all(\n    commit_position=commit_position1\n)\n\n# Step through the \"read response\" iterator.\nassert next(read_response) == event1\nassert next(read_response) == event2\nassert next(read_response) == event3\n\n# Stop the iterator.\nread_response.stop()\n```\n\nThe example below shows how to read all events recorded in the database in reverse\norder. We can see that the first events we receive are the last events that were\nrecorded: the events of the `Dog` aggregate from the section about snapshotting\nand the snapshot.\n\n```python\n# Read all events backwards from the end.\nread_response = client.read_all(\n    backwards=True\n)\n\n# Step through the \"read response\" iterator.\nassert next(read_response).type == \"DogLearnedTrick\"\nassert next(read_response).type == \"Snapshot\"\nassert next(read_response).type == \"DogLearnedTrick\"\nassert next(read_response).type == \"DogLearnedTrick\"\nassert next(read_response).type == \"DogRegistered\"\n\n# Stop the iterator.\nread_response.stop()\n```\n\nThe example below shows how to read a limited number of events\nforwards from a specific commit position.\n\n```python\nevents = tuple(\n    client.read_all(\n        commit_position=commit_position1,\n        limit=1,\n    )\n)\n\nassert len(events) == 1\nassert events[0] == event1\n```\n\nThe example below shows how to read a limited number of the recorded events\nin the database backwards from the end. In this case, the limit is 1, and\nso we receive the last recorded event.\n\n```python\nevents = tuple(\n    client.read_all(\n        backwards=True,\n        limit=1,\n    )\n)\n\nassert len(events) == 1\n\nassert events[0].type == 'DogLearnedTrick'\nassert deserialize(events[0].data)['trick'] == 'sit'\n```\n\nPlease note, like the `read_stream()` method, the `read_all()` method\nis not decorated with retry and reconnect decorators, because the streaming of recorded\nevents from the server only starts when iterating over the \"read response\" starts, which\nmeans that the method returns before the streaming starts, and so there is no chance for\nany decorators to catch any connection issues.\n\n### Get commit position<a id=\"get-commit-position\"></a>\n\nThe `get_commit_position()` method can be used to get the commit position of the\nlast recorded event in the database. It simply calls `read_all()` with\n`backwards=True` and `limit=1`, and returns the value of the `commit_position`\nattribute of the last recorded event.\n\n```python\ncommit_position = client.get_commit_position()\n```\n\nThis method has five optional arguments, `filter_exclude`, `filter_include`,\n`filter_by_stream_name`, `timeout` and `credentials`. These values are passed to\n`read_all()`.\n\nThe optional `filter_exclude`, `filter_include` and `filter_by_stream_name` arguments\nwork in the same way as they do in the `read_all()` method.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to override call credentials\nderived from the connection string URI.\n\nThis method might be used to measure progress of a downstream component\nthat is processing all recorded events, by comparing the current commit\nposition with the recorded commit position of the last successfully processed\nevent in a downstream component. In this case, the value of the `filter_exclude`,\n`filter_include` and `filter_by_stream_name` arguments should equal those used\nby the downstream component to obtain recorded events.\n\n\n### Get stream metadata<a id=\"get-stream-metadata\"></a>\n\nThe `get_stream_metadata()` method returns the metadata for a stream, along\nwith the version of the stream metadata.\n\nThis method has one required argument, `stream_name`, which is a Python `str` that\nuniquely identifies a stream for which a stream metadata will be obtained.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, metadata for `stream_name1` is obtained.\n\n```python\nmetadata, metadata_version = client.get_stream_metadata(stream_name=stream_name1)\n```\n\nThe returned `metadata` value is a Python `dict`. The returned `metadata_version`\nvalue is either an `int` if the stream exists, or `StreamState.NO_STREAM` if the stream\ndoes not exist and no metadata has been set. These values can be used as the arguments\nof `set_stream_metadata()`.\n\n### Set stream metadata<a id=\"set-stream-metadata\"></a>\n\n*requires leader*\n\nThe method `set_stream_metadata()` sets metadata for a stream. Stream metadata\ncan be set before appending events to a stream.\n\nThis method has one required argument, `stream_name`, which is a Python `str` that\nuniquely identifies a stream for which a stream metadata will be set.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, metadata for `stream_name1` is set.\n\n\n```python\nmetadata[\"foo\"] = \"bar\"\n\nclient.set_stream_metadata(\n    stream_name=stream_name1,\n    metadata=metadata,\n    current_version=metadata_version,\n)\n```\n\nThe `current_version` argument should be the current version of the stream metadata\nobtained from `get_stream_metadata()`.\n\nPlease refer to the EventStoreDB documentation for more information about stream\nmetadata.\n\n### Delete stream<a id=\"delete-stream\"></a>\n\n*requires leader*\n\nThe method `delete_stream()` can be used to \"delete\" a stream.\n\nThis method has two required arguments, `stream_name` and `current_version`.\n\nThe required `stream_name` argument is a Python `str` that uniquely identifies a\nstream to which a sequence of events will be appended.\n\nThe required `current_version` argument is expected to be either a Python `int`\nthat indicates the stream position of the last recorded event in the stream.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, `stream_name1` is deleted.\n\n```python\ncommit_position = client.delete_stream(stream_name=stream_name1, current_version=2)\n```\n\nAfter deleting a stream, it's still possible to append new events. Reading from a\ndeleted stream will return only events that have been appended after it was\ndeleted.\n\n### Tombstone stream<a id=\"tombstone-stream\"></a>\n\n*requires leader*\n\nThe method `tombstone_stream()` can be used to \"tombstone\" a stream.\n\nThis method has two required arguments, `stream_name` and `current_version`.\n\nThe required `stream_name` argument is a Python `str` that uniquely identifies a\nstream to which a sequence of events will be appended.\n\nThe required `current_version` argument is expected to be either a Python `int`\nthat indicates the stream position of the last recorded event in the stream.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, `stream_name1` is tombstoned.\n\n```python\ncommit_position = client.tombstone_stream(stream_name=stream_name1, current_version=2)\n```\n\nAfter tombstoning a stream, it's not possible to append new events.\n\n\n## Catch-up subscriptions<a id=\"catch-up-subscriptions\"></a>\n\nA \"catch-up\" subscription can be used to receive events that have already been\nrecorded and events that are recorded subsequently. A catch-up subscription can\nbe used by an event-processing component that processes recorded events with\n\"exactly-once\" semantics.\n\nThe `subscribe_to_all()` method starts a catch-up subscription that can receive\nall events in the database. The `subscribe_to_stream()` method starts a catch-up\nsubscription that can receive events from a specific stream. Both methods return a\n\"catch-up subscription\" object, which is a Python iterator. Recorded events can be\nobtained by iteration. Recorded event objects obtained in this way are instances\nof the `RecordedEvent` class.\n\nBefore the \"catch-up subscription\" object is returned to the caller, the client will\nfirstly obtain a \"confirmation\" response from the server, which allows the client to\ndetect that both the gRPC connection and the streaming gRPC call is operational. For\nthis reason, the `subscribe_to_all()` and `subscribe_to_stream()` methods are both\nusefully decorated with the reconnect and retry decorators. However, once the method\nhas returned, the decorators will have exited, and any exceptions that are raised\ndue to connection issues whilst iterating over the subscription object will have to\nbe handled by your code.\n\nA \"catch-up subscription\" iterator will not automatically stop when there are no more\nevents to be returned, but instead the iteration will block until new events are\nsubsequently recorded in the database. Any subsequently recorded events will then be\nimmediately streamed to the client, and the iteration will then continue. The streaming\nof events, and hence the iteration, can be stopped by calling the `stop()` method on the\n\"catch-up subscription\" object.\n\n### Subscribe to all events<a id=\"subscribe-to-all-events\"></a>\n\nThe`subscribe_to_all()` method can be used to start a catch-up subscription\nfrom which all events recorded in the database can be obtained in the order\nthey were recorded. This method returns a \"catch-up subscription\" iterator.\n\nThis method also has ten optional arguments, `commit_position`, `from_end`, `resolve_links`,\n`filter_exclude`, `filter_include`, `filter_by_stream_name`, `include_checkpoints`,\n`include_caught_up`, `timeout` and `credentials`.\n\nThe optional `commit_position` argument specifies a commit position. The default\nvalue of `commit_position` is `None`, which means the catch-up subscription will\nstart from the first recorded event in the database. If a commit position is given,\nit must match an actually existing commit position in the database. Only events\nrecorded after that position will be obtained.\n\nThe optional `from_end` argument specifies whether or not the catch-up subscription\nwill start from the last recorded event in the database. By default, this argument\nis `False`. If `from_end` is `True`, only events recorded after the subscription\nis started will be obtained. This argument will be disregarded if `commit_position`\nis not `None`.\n\nThe optional `resolve_links` argument is a Python `bool`. The default value of `resolve_links`\nis `False`, which means any event links will not be resolved, so that the events that are\nreturned may represent event links. If `resolve_links` is `True`, any event links will\nbe resolved, so that the linked events will be returned instead of the event links.\n\nThe optional `filter_exclude` argument is a sequence of regular expressions that\nspecifies which recorded events should be returned. This argument is ignored\nif `filter_include` is set to a non-empty sequence. The default value of this\nargument matches the event types of EventStoreDB \"system events\", so that system\nevents will not normally be included. See the Notes section below for more\ninformation about filter expressions.\n\nThe optional `filter_include` argument is a sequence of regular expressions\nthat specifies which recorded events should be returned. By default, this\nargument is an empty tuple. If this argument is set to a non-empty sequence,\nthe `filter_exclude` argument is ignored.\n\nThe optional `filter_by_stream_name` argument is a Python `bool` that indicates\nwhether the filtering will apply to event types or stream names. By default, this\nvalue is `False` and so the filtering will apply to the event type strings of\nrecorded events.\n\nThe optional `include_checkpoints` argument is a Python `bool` which indicates\nwhether \"checkpoint\" messages should be included when recorded events are received.\nCheckpoints have a `commit_position` value that can be used by an event processing component to\nupdate its recorded commit position value, so that, when lots of events are being\nfilter out, the subscriber does not have to start from the same old position when\nthe event processing component is restarted.\n\nThe optional `include_caught_up` argument is a Python `bool` which indicates\nwhether \"caught up\" messages should be included when recorded events are\nreceived. The default value of `include_caught_up` is `False`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThe example below shows how to start a catch-up subscription that starts\nfrom the first recorded event in the database.\n\n```python\n# Subscribe from the first recorded event in the database.\ncatchup_subscription = client.subscribe_to_all()\n```\n\nThe example below shows that catch-up subscriptions do not stop\nautomatically, but block when the last recorded event is received,\nand then continue when subsequent events are recorded.\n\n```python\nfrom time import sleep\nfrom threading import Thread\n\n\n# Append a new event to a new stream.\nstream_name2 = str(uuid.uuid4())\nevent4 = NewEvent(type='OrderCreated', data=b'{}')\n\nclient.append_to_stream(\n    stream_name=stream_name2,\n    current_version=StreamState.NO_STREAM,\n    events=[event4],\n)\n\n\n# Receive events from the catch-up subscription in a different thread.\nreceived_events = []\n\ndef receive_events():\n    for event in catchup_subscription:\n        received_events.append(event)\n\n\ndef wait_for_event(event):\n    for _ in range(100):\n        for received in reversed(received_events):\n            if event == received:\n                return\n        else:\n            sleep(0.1)\n    else:\n        raise AssertionError(\"Event wasn't received\")\n\n\nthread = Thread(target=receive_events, daemon=True)\nthread.start()\n\n# Wait to receive event4.\nwait_for_event(event4)\n\n# Append another event whilst the subscription is running.\nevent5 = NewEvent(type='OrderUpdated', data=b'{}')\nclient.append_to_stream(\n    stream_name=stream_name2,\n    current_version=0,\n    events=[event5],\n)\n\n# Wait for the subscription to block.\nwait_for_event(event5)\n\n# Stop the subscription.\ncatchup_subscription.stop()\nthread.join()\n```\n\nThe example below shows how to subscribe to events recorded after a\nparticular commit position, in this case from the commit position of\nthe last recorded event that was received above. Then, another event is\nrecorded before the subscription is restarted. And three more events are\nrecorded whilst the subscription is running. These four events are\nreceived in the order they were recorded.\n\n\n```python\n\n# Append another event.\nevent6 = NewEvent(type='OrderDeleted', data=b'{}')\nclient.append_to_stream(\n    stream_name=stream_name2,\n    current_version=1,\n    events=[event6],\n)\n\n# Restart subscribing to all events after the\n# commit position of the last received event.\ncatchup_subscription = client.subscribe_to_all(\n    commit_position=received_events[-1].commit_position\n)\n\nthread = Thread(target=receive_events, daemon=True)\nthread.start()\n\n# Wait for event6.\nwait_for_event(event6)\n\n# Append three more events to a new stream.\nstream_name3 = str(uuid.uuid4())\nevent7 = NewEvent(type='OrderCreated', data=b'{}')\nevent8 = NewEvent(type='OrderUpdated', data=b'{}')\nevent9 = NewEvent(type='OrderDeleted', data=b'{}')\n\nclient.append_to_stream(\n    stream_name=stream_name3,\n    current_version=StreamState.NO_STREAM,\n    events=[event7, event8, event9],\n)\n\n# Wait for events 7, 8 and 9.\nwait_for_event(event7)\nwait_for_event(event8)\nwait_for_event(event9)\n\n# Stop the subscription.\ncatchup_subscription.stop()\nthread.join()\n```\n\nThe catch-up subscription call is ended as soon as the subscription object's\n`stop()` method is called. This happens automatically when it goes out of scope,\nor when it is explicitly deleted from memory using the Python `del` keyword.\n\n### Subscribe to stream events<a id=\"subscribe-to-stream-events\"></a>\n\nThe `subscribe_to_stream()` method can be used to start a catch-up subscription\nfrom which events recorded in a single stream can be obtained. This method\nreturns a \"catch-up subscription\" iterator.\n\nThis method has a required `stream_name` argument, which specifies the name of the\nstream from which recorded events will be received.\n\nThis method also has six optional arguments, `stream_position`, `from_end`,\n`resolve_links`, `include_caught_up`, `timeout` and `credentials`.\n\nThe optional `stream_position` argument specifies a position in the stream from\nwhich to start subscribing. The default value of `stream_position` is `None`,\nwhich means that all events recorded in the stream will be obtained in the\norder they were recorded, unless `from_end` is set to `True`. If a stream\nposition is given, then only events recorded after that position will be obtained.\n\nThe optional `from_end` argument specifies that the subscription will start\nfrom the last position in the stream. The default value of `from_end` is `False`.\nIf `from_end` is `True`, then only events recorded after the subscription was\ncreated will be obtained. This argument if ignored is `stream_position` is set.\n\nThe optional `resolve_links` argument is a Python `bool`. The default value of `resolve_links`\nis `False`, which means any event links will not be resolved, so that the events that are\nreturned may represent event links. If `resolve_links` is `True`, any event links will\nbe resolved, so that the linked events will be returned instead of the event links.\n\nThe optional `include_caught_up` argument is a Python `bool` which indicates\nwhether \"caught up\" messages should be included when recorded events are\nreceived. The default value of `include_caught_up` is `False`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThe example below shows how to start a catch-up subscription from\nthe first recorded event in a stream.\n\n```python\n# Subscribe from the start of 'stream2'.\nsubscription = client.subscribe_to_stream(stream_name=stream_name2)\n```\n\nThe example below shows how to start a catch-up subscription from\na particular stream position.\n\n```python\n# Subscribe to stream2, from the second recorded event.\nsubscription = client.subscribe_to_stream(\n    stream_name=stream_name2,\n    stream_position=1,\n)\n```\n\n### How to implement exactly-once event processing<a id=\"how-to-implement-exactly-once-event-processing\"></a>\n\nThe commit positions of recorded events that are received and processed by a\ndownstream component are usefully recorded by the downstream component, so that\nthe commit position of last processed event can be determined when processing is\nresumed.\n\nThe last recorded commit position can be used to specify the commit position from which\nto subscribe when processing is resumed. Since this commit position will represent the\nposition of the last successfully processed event in a downstream component, so it\nwill be usual to want the next event after this position, because that is the next\nevent that has not yet been processed. For this reason, when subscribing for events\nfrom a specific commit position using a catch-up subscription in EventStoreDB, the\nrecorded event at the specified commit position will NOT be included in the sequence\nof recorded events that are received.\n\nTo accomplish \"exactly-once\" processing of recorded events in a downstream\ncomponent when using a catch-up subscription, the commit position of a recorded\nevent should be recorded atomically and uniquely along with the result of processing\nrecorded events, for example in the same database as materialised views when\nimplementing eventually-consistent CQRS, or in the same database as a downstream\nanalytics or reporting or archiving application. By recording the commit position\nof recorded events atomically with the new state that results from processing\nrecorded events, \"dual writing\" in the consumption of recorded events can be\navoided. By also recording the commit position uniquely, the new state cannot be\nrecorded twice, and hence the recorded state of the downstream component will be\nupdated only once for any recorded event. By using the greatest recorded commit\nposition to resume a catch-up subscription, all recorded events will eventually\nbe processed. The combination of the \"at-most-once\" condition and the \"at-least-once\"\ncondition gives the \"exactly-once\" condition.\n\nThe danger with \"dual writing\" in the consumption of recorded events is that if a\nrecorded event is successfully processed and new state recorded atomically in one\ntransaction with the commit position recorded in a separate transaction, one may\nhappen and not the other. If the new state is recorded but the position is lost,\nand then the processing is stopped and resumed, the recorded event may be processed\ntwice. On the other hand, if the commit position is recorded but the new state is\nlost, the recorded event may effectively not be processed at all. By either\nprocessing an event more than once, or by failing to process an event, the recorded\nstate of the downstream component might be inaccurate, or possibly inconsistent, and\nperhaps catastrophically so. Such consequences may or may not matter in your situation.\nBut sometimes inconsistencies may halt processing until the issue is resolved. You can\navoid \"dual writing\" in the consumption of events by atomically recording the commit\nposition of a recorded event along with the new state that results from processing that\nevent in the same atomic transaction. By making the recording of the commit positions\nunique, so that transactions will be rolled back when there is a conflict, you will\nprevent the results of any duplicate processing of a recorded event being committed.\n\nRecorded events received from a catch-up subscription cannot be acknowledged back\nto the EventStoreDB server. Acknowledging events, however, is an aspect of \"persistent\nsubscriptions\". Hoping to rely on acknowledging events to an upstream\ncomponent is an example of dual writing.\n\n\n## Persistent subscriptions<a id=\"persistent-subscriptions\"></a>\n\nIn EventStoreDB, \"persistent\" subscriptions are similar to catch-up subscriptions,\nin that reading a persistent subscription will block when there are no more recorded\nevents to be received, and then continue when new events are subsequently recorded.\n\nPersistent subscriptions can be consumed by a group of consumers operating with one\nof the supported \"consumer strategies\".\n\nThe significant different with persistent subscriptions is the server will keep track\nof the progress of the consumers. The consumer of a persistent subscription will\ntherefore need to \"acknowledge\" when a recorded event has been processed successfully,\nand otherwise \"negatively acknowledge\" a recorded event that has been received but was\nnot successfully processed.\n\nAll of this means that for persistent subscriptions there are \"create\", \"read\", \"update\"\n\"delete\", \"ack\", and \"nack\" operations to consider.\n\nWhilst there are some advantages of persistent subscriptions, in particular the\nconcurrent processing of recorded events by a group of consumers, by tracking in\nthe server the position in the commit sequence of events that have been processed,\nthe issue of \"dual writing\" in the consumption of events arises. Reliability in the\nprocessing of recorded events by a group of persistent subscription consumers will\nrely on their idempotent handling of duplicate messages, and their resilience to\nout-of-order delivery.\n\n\n### Create subscription to all<a id=\"create-subscription-to-all\"></a>\n\n*requires leader*\n\nThe `create_subscription_to_all()` method can be used to create a \"persistent subscription\"\nto all the recorded events in the database across all streams.\n\nThis method has a required `group_name` argument, which is the\nname of a \"group\" of consumers of the subscription.\n\nThis method has nineteen optional arguments, `from_end`, `commit_position`, `resolve_links`,\n`filter_exclude`, `filter_include`, `filter_by_stream_name`, `consumer_strategy`,\n`message_timeout`, `max_retry_count`, `min_checkpoint_count`, `max_checkpoint_count`,\n`checkpoint_after`, `max_subscriber_count`, `live_buffer_size`, `read_batch_size`,\n`history_buffer_size`, `extra_statistics`, `timeout` and `credentials`.\n\nThe optional `from_end` argument can be used to specify that the group of consumers\nof the subscription should only receive events that were recorded after the subscription\nwas created.\n\nAlternatively, the optional `commit_position` argument can be used to specify a commit\nposition from which the group of consumers of the subscription should\nreceive events. Please note, the recorded event at the specified commit position might\nbe included in the recorded events received by the group of consumers.\n\nIf neither `from_end` nor `commit_position` are specified, the group of consumers\nof the subscription will potentially receive all recorded events in the database.\n\nThe optional `resolve_links` argument is a Python `bool`. The default value of `resolve_links`\nis `False`, which means any event links will not be resolved, so that the events that are\nreturned may represent event links. If `resolve_links` is `True`, any event links will\nbe resolved, so that the linked events will be returned instead of the event links.\n\nThe optional `filter_exclude` argument is a sequence of regular expressions that\nspecifies which recorded events should be returned. This argument is ignored\nif `filter_include` is set to a non-empty sequence. The default value of this\nargument matches the event types of EventStoreDB \"system events\", so that system\nevents will not normally be included. See the Notes section below for more\ninformation about filter expressions.\n\nThe optional `filter_include` argument is a sequence of regular expressions\nthat specifies which recorded events should be returned. By default, this\nargument is an empty tuple. If this argument is set to a non-empty sequence,\nthe `filter_exclude` argument is ignored.\n\nThe optional `filter_by_stream_name` argument is a Python `bool` that indicates\nwhether the filtering will apply to event types or stream names. By default, this\nvalue is `False` and so the filtering will apply to the event type strings of\nrecorded events.\n\nThe optional `consumer_strategy` argument is a Python `str` that defines\nthe consumer strategy for this persistent subscription. The value of this argument\ncan be `'DispatchToSingle'`, `'RoundRobin'`, `'Pinned'`, or `'PinnedByCorrelation'`. The\ndefault value is `'DispatchToSingle'`.\n\nThe optional `message_timeout` argument is a Python `float` which sets a maximum duration,\nin seconds, from the server sending a recorded event to a consumer of the persistent\nsubscription until either an \"acknowledgement\" (ack) or a \"negative acknowledgement\"\n(nack) is received by the server, after which the server will retry to send the event.\nThe default value of `message_timeout` is `30.0`.\n\nThe optional `max_retry_count` argument is a Python `int` which sets the number of times\nthe server will retry to send an event. The default value of `max_retry_count` is `10`.\n\nThe optional `min_checkpoint_count` argument is a Python `int` which sets the minimum\nnumber of \"acknowledgements\" (acks) received by the server before the server may record\nthe acknowledgements. The default value of `min_checkpoint_count` is `10`.\n\nThe optional `max_checkpoint_count` argument is a Python `int` which sets the maximum\nnumber of \"acknowledgements\" (acks) received by the server before the server must\nrecord the acknowledgements. The default value of `max_checkpoint_count` is `1000`.\n\nThe optional `checkpoint_after` argument is a Python `float` which sets the maximum\nduration in seconds between recording \"acknowledgements\" (acks). The default value of\n`checkpoint_after` is `2.0`.\n\nThe optional `max_subscriber_count` argument is a Python `int` which sets the maximum\nnumber of concurrent readers of the persistent subscription, beyond which attempts to\nread the persistent subscription will raise a `MaximumSubscriptionsReached` error.\n\nThe optional `live_buffer_size` argument is a Python `int` which sets the size of the\nbuffer (in-memory) holding newly recorded events. The default value of `live_buffer_size`\nis 500.\n\nThe optional `read_batch_size` argument is a Python `int` which sets the number of\nrecorded events read from disk when catching up. The default value of `read_batch_size`\nis 200.\n\nThe optional `history_buffer_size` argument is a Python `int` which sets the number of\nrecorded events to cache in memory when catching up. The default value of `history_buffer_size`\nis 500.\n\nThe optional `extra_statistics` argument is a Python `bool` which enables tracking of\nextra statistics on this subscription. The default value of `extra_statistics` is `False`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThe method `create_subscription_to_all()` does not return a value. Recorded events are\nobtained by calling the `read_subscription_to_all()` method.\n\nIn the example below, a persistent subscription is created to operate from the\nfirst recorded non-system event in the database.\n\n```python\n# Create a persistent subscription.\ngroup_name1 = f\"group-{uuid.uuid4()}\"\nclient.create_subscription_to_all(group_name=group_name1)\n```\n\n### Read subscription to all<a id=\"read-subscription-to-all\"></a>\n\n*requires leader*\n\nThe `read_subscription_to_all()` method can be used by a group of consumers to receive\nrecorded events from a persistent subscription that has been created using\nthe `create_subscription_to_all()` method.\n\nThis method has a required `group_name` argument, which is\nthe name of a \"group\" of consumers of the subscription specified\nwhen `create_subscription_to_all()` was called.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nThis method returns a `PersistentSubscription` object, which is an iterator\ngiving `RecordedEvent` objects. It also has `ack()`, `nack()` and `stop()`\nmethods.\n\n```python\nsubscription = client.read_subscription_to_all(group_name=group_name1)\n```\n\nThe `ack()` method should be used by a consumer to \"acknowledge\" to the server that\nit has received and successfully processed a recorded event. This will prevent that\nrecorded event being received by another consumer in the same group. The `ack()`\nhas an `item` argument which can be either a `RecordedEvent` or a `UUID`. If you pass\nin a `RecordedEvent`, the value of its `ack_id` attribute will be used to acknowledge\nthe event to the server. If you pass in a UUID, then used the value of the `ack_id`\nof the `RecordedEvent` that is being acknowledged, in case the event has been resolved\nfrom a link event (which can happen both when persistent subscription setting\n`resolve_links` is `True` and also when replaying parked events regardless of the\n`resolve_links` setting).\n\nThe example below iterates over the subscription object, and calls `ack()` with the\nreceived `RecordedEvent` objects. The subscription's `stop()` method is called when\nwe have received `event9`, stopping the iteration, so that we can continue with the\nexamples below.\n\n```python\nreceived_events = []\n\nfor event in subscription:\n    received_events.append(event)\n\n    # Acknowledge the received event.\n    subscription.ack(event)\n\n    # Stop when 'event9' has been received.\n    if event == event9:\n        subscription.stop()\n```\n\nThe `nack()` should be used by a consumer to \"negatively acknowledge\" to the server that\nit has received but not successfully processed a recorded event. The `nack()` method has\nan `item` argument that works in the same way as `ack()`. Use the recorded event or its\n`ack_id` attribute. The `nack()` method also has an `action` argument, which should be\na Python `str`: either `'unknown'`, `'park'`, `'retry'`, `'skip'` or `'stop'`.\n\nThe `stop()` method can be used to stop the gRPC streaming operation.\n\n### How to write a persistent subscription consumer<a id=\"how-to-write-a-persistent-subscription-consumer\"></a>\n\nThe reading of a persistent subscription can be encapsulated in a \"consumer\" that calls\na \"policy\" function when a recorded event is received and then automatically calls\n`ack()` if the policy function returns normally, and `nack()` if it raises an exception,\nperhaps retrying the event for a certain number of times before parking the event.\n\nThe simple example below shows how this might be done. We can see that 'event9' is\nacknowledged before 'event5' is finally parked.\n\nThe  number of time a `RecordedEvent` has been retried is presented by the its\n`retry_count` attribute.\n\n```python\nacked_events = {}\nnacked_events = {}\n\n\nclass ExampleConsumer:\n    def __init__(self, subscription, max_retry_count, final_action):\n        self.subscription = subscription\n        self.max_retry_count = max_retry_count\n        self.final_action = final_action\n        self.error = None\n\n    def run(self):\n        with self.subscription:\n            for event in self.subscription:\n                try:\n                    self.policy(event)\n                except Exception:\n                    if event.retry_count < self.max_retry_count:\n                        action = \"retry\"\n                    else:\n                        action = self.final_action\n                    self.subscription.nack(event, action)\n                    self.after_nack(event, action)\n                else:\n                    self.subscription.ack(event)\n                    self.after_ack(event)\n\n    def stop(self):\n        self.subscription.stop()\n\n    def policy(self, event):\n        # Raise an exception when we see \"event5\".\n        if event == event5:\n            raise Exception()\n\n    def after_ack(self, event):\n        # Track retry count of acked events.\n        acked_events[event.id] = event.retry_count\n\n    def after_nack(self, event, action):\n        # Track retry count of nacked events.\n        nacked_events[event.id] = event.retry_count\n\n        if action == self.final_action:\n            # Stop the consumer, so we can continue with the examples.\n            self.stop()\n\n\n# Create subscription.\ngroup_name = f\"group-{uuid.uuid4()}\"\nclient.create_subscription_to_all(group_name, commit_position=commit_position1)\n\n# Read subscription.\nsubscription = client.read_subscription_to_all(group_name)\n\n# Construct consumer.\nconsumer = ExampleConsumer(\n    subscription=subscription,\n    max_retry_count=5,\n    final_action=\"park\",\n)\n\n# Run consumer.\nconsumer.run()\n\n# Check 'event5' was nacked and never acked.\nassert event5.id in nacked_events\nassert event5.id not in acked_events\nassert nacked_events[event5.id] == 5\n\n# Check 'event9' was acked and never nacked.\nassert event9.id in acked_events\nassert event9.id not in nacked_events\n```\n\n### Update subscription to all<a id=\"update-subscription-to-all\"></a>\n\n*requires leader*\n\nThe `update_subscription_to_all()` method can be used to update a\n\"persistent subscription\". Please note, the filter options and consumer\nstrategy cannot be adjusted.\n\nThis method has a required `group_name` argument, which is the\nname of a \"group\" of consumers of the subscription.\n\nThis method also has sixteen optional arguments, `from_end`, `commit_position`,\n`resolve_links`, `consumer_strategy`, `message_timeout`, `max_retry_count`,\n`min_checkpoint_count`, `max_checkpoint_count`, `checkpoint_after`,\n`max_subscriber_count`, `live_buffer_size`, `read_batch_size`, `history_buffer_size`,\n`extra_statistics`, `timeout` and `credentials`.\n\nThe optional arguments `from_end`, `commit_position`,\n`resolve_links`, `consumer_strategy`, `message_timeout`, `max_retry_count`,\n`min_checkpoint_count`, `max_checkpoint_count`, `checkpoint_after`,\n`max_subscriber_count`, `live_buffer_size`, `read_batch_size`, `history_buffer_size`,\namd `extra_statistics` can be used to adjust the values set on previous calls to\n`create_subscription_to_all()` and `update_subscription_to_all()`. If any of\nthese arguments are not mentioned in a call to `update_subscription_to_all()`,\nthe corresponding settings of the persistent subscription will be unchanged.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThe method `update_subscription_to_all()` does not return a value.\n\nIn the example below, a persistent subscription is updated to run from the end of the\ndatabase.\n\n```python\n# Create a persistent subscription.\nclient.update_subscription_to_all(group_name=group_name1, from_end=True)\n```\n\n### Create subscription to stream<a id=\"create-subscription-to-stream\"></a>\n\n*requires leader*\n\nThe `create_subscription_to_stream()` method can be used to create a persistent\nsubscription to a stream.\n\nThis method has two required arguments, `group_name` and `stream_name`. The\n`group_name` argument names the group of consumers that will receive events\nfrom this subscription. The `stream_name` argument specifies which stream\nthe subscription will follow. The values of both these arguments are expected\nto be Python `str` objects.\n\nThis method also has sixteen optional arguments, `stream_position`, `from_end`,\n`resolve_links`, `consumer_strategy`, `message_timeout`, `max_retry_count`,\n`min_checkpoint_count`, `max_checkpoint_count`, `checkpoint_after`,\n`max_subscriber_count`, `live_buffer_size`, `read_batch_size`, `history_buffer_size`,\n`extra_statistics`, `timeout` and `credentials`.\n\nThe optional `stream_position` argument specifies a stream position from\nwhich to subscribe. The recorded event at this stream\nposition will be received when reading the subscription.\n\nThe optional `from_end` argument is a Python `bool`.\nBy default, the value of this argument is `False`. If this argument is set\nto `True`, reading from the subscription will receive only events\nrecorded after the subscription was created. That is, it is not inclusive\nof the current stream position.\n\nThe optional `resolve_links` argument is a Python `bool`. The default value of `resolve_links`\nis `False`, which means any event links will not be resolved, so that the events that are\nreturned may represent event links. If `resolve_links` is `True`, any event links will\nbe resolved, so that the linked events will be returned instead of the event links.\n\nThe optional `consumer_strategy` argument is a Python `str` that defines\nthe consumer strategy for this persistent subscription. The value of this argument\ncan be `'DispatchToSingle'`, `'RoundRobin'`, `'Pinned'`, or `'PinnedByCorrelation'`. The\ndefault value is `'DispatchToSingle'`.\n\nThe optional `message_timeout` argument is a Python `float` which sets a maximum duration,\nin seconds, from the server sending a recorded event to a consumer of the persistent\nsubscription until either an \"acknowledgement\" (ack) or a \"negative acknowledgement\"\n(nack) is received by the server, after which the server will retry to send the event.\nThe default value of `message_timeout` is `30.0`.\n\nThe optional `max_retry_count` argument is a Python `int` which sets the number of times\nthe server will retry to send an event. The default value of `max_retry_count` is `10`.\n\nThe optional `min_checkpoint_count` argument is a Python `int` which sets the minimum\nnumber of \"acknowledgements\" (acks) received by the server before the server may record\nthe acknowledgements. The default value of `min_checkpoint_count` is `10`.\n\nThe optional `max_checkpoint_count` argument is a Python `int` which sets the maximum\nnumber of \"acknowledgements\" (acks) received by the server before the server must\nrecord the acknowledgements. The default value of `max_checkpoint_count` is `1000`.\n\nThe optional `checkpoint_after` argument is a Python `float` which sets the maximum\nduration in seconds between recording \"acknowledgements\" (acks). The default value of\n`checkpoint_after` is `2.0`.\n\nThe optional `max_subscriber_count` argument is a Python `int` which sets the maximum\nnumber of concurrent readers of the persistent subscription, beyond which attempts to\nread the persistent subscription will raise a `MaximumSubscriptionsReached` error.\n\nThe optional `live_buffer_size` argument is a Python `int` which sets the size of the\nbuffer (in-memory) holding newly recorded events. The default value of `live_buffer_size`\nis 500.\n\nThe optional `read_batch_size` argument is a Python `int` which sets the number of\nrecorded events read from disk when catching up. The default value of `read_batch_size`\nis 200.\n\nThe optional `history_buffer_size` argument is a Python `int` which sets the number of\nrecorded events to cache in memory when catching up. The default value of `history_buffer_size`\nis 500.\n\nThe optional `extra_statistics` argument is a Python `bool` which enables tracking of\nextra statistics on this subscription. The default value of `extra_statistics` is `False`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThis method does not return a value. Events can be received by calling\n`read_subscription_to_stream()`.\n\nThe example below creates a persistent stream subscription from the start of the stream.\n\n```python\n# Create a persistent stream subscription from start of the stream.\ngroup_name2 = f\"group-{uuid.uuid4()}\"\nclient.create_subscription_to_stream(\n    group_name=group_name2,\n    stream_name=stream_name2,\n)\n```\n\n### Read subscription to stream<a id=\"read-subscription-to-stream\"></a>\n\n*requires leader*\n\nThe `read_subscription_to_stream()` method can be used to read a persistent\nsubscription to a stream.\n\nThis method has two required arguments, `group_name` and `stream_name`, which\nshould match the values of arguments used when calling `create_subscription_to_stream()`.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nThis method returns a `PersistentSubscription` object, which is an iterator\ngiving `RecordedEvent` objects, that also has `ack()`, `nack()` and `stop()`\nmethods.\n\n```python\nsubscription = client.read_subscription_to_stream(\n    group_name=group_name2,\n    stream_name=stream_name2,\n)\n```\n\nThe example below iterates over the subscription object, and calls `ack()`.\nThe subscription's `stop()` method is called when we have received `event6`,\nstopping the iteration, so that we can continue with the examples below.\n\n```python\nevents = []\nfor event in subscription:\n    events.append(event)\n\n    # Acknowledge the received event.\n    subscription.ack(event)\n\n    # Stop when 'event6' has been received.\n    if event == event6:\n        subscription.stop()\n```\n\nWe can check we received all the events that were appended to `stream_name2`\nin the examples above.\n\n```python\nassert len(events) == 3\nassert events[0] == event4\nassert events[1] == event5\nassert events[2] == event6\n```\n\n### Update subscription to stream<a id=\"update-subscription-to-stream\"></a>\n\n*requires leader*\n\nThe `update_subscription_to_stream()` method can be used to update a persistent\nsubscription to a stream. Please note, the consumer strategy cannot be adjusted.\n\nThis method has a required `group_name` argument, which is the\nname of a \"group\" of consumers of the subscription, and a required\n`stream_name` argument, which is the name of a stream.\n\nThis method also has sixteen optional arguments, `from_end`, `stream_position`,\n`resolve_links`, `consumer_strategy`, `message_timeout`, `max_retry_count`,\n`max_subscriber_count`, `live_buffer_size`, `read_batch_size`, `history_buffer_size`,\n`extra_statistics`, `min_checkpoint_count`, `max_checkpoint_count`, `checkpoint_after`,\n`timeout` and `credentials`.\n\nThe optional arguments `from_end`, `stream_position`,\n`resolve_links`, `consumer_strategy`, `message_timeout`, `max_retry_count`,\n`min_checkpoint_count`, `max_checkpoint_count`, `checkpoint_after`,\n`max_subscriber_count`, `live_buffer_size`, `read_batch_size`, `history_buffer_size`,\nand `extra_statistics` can be used to adjust the values set on previous calls to\n`create_subscription_to_stream()` and `update_subscription_to_stream()`. If any of\nthese arguments are not mentioned in a call to `update_subscription_to_stream()`,\nthe corresponding settings of the persistent subscription will be unchanged.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThe `update_subscription_to_stream()` method does not return a value.\n\nIn the example below, a persistent subscription to a stream is updated to run from the\nend of the stream.\n\n```python\n# Create a persistent subscription.\nclient.update_subscription_to_stream(\n    group_name=group_name2,\n    stream_name=stream_name2,\n    from_end=True,\n)\n```\n\n### Replay parked events<a id=\"replay-parked-events\"></a>\n\n*requires leader*\n\nThe `replay_parked_events()` method can be used to \"replay\" events that have\nbeen \"parked\" (negatively acknowledged with the action `'park'`) when reading\na persistent subscription. Parked events will then be received again by consumers\nreading from the persistent subscription.\n\nThis method has a required `group_name` argument and an optional `stream_name`\nargument. The values of these arguments should match those used when calling\n`create_subscription_to_all()` or `create_subscription_to_stream()`.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nThe example below replays parked events for group `group_name1`.\n\n```python\nclient.replay_parked_events(\n    group_name=group_name1,\n)\n```\n\nThe example below replays parked events for group `group_name2`.\n\n```python\nclient.replay_parked_events(\n    group_name=group_name2,\n    stream_name=stream_name2,\n)\n```\n\n### Get subscription info<a id=\"get-subscription-info\"></a>\n\n*requires leader*\n\nThe `get_subscription_info()` method can be used to get information for a\npersistent subscription.\n\nThis method has a required `group_name` argument and an optional `stream_name`\nargument, which should match the values of arguments used when calling either\n`create_subscription_to_all()` or `create_subscription_to_stream()`.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nThe example below gets information for the persistent subscription `group_name1` which\nwas created by calling `create_subscription_to_all()`.\n\n```python\nsubscription_info = client.get_subscription_info(\n    group_name=group_name1,\n)\n```\n\nThe example below gets information for the persistent subscription `group_name2` on\n`stream_name2` which was created by calling `create_subscription_to_stream()`.\n\n```python\nsubscription_info = client.get_subscription_info(\n    group_name=group_name2,\n    stream_name=stream_name2,\n)\n```\n\nThe returned value is a `SubscriptionInfo` object.\n\n### List subscriptions<a id=\"list-subscriptions\"></a>\n\n*requires leader*\n\nThe `list_subscriptions()` method can be used to get information for all\nexisting persistent subscriptions, both \"subscriptions to all\" and\n\"subscriptions to stream\".\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nThe example below lists all the existing persistent subscriptions.\n\n```python\nsubscriptions = client.list_subscriptions()\n```\n\nThe returned value is a list of `SubscriptionInfo` objects.\n\n\n### List subscriptions to stream<a id=\"list-subscriptions-to-stream\"></a>\n\n*requires leader*\n\nThe `list_subscriptions_to_stream()` method can be used to get information for all\nthe persistent subscriptions to a stream.\n\nThis method has one required argument, `stream_name`.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nsubscriptions = client.list_subscriptions_to_stream(\n    stream_name=stream_name2,\n)\n```\n\nThe returned value is a list of `SubscriptionInfo` objects.\n\n\n### Delete subscription<a id=\"delete-subscription\"></a>\n\n*requires leader*\n\nThe `delete_subscription()` method can be used to delete a persistent\nsubscription.\n\nThis method has a required `group_name` argument and an optional `stream_name`\nargument, which should match the values of arguments used when calling either\n`create_subscription_to_all()` or `create_subscription_to_stream()`.\n\nThis method has an optional `timeout` argument, which is a Python `float`\nthat sets a maximum duration, in seconds, for the completion of the gRPC operation.\n\nThis method has an optional `credentials` argument, which can be used to\noverride call credentials derived from the connection string URI.\n\nThe example below deletes the persistent subscription `group_name1` which\nwas created by calling `create_subscription_to_all()`.\n\n```python\nclient.delete_subscription(\n    group_name=group_name1,\n)\n```\n\nThe example below deleted the persistent subscription `group_name2` on\n`stream_name2` which was created by calling `create_subscription_to_stream()`.\n\n```python\nclient.delete_subscription(\n    group_name=group_name2,\n    stream_name=stream_name2,\n)\n```\n\n\n## Projections<a id=\"projections\"></a>\n\nPlease refer to the [EventStoreDB documentation](https://developers.eventstore.com/server/v23.10/projections.html)\nfor more information on projections in EventStoreDB.\n\n### Create projection<a id=\"create-projection\"></a>\n\n*requires leader*\n\nThe `create_projection()` method can be used to create a \"continuous\" projection.\n\nThis method has two required arguments, `name` and `query`.\n\nThis required `name` argument is a Python `str` that specifies the name of the projection.\n\nThis required `query` argument is a Python `str` that defines what the projection will do.\n\nThis method also has four optional arguments, `emit_enabled`,\n`track_emitted_streams`, `timeout`, and `credentials`.\n\nThe optional `emit_enabled` argument is a Python `bool` which specifies whether a\nprojection will be able to emit events. If a `True` value is specified, the projection\nwill be able to emit events, otherwise the projection will not be able to emit events.\nThe default value of `emit_enabled` is `False`.\n\nPlease note, `emit_enabled` must be `True` if your projection query includes a call to\n`emit()`, otherwise the projection will not run.\n\nThe optional `track_emitted_streams` argument is a Python `bool` which specifies whether\na projection will have its emitted streams tracked. If a `True` value is specified, the\nprojection will have its emitted streams tracked, otherwise the projection will not\nhave its emitted streams tracked. The default value of `track_emitted_streams` is `False`.\n\nThe purpose of tracking emitted streams is that they can optionally be deleted when\na projection is deleted (see the `delete_projection()` method for more details).\n\nPlease note, if you set `track_emitted_streams` to `True`, then you must also set\n`emit_enabled` to `True`, otherwise an error will be raised by this method.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, a projection is created that processes events appended to\n`stream_name2`. The \"state\" of the projection is initialised to have a \"count\" that\nis incremented once for each event.\n\n```python\nprojection_name = str(uuid.uuid4())\n\nprojection_query = \"\"\"fromStream('%s')\n.when({\n  $init: function(){\n    return {\n      count: 0\n    };\n  },\n  OrderCreated: function(s,e){\n    s.count += 1;\n  },\n  OrderUpdated: function(s,e){\n    s.count += 1;\n  },\n  OrderDeleted: function(s,e){\n    s.count += 1;\n  }\n})\n.outputState()\n\"\"\"  % stream_name2\n\nclient.create_projection(\n    name=projection_name,\n    query=projection_query,\n)\n```\n\nPlease note, the `outputState()` call is optional, and causes the state of the\nprojection to be persisted in a \"result\" stream. If `outputState()` is called, an\nevent representing the state of the projection will immediately be written to a\n\"result\" stream.\n\nThe default name of the \"result\" stream for a projection with name `projection_name`\nis `$projections-{projection_name}-result`. This stream name can be used to read from\nand subscribe to the \"result\" stream, with the `get_stream()`, or `read_stream()`,\nor `subscribe_to_stream()`, or `create_subscription_to_stream()` and\n`read_subscription_to_stream()` methods.\n\nIf your projection does not call `outputState()`, then you won't be able to read or\nsubscribe to a \"result\" stream, but you will still be able to get the projection\n\"state\" using the `get_projection_state()` method.\n\nThe \"type\" string of events recorded in \"result\" streams is `'Result'`. You may want to\ninclude this in a `filter_exclude` argument when filtering events by type whilst reading\nor subscribing to \"all\" events recorded in the database (with `read_all()`,\n`subscribe_to_all()`, etc).\n\nAdditionally, and in any case, from time to time the state of the projection will be\nrecorded in a \"state\" stream, and also the projection will write to a \"checkpoint\"\nstream. The \"state\" stream, the \"checkpoint\" stream, and all \"emitted\" streams that\nhave been \"tracked\" (as a consequence of the `track_emitted_streams` argument having\nbeen `True`) can optionally be deleted when the projection is deleted. See\n`delete_projection()` for details.\n\nUnlike the \"result\" and \"emitted\" streams, the \"state\" and the \"checkpoint\" streams\ncannot be read or subscribed to by users, or viewed in the \"stream browser\" view of\nEventStoreDB's Web interface.\n\n### Get projection state<a id=\"get-projection-state\"></a>\n\n*requires leader*\n\nThe `get_projection_state()` method can be used to get a projection's \"state\".\n\nThis method has a required `name` argument, which is a Python `str` that\nspecifies the name of a projection.\n\nThis method also has two optional arguments, `timeout` and `credentials`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nIn the example below, after sleeping for 1 second to allow the projection\nto process all the recorded events, the projection \"state\" is obtained.\nWe can see that the projection has processed three events.\n\n```python\nsleep(1)  # allow time for projection to process recorded events\n\nprojection_state = client.get_projection_state(name=projection_name)\n\nassert projection_state.value == {'count': 3}\n```\n\n### Get projection statistics<a id=\"get-projection-statistics\"></a>\n\n*requires leader*\n\nThe `get_projection_statistics()` method can be used to get projection statistics.\n\nThis method has a required `name` argument, which is a Python `str` that specifies the\nname of a projection.\n\nThis method also has two optional arguments, `timeout` and `credentials`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\nThis method returns a `ProjectionStatistics` object that represents\nthe named projection.\n\n```python\nstatistics = client.get_projection_statistics(name=projection_name)\n```\n\nA `ProjectionStatistics` object is returned. The attributes of this object\nhave values that represent the progress of the projection.\n\n### Update projection<a id=\"update-projection\"></a>\n\n*requires leader*\n\nThe `update_projection()` method can be used to update a projection.\n\nThis method has two required arguments, `name` and `query`.\n\nThe required `name` argument is a Python `str` which specifies the name of the projection\nto be updated.\n\nThe required `query` argument is a Python `str` which defines what the projection will do.\n\nThis method also has three optional arguments, `emit_enabled`, `timeout`, and `credentials`.\n\nThe optional `emit_enabled` argument is a Python `bool` which specifies whether a\nprojection will be able to emit events. If a `True` value is specified, the projection\nwill be able to emit events. If a `False` value is specified, the projection will not\nbe able to emit events. The default value of `emit_enabled` is `False`.\n\nPlease note, `emit_enabled` must be `True` if your projection query includes a call\nto `emit()`, otherwise the projection will not run.\n\nPlease note, it is not possible to update `track_emitted_streams` via the gRPC API.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nclient.update_projection(name=projection_name, query=projection_query)\n```\n\n### Enable projection<a id=\"enable-projection\"></a>\n\n*requires leader*\n\nThe `enable_projection()` method can be used to enable (start running) a projection\nthat was previously disabled (stopped).\n\nThis method has a required `name` argument, which is a Python `str` that\nspecifies the name of the projection to be enabled.\n\nThis method also has two optional arguments, `timeout` and `credentials`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nclient.enable_projection(name=projection_name)\n```\n\n### Disable projection<a id=\"disable-projection\"></a>\n\n*requires leader*\n\nThe `disable_projection()` method can be used to disable (stop running) a projection.\n\nThis method has a required `name` argument, which is a Python `str` that\nspecifies the name of the projection to be disabled.\n\nThis method also has two optional arguments, `timeout`, and `credentials`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nclient.disable_projection(name=projection_name)\n```\n\n### Reset projection<a id=\"reset-projection\"></a>\n\n*requires leader*\n\nThe `reset_projection()` method can be used to reset a projection.\n\nThis method has a required `name` argument, which is a Python `str` that\nspecifies the name of the projection to be reset.\n\nThis method also has two optional arguments, `timeout`, and `credentials`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nclient.reset_projection(name=projection_name)\n```\n\nPlease note, a projection must be disabled before it can be reset.\n\n\n### Delete projection<a id=\"delete-projection\"></a>\n\n*requires leader*\n\nThe `delete_projection()` method can be used to delete a projection.\n\nThis method has a required `name` argument, which is a Python `str` that\nspecifies the name of the projection to be deleted.\n\nThis method also has five optional arguments, `delete_emitted_streams`,\n`delete_state_stream`, `delete_checkpoint_stream`, `timeout`, and `credentials`.\n\nThe optional `delete_emitted_streams` argument is a Python `bool` which specifies\nthat all \"emitted\" streams that have been tracked will be deleted. For emitted streams\nto be deleted, they must have been tracked (see the `track_emitted_streams` argument of\nthe `create_projection()` method.)\n\nThe optional `delete_state_stream` argument is a Python `bool` which specifies that\nthe projection's \"state\" stream should also be deleted. The \"state\" stream is like\nthe \"result\" stream, but events are written to the \"state\" stream occasionally, along\nwith events written to the \"checkpoint\" stream, rather than being written immediately\nin the way a call `outputState()` immediately writes events to the \"result\" stream.\n\nThe optional `delete_checkpoint_stream` argument is a Python `bool` which specifies\nthat the projection's \"checkpoint\" stream should also be deleted.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nclient.delete_projection(name=projection_name)\n```\n\nPlease note, a projection must be disabled before it can be deleted.\n\n### Restart projections subsystem<a id=\"restart-projections-subsystem\"></a>\n\n*requires leader*\n\nThe `restart_projections_subsystem()` method can be used to restart the projections subsystem.\n\nThis method also has two optional arguments, `timeout` and `credentials`.\n\nThe optional `timeout` argument is a Python `float` which sets a\nmaximum duration, in seconds, for the completion of the gRPC operation.\n\nThe optional `credentials` argument can be used to\noverride call credentials derived from the connection string URI.\n\n```python\nclient.restart_projections_subsystem()\n```\n\n\n## Call credentials<a id=\"call-credentials\"></a>\n\nDefault call credentials are derived by the client from the user info part of the\nconnection string URI.\n\nMany of the client methods described above have an optional `credentials` argument,\nwhich can be used to set call credentials for an individual method call that override\nthose derived from the connection string URI.\n\nCall credentials are sent to \"secure\" servers in a \"basic auth\" authorization header.\nThis authorization header is used by the server to authenticate the client. The\nauthorization header is not sent to \"insecure\" servers.\n\n\n### Construct call credentials<a id=\"construct-call-credentials\"></a>\n\nThe client method `construct_call_credentials()` can be used to construct a call\ncredentials object from a username and password.\n\n```python\ncall_credentials = client.construct_call_credentials(\n    username='admin', password='changeit'\n)\n```\n\nThe call credentials object can be used as the value of the `credentials`\nargument in other client methods.\n\n## Connection<a id=\"connection\"></a>\n\n### Reconnect<a id=\"reconnect\"></a>\n\nThe `reconnect()` method can be used to manually reconnect the client to a\nsuitable EventStoreDB node. This method uses the same routine for reading the\ncluster node states and then connecting to a suitable node according to the\nclient's node preference that is specified in the connection string URI when\nthe client is constructed. This method is thread-safe, in that when it is called\nby several threads at the same time, only one reconnection will occur. Concurrent\nattempts to reconnect will block until the client has reconnected successfully,\nand then they will all return normally.\n\n```python\nclient.reconnect()\n```\n\nAn example of when it might be desirable to reconnect manually is when (for performance\nreasons) the client's node preference is to be connected to a follower node in the\ncluster, and, after a cluster leader election, the follower becomes the leader.\nReconnecting to a follower node in this case is currently beyond the capabilities of\nthis client, but this behavior might be implemented in a future release.\n\nReconnection will happen automatically in many cases, due to the `@autoreconnect`\ndecorator.\n\n### Close<a id=\"close\"></a>\n\nThe `close()` method can be used to cleanly close the client's gRPC connection.\n\n```python\nclient.close()\n```\n\n\n## Asyncio client<a id=\"asyncio-client\"></a>\n\nThe `esdbclient` package also provides an asynchronous I/O gRPC Python client for\nEventStoreDB. It is functionally equivalent to the multithreaded client. It uses\nthe `grpc.aio` package and the `asyncio` module, instead of `grpc` and `threading`.\n\nIt supports both the \"esdb\" and the \"esdb+discover\" connection string URI schemes,\nand can connect to both \"secure\" and \"insecure\" EventStoreDB servers.\n\nThe class `AsyncEventStoreDBClient` can be used to construct an instance of the\nasynchronous I/O gRPC Python client. It can be imported from `esdbclient`. The\nasync method `connect()` should be called after constructing the client.\n\nThe asyncio client has exactly the same methods as the multithreaded `EventStoreDBClient`.\nThese methods are defined as `async def` methods, and so calls to these methods will\nreturn Python \"awaitables\" that must be awaited to obtain the method return values.\nThe methods have the same behaviors, the same arguments and the same or equivalent\nreturn values. The methods are similarly decorated with reconnect and retry decorators,\nthat selectively reconnect and retry when connection issues or server errors are\nencountered.\n\nWhen awaited, the methods `read_all()` and `read_stream()` return an `AsyncReadResponse`\nobject. The methods `subscribe_to_all()` and `subscribe_to_stream()` return an\n`AsyncCatchupSubscription` object. The methods `read_subscription_to_all()` and\n`read_subscription_to_stream()` return an `AsyncPersistentSubscription` object.\nThese objects are asyncio iterables, which you can iterate over with Python's `async for`\nsyntax to obtain `RecordedEvent` objects. They are also asyncio context managers,\nsupporting the `async with` syntax. They also have a `stop()` method which can be\nused to terminate the iterator in a way that actively cancels the streaming gRPC call\nto the server. When used as a context manager, the `stop()` method will be called when\nthe context manager exits.\n\nThe methods `read_subscription_to_all()` and `read_subscription_to_stream()` return\ninstances of the class `AsyncPersistentSubscription`, which has async methods `ack()`,\n`nack()` that work in the same way as the methods on `PersistentSubscription`,\nsupporting the acknowledgement and negative acknowledgement of recorded events that\nhave been received from a persistent subscription. See above for details.\n\n### Synopsis<a id=\"synopsis-1\"></a>\n\nThe example below demonstrates the async `append_to_stream()`, `get_stream()` and\n`subscribe_to_all()` methods. These are the most useful methods for writing\nan event-sourced application, allowing new aggregate events to be recorded, the\nrecorded events of an aggregate to be obtained so aggregates can be reconstructed,\nand the state of an application to propagated and processed with \"exactly-once\"\nsemantics.\n\n```python\nimport asyncio\n\nfrom esdbclient import AsyncEventStoreDBClient\n\n\nasync def demonstrate_async_client():\n\n    # Construct client.\n    client = AsyncEventStoreDBClient(\n        uri=os.getenv(\"ESDB_URI\"),\n        root_certificates=os.getenv(\"ESDB_ROOT_CERTIFICATES\"),\n    )\n\n    # Connect to EventStoreDB.\n    await client.connect()\n\n    # Append events.\n    stream_name = str(uuid.uuid4())\n    event1 = NewEvent(\"OrderCreated\", data=b'{}')\n    event2 = NewEvent(\"OrderUpdated\", data=b'{}')\n    event3 = NewEvent(\"OrderDeleted\", data=b'{}')\n\n    commit_position = await client.append_to_stream(\n        stream_name=stream_name,\n        current_version=StreamState.NO_STREAM,\n        events=[event1, event2, event3]\n    )\n\n    # Get stream events.\n    recorded = await client.get_stream(stream_name)\n    assert len(recorded) == 3\n    assert recorded[0] == event1\n    assert recorded[1] == event2\n    assert recorded[2] == event3\n\n\n    # Subscribe to all events.\n    received = []\n    async with await client.subscribe_to_all(commit_position=0) as subscription:\n        async for event in subscription:\n            received.append(event)\n            if event.commit_position == commit_position:\n                break\n    assert received[-3] == event1\n    assert received[-2] == event2\n    assert received[-1] == event3\n\n\n    # Close the client.\n    await client.close()\n\n\n# Run the demo.\nasyncio.run(\n    demonstrate_async_client()\n)\n```\n\n### FastAPI example<a id=\"fastapi\"></a>\n\nThe example below shows how to use `AsyncEventStoreDBClient` with [FastAPI](https://fastapi.tiangolo.com).\n\n```python\nfrom contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\n\nfrom esdbclient import AsyncEventStoreDBClient\n\n\nclient: AsyncEventStoreDBClient\n\n\n@asynccontextmanager\nasync def lifespan(_: FastAPI):\n    # Construct the client.\n    global client\n    client = AsyncEventStoreDBClient(\n        uri=\"esdb+discover://localhost:2113?Tls=false\",\n    )\n    await client.connect()\n\n    yield\n\n    # Close the client.\n    await client.close()\n\n\napp = FastAPI(lifespan=lifespan)\n\n\n@app.get(\"/commit_position\")\nasync def commit_position():\n    commit_position = await client.get_commit_position()\n    return {\"commit_position\": commit_position}\n```\n\nIf you put this code in a file called `fastapi_example.py` and then run command\n`uvicorn fastapi_example:app --host 0.0.0.0 --port 80`, then the FastAPI application\nwill return something like `{\"commit_position\":628917}` when a browser is pointed\nto `http://localhost/commit_position`. Use Ctrl-c to exit the process.\n\n## Notes<a id=\"notes\"></a>\n\n### Regular expression filters<a id=\"regular-expression-filters\"></a>\n\nThe `read_all()`, `subscribe_to_all()`, `create_subscription_to_all()`\nand `get_commit_position()` methods have `filter_exclude` and `filter_include`\narguments. This section provides some more details about the values of these\narguments.\n\nThe first thing to note is that the values of these arguments should be sequences\nof regular expressions.\n\nPlease note, they are concatenated together by the client as bracketed alternatives in a larger\nregular expression that is anchored to the start and end of the strings being\nmatched. So there is no need to include the `'^'` and `'$'` anchor assertions.\n\nYou should use wildcards if you want to match substrings, for example `'.*Snapshot'`\nto match all strings that end with `'Snapshot`', or `'Order.*'` to match all strings\nthat start with `'Order'`.\n\nSystem events generated by EventStoreDB have `type` strings that start with\nthe `$` sign. Persistence subscription events generated when manipulating\npersistence subscriptions have `type` strings that start with `PersistentConfig`.\n\nFor example, to match the type of EventStoreDB system events, use the regular\nexpression string `r'\\$.+'`. Please note, the constant `ESDB_SYSTEM_EVENTS_REGEX` is\nset to this value. You can import this constant from `esdbclient` and use it when\nbuilding longer sequences of regular expressions.\n\nSimilarly, to match the type of EventStoreDB persistence subscription events, use the\nregular expression `r'PersistentConfig\\d+'`. The constant `ESDB_PERSISTENT_CONFIG_EVENTS_REGEX`\nis set to this value. You can import this constant from `esdbclient` and use it when\nbuilding longer sequences of regular expressions.\n\nThe constant `DEFAULT_EXCLUDE_FILTER` is a sequence of regular expressions that includes\nboth `ESDB_SYSTEM_EVENTS_REGEX` and `ESDB_PERSISTENT_CONFIG_EVENTS_REGEX`. It is used\nas the default value of `filter_exclude` so that the events generated internally by\nEventStoreDB are excluded by default.\n\nIn all methods that have a `filter_exclude` argument, the default value of the argument\nis the constant `DEFAULT_EXCLUDE_FILTER`, which is designed to match (and therefore\nto exclude) both \"system\" and \"persistence subscription config\" event types, which\nwould otherwise be included.\n\nThis value can be extended. For example, if you want to exclude system events and\npersistent subscription events and also events that have a type that ends with\n`'Snapshot'`, then you can use `DEFAULT_EXCLUDE_FILTER + ['.*Snapshot']` as the\n`filter_exclude` argument.\n\nThe `filter_include` and `filter_exclude` arguments are designed to have exactly\nthe opposite effect from each other, so that a sequence of strings given to\n`filter_include` will return exactly those events which would be excluded if\nthe same argument value were used with `filter_exclude`. And vice versa, so that\na sequence of strings given to `filter_exclude` will return exactly those events\nthat would not be included if the same argument value were used with `filter_include`.\n\n\n### Reconnect and retry method decorators<a id=\"reconnect-and-retry-method-decorators\"></a>\n\nPlease note, nearly all the client methods are decorated with the `@autoreconnect` and\nthe `@retrygrpc` decorators.\n\nThe `@autoreconnect` decorator will reconnect to a suitable node in the cluster when\nthe server to which the client has been connected has become unavailable, or when the\nclient's gRPC channel happens to have been closed. The client will also reconnect when\na method is called that requires a leader, and the client's node preference is to be\nconnected to a leader, but the node that the client has been connected to stops being\nthe leader. In this case, the client will reconnect to the current leader. After\nreconnecting, the failed operation will be retried.\n\nThe `@retrygrpc` decorator selectively retries gRPC operations that have failed due to\na timeout, network error, or server error. It doesn't retry operations that fail due to\nbad requests that will certainly fail again.\n\nPlease also note, the aspects not covered by the reconnect and retry decorator\nbehaviours have to do with methods that return iterators. For example, consider\nthe \"read response\" iterator returned from the `read_all()` method. The\n`read_all()` method will have returned, and the method decorators will therefore\nhave exited, before iterating over the \"read response\" begins. Therefore, if a\nconnection issue occurs whilst iterating over the \"read response\", it isn't possible\nfor any decorator on the `read_all()` method to trigger a reconnection.\n\nWith the \"catch-up subscription\" objects, there is an initial \"confirmation\" response\nfrom the server which is received and checked by the client. And so, when a call is\nmade to `subscribe_to_all()` or `subscribe_to_stream()`, if the server is unavailable,\nor if the channel has somehow been closed, or if the request fails for some other reason,\nthen the client will reconnect and retry. However, if an exception is raised when iterating over a\nsuccessfully returned \"catch-up subscription\" object, the catch-up subscription will\nneed to be restarted. Similarly, when reading persistent subscriptions, if there are\nconnection issues whilst iterating over a successfully received response, the consumer\nwill need to be restarted.\n\n## Instrumentation<a id=\"instrumentation\"></a>\n\nInstrumentation is the act of modifying software so that analysis can be performed on it.\nInstrumentation helps enterprises reveal areas or features where users frequently\nencounter errors or slowdowns in their software or platform.\n\nInstrumentation helps you understand the inner state of your software systems.\nInstrumented applications measure what code is doing when it responds to active\nrequests by collecting data such as metrics, events, logs, and traces.\n\nInstrumentation provides immediate visibility into your application, often using\ncharts and graphs to illustrate what is going on “under the hood.”\n\nThis package supports instrumenting the EventStoreDB clients with OpenTelemetry.\n\n### OpenTelemetry<a id=\"open-telemetry\"></a>\n\nThe [OpenTelemetry](https://opentelemetry.io) project provides a collection of APIs,\nSDKs, and tools for instrumenting, generating, collecting, and exporting telemetry data,\nthat can help you analyze your software’s performance and behavior. It is vendor-neutral,\n100% Free and Open Source, and adopted and supported by industry leaders in the\nobservability space.\n\nThis package provides OpenTelemetry instrumentors for both the `EventStoreDBClient`\nand the `AsyncEventStoreDBClient` clients. These instrumentors depend on various\nOpenTelemetry Python packages, which you will need to install, preferably with this\nproject's \"opentelemetry\" package extra to ensure verified version compatibility.\n\nFor example, you can install the \"opentelemetry\" package extra with pip.\n\n    $ pip install esdbclient[opentelemetry]\n\nOr you can use Poetry to add it to your pyproject.toml file and install it.\n\n    $ poetry add esdbclient[opentelemetry]\n\n\nYou can then use the OpenTelemetry instrumentor `EventStoreDBClientInstrumentor` to\ninstrument the `EventStoreDBClient`.\n\n```python\nfrom esdbclient.instrumentation.opentelemetry import EventStoreDBClientInstrumentor\n\n# Activate instrumentation.\nEventStoreDBClientInstrumentor().instrument()\n\n# Deactivate instrumentation.\nEventStoreDBClientInstrumentor().uninstrument()\n```\n\nYou can also use the OpenTelemetry instrumentor `AsyncEventStoreDBClientInstrumentor`\nto instrument the `AsyncEventStoreDBClient`.\n\n```python\nfrom esdbclient.instrumentation.opentelemetry import AsyncEventStoreDBClientInstrumentor\n\n# Activate instrumentation.\nAsyncEventStoreDBClientInstrumentor().instrument()\n\n# Deactivate instrumentation.\nAsyncEventStoreDBClientInstrumentor().uninstrument()\n```\n\nThe instrumentors use a global OpenTelemetry \"tracer provider\", which you will need to\ninitialise in order to export telemetry data.\n\nFor example, to export data to the console you will need to install the Python\npackage `opentelemetry-sdk`, and use the class `TracerProvider`, `BatchSpanProcessor`,\nand `ConsoleSpanExporter` in the following way.\n\n```python\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\nfrom opentelemetry.trace import set_tracer_provider\n\nresource = Resource.create(\n    attributes={\n        SERVICE_NAME: \"eventstoredb\",\n    }\n)\nprovider = TracerProvider(resource=resource)\nprovider.add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\nset_tracer_provider(provider)\n```\n\nOr to export to an OpenTelemetry compatible data collector, such as\n[Jaeger](https://www.jaegertracing.io), you will need to install the Python package\n`opentelemetry-exporter-otlp-proto-http`, and then use the class `OTLPSpanExporter`\nfrom the `opentelemetry.exporter.otlp.proto.http.trace_exporter` module, with an\nappropriate `endpoint` argument for your collector.\n\n```python\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.trace import set_tracer_provider\n\nresource = Resource.create(\n    attributes={\n        SERVICE_NAME: \"eventstoredb\",\n    }\n)\nprovider = TracerProvider(resource=resource)\nprovider.add_span_processor(BatchSpanProcessor(OTLPSpanExporter(endpoint=\"http://localhost:4318/v1/traces\")))\nset_tracer_provider(provider)\n```\n\nYou can start Jaeger locally by running the following command.\n\n    $ docker run -d -p 4318:4318 -p 16686:16686 --name jaeger jaegertracing/all-in-one:latest\n\nYou can then navigate to `http://localhost:16686` to access the Jaeger UI. And telemetry\ndata can be sent by an OpenTelemetry tracer provider to `http://localhost:4318/v1/traces`.\n\nAt this time, the instrumented methods are `append_to_stream()`, `subscribe_to_stream()`\n`subscribe_to_all()`, `read_subscription_to_stream()`, `read_subscription_to_all()`.\n\nThe `append_to_stream()` method is instrumented by spanning the method call with a\n\"producer\" span kind. It also adds span context information to the new event metadata\nso that consumers can associate \"consumer\" spans with the \"producer\" span.\n\nThe subscription methods are instrumented by instrumenting the response iterators,\ncreating a \"consumer\" span for each recorded event received. It extracts span\ncontext information from the recorded event metadata and associates the \"consumer\"\nspans with a \"producer\" span, by making the \"consumer\" span a child of the \"producer\"\nspan.\n\n\n## Communities<a id=\"communities\"></a>\n\n- [Issues](https://github.com/pyeventsourcing/esdbclient/issues)\n- [Discuss](https://discuss.eventstore.com/)\n- [Discord (Event Store)](https://discord.gg/Phn9pmCw3t)\n\n\n## Contributors<a id=\"contributors\"></a>\n\n### Install Poetry<a id=\"install-poetry\"></a>\n\nThe first thing is to check you have Poetry installed.\n\n    $ poetry --version\n\nIf you don't, then please [install Poetry](https://python-poetry.org/docs/#installing-with-the-official-installer).\n\n    $ curl -sSL https://install.python-poetry.org | python3 -\n\nIt will help to make sure Poetry's bin directory is in your `PATH` environment variable.\n\nBut in any case, make sure you know the path to the `poetry` executable. The Poetry\ninstaller tells you where it has been installed, and how to configure your shell.\n\nPlease refer to the [Poetry docs](https://python-poetry.org/docs/) for guidance on\nusing Poetry.\n\n### Setup for PyCharm users<a id=\"setup-for-pycharm-users\"></a>\n\nYou can easily obtain the project files using PyCharm (menu \"Git > Clone...\").\nPyCharm will then usually prompt you to open the project.\n\nOpen the project in a new window. PyCharm will then usually prompt you to create\na new virtual environment.\n\nCreate a new Poetry virtual environment for the project. If PyCharm doesn't already\nknow where your `poetry` executable is, then set the path to your `poetry` executable\nin the \"New Poetry Environment\" form input field labelled \"Poetry executable\". In the\n\"New Poetry Environment\" form, you will also have the opportunity to select which\nPython executable will be used by the virtual environment.\n\nPyCharm will then create a new Poetry virtual environment for your project, using\na particular version of Python, and also install into this virtual environment the\nproject's package dependencies according to the project's `poetry.lock` file.\n\nYou can add different Poetry environments for different Python versions, and switch\nbetween them using the \"Python Interpreter\" settings of PyCharm. If you want to use\na version of Python that isn't installed, either use your favourite package manager,\nor install Python by downloading an installer for recent versions of Python directly\nfrom the [Python website](https://www.python.org/downloads/).\n\nOnce project dependencies have been installed, you should be able to run tests\nfrom within PyCharm (right-click on the `tests` folder and select the 'Run' option).\n\nBecause of a conflict between pytest and PyCharm's debugger and the coverage tool,\nyou may need to add ``--no-cov`` as an option to the test runner template. Alternatively,\njust use the Python Standard Library's ``unittest`` module.\n\nYou should also be able to open a terminal window in PyCharm, and run the project's\nMakefile commands from the command line (see below).\n\n### Setup from command line<a id=\"setup-from-command-line\"></a>\n\nObtain the project files, using Git or suitable alternative.\n\nIn a terminal application, change your current working directory\nto the root folder of the project files. There should be a Makefile\nin this folder.\n\nUse the Makefile to create a new Poetry virtual environment for the\nproject and install the project's package dependencies into it,\nusing the following command.\n\n    $ make install-packages\n\nIt's also possible to also install the project in 'editable mode'.\n\n    $ make install\n\nPlease note, if you create the virtual environment in this way, and then try to\nopen the project in PyCharm and configure the project to use this virtual\nenvironment as an \"Existing Poetry Environment\", PyCharm sometimes has some\nissues (don't know why) which might be problematic. If you encounter such\nissues, you can resolve these issues by deleting the virtual environment\nand creating the Poetry virtual environment using PyCharm (see above).\n\n### Project Makefile commands<a id=\"project-makefile-commands\"></a>\n\nYou can start EventStoreDB using the following command.\n\n    $ make start-eventstoredb\n\nYou can run tests using the following command (needs EventStoreDB to be running).\n\n    $ make test\n\nYou can stop EventStoreDB using the following command.\n\n    $ make stop-eventstoredb\n\nYou can check the formatting of the code using the following command.\n\n    $ make lint\n\nYou can reformat the code using the following command.\n\n    $ make fmt\n\nTests belong in `./tests`. Code-under-test belongs in `./esdbclient`.\n\nEdit package dependencies in `pyproject.toml`. Update installed packages (and the\n`poetry.lock` file) using the following command.\n\n    $ make update-packages\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/pyeventsourcing/esdbclient","keywords":null,"license":"BSD 3-Clause","license_expression":null,"license_files":null,"maintainer":null,"maintainer_email":null,"name":"esdbclient","package_url":"https://pypi.org/project/esdbclient/","platform":null,"project_url":"https://pypi.org/project/esdbclient/","project_urls":{"Homepage":"https://github.com/pyeventsourcing/esdbclient","Repository":"https://github.com/pyeventsourcing/esdbclient"},"provides_extra":null,"release_url":"https://pypi.org/project/esdbclient/1.1.4/","requires_dist":["grpcio!=1.52.*,<1.69,>=1.51.0","protobuf>=3.11.0","typing_extensions","opentelemetry-api<2.0.0,>=1.28.0; extra == \"opentelemetry\"","opentelemetry-instrumentation<0.50,>=0.49b0; extra == \"opentelemetry\"","opentelemetry-semantic-conventions<0.50,>=0.49b0; extra == \"opentelemetry\""],"requires_python":"<4.0,>=3.8","summary":"Python gRPC Client for EventStoreDB","version":"1.1.4","yanked":false,"yanked_reason":null},"last_serial":26067345,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"001d6b10ea20615d62b580dac7a717730514880c69999a27000f770d845e7ae8","md5":"6b89dc979b90ec57ea01a95c0d7cb200","sha256":"ef2cdf125d9c8cb1502c443084397beffe22494ab4870fe873f4d512c4782682"},"downloads":-1,"filename":"esdbclient-0.1-py3-none-any.whl","has_sig":false,"md5_digest":"6b89dc979b90ec57ea01a95c0d7cb200","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":30121,"upload_time":"2022-05-22T21:17:27","upload_time_iso_8601":"2022-05-22T21:17:27.643486Z","url":"https://files.pythonhosted.org/packages/00/1d/6b10ea20615d62b580dac7a717730514880c69999a27000f770d845e7ae8/esdbclient-0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4af6f9adb473c0d165695213990890159695e2c914df36d38f067570811f4e3c","md5":"ff7f97dd7fec42ad855767c39e4ac4ba","sha256":"e4cadb31fd781f8f1e9c165f663cba4aa64da1058a0b2e8e5e5683613e6364e0"},"downloads":-1,"filename":"esdbclient-0.1.tar.gz","has_sig":false,"md5_digest":"ff7f97dd7fec42ad855767c39e4ac4ba","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":28902,"upload_time":"2022-05-22T21:17:29","upload_time_iso_8601":"2022-05-22T21:17:29.790482Z","url":"https://files.pythonhosted.org/packages/4a/f6/f9adb473c0d165695213990890159695e2c914df36d38f067570811f4e3c/esdbclient-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.10":[{"comment_text":"","digests":{"blake2b_256":"0ddf046ce79df8c5658c577c8d3fd5ae8c68e3ed4b214c406be02e82883e87fd","md5":"c0025fc3eb7acfe7f0038092e4dfb26e","sha256":"52b5857db8686730d6bee9635fd501ece7a72e135639a65592b2b505f1d29ea6"},"downloads":-1,"filename":"esdbclient-0.10-py3-none-any.whl","has_sig":false,"md5_digest":"c0025fc3eb7acfe7f0038092e4dfb26e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":59975,"upload_time":"2023-02-14T13:40:11","upload_time_iso_8601":"2023-02-14T13:40:11.532633Z","url":"https://files.pythonhosted.org/packages/0d/df/046ce79df8c5658c577c8d3fd5ae8c68e3ed4b214c406be02e82883e87fd/esdbclient-0.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"98f96276ff57697ce1029089ce2cf0ecb9db00226b87ae6481da1547b2b8b4be","md5":"064b865c5b8b3f82ca6679c2d9f536a9","sha256":"0294a9832a1cccc2cfef7a17f11a8917e89fdae6ab1dafe4c2903feaf34af37b"},"downloads":-1,"filename":"esdbclient-0.10.tar.gz","has_sig":false,"md5_digest":"064b865c5b8b3f82ca6679c2d9f536a9","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":81452,"upload_time":"2023-02-14T13:40:13","upload_time_iso_8601":"2023-02-14T13:40:13.375501Z","url":"https://files.pythonhosted.org/packages/98/f9/6276ff57697ce1029089ce2cf0ecb9db00226b87ae6481da1547b2b8b4be/esdbclient-0.10.tar.gz","yanked":false,"yanked_reason":null}],"0.11":[{"comment_text":"","digests":{"blake2b_256":"d0136b77f028c562e5f3c816796e7be0e0fa34003241a5681df46ac4bd8031e6","md5":"cb1871cff32c5b0d9bb02935c4022c1d","sha256":"35a7e7b19c26726886d0bf42e944714c6fcd70a1c1235b4d8995a691b97097cb"},"downloads":-1,"filename":"esdbclient-0.11-py3-none-any.whl","has_sig":false,"md5_digest":"cb1871cff32c5b0d9bb02935c4022c1d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":61362,"upload_time":"2023-04-21T15:22:10","upload_time_iso_8601":"2023-04-21T15:22:10.183654Z","url":"https://files.pythonhosted.org/packages/d0/13/6b77f028c562e5f3c816796e7be0e0fa34003241a5681df46ac4bd8031e6/esdbclient-0.11-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"03f944c0ab931b4f7957775c8189734192492aac7b399f4ea98dd64730a8d2c2","md5":"02f2b21ead69a76e366c378f6f1ed6f1","sha256":"da468b7b2020dff88756bb7566dd734e5002af8bd2ee4f6ddf47d9084d10784e"},"downloads":-1,"filename":"esdbclient-0.11.tar.gz","has_sig":false,"md5_digest":"02f2b21ead69a76e366c378f6f1ed6f1","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":83339,"upload_time":"2023-04-21T15:22:12","upload_time_iso_8601":"2023-04-21T15:22:12.496867Z","url":"https://files.pythonhosted.org/packages/03/f9/44c0ab931b4f7957775c8189734192492aac7b399f4ea98dd64730a8d2c2/esdbclient-0.11.tar.gz","yanked":false,"yanked_reason":null}],"0.12":[{"comment_text":"","digests":{"blake2b_256":"59cf0f2b50e34167d58a903cd9251917bea9f5570772bde62dc3d2d9af33d9c8","md5":"a4c86ac2556a3e4de7cd8c5263072428","sha256":"8dd13e92b5e02580effd201f980d546f4efab3dca9b1cf8eefc8d13cc382dc95"},"downloads":-1,"filename":"esdbclient-0.12-py3-none-any.whl","has_sig":false,"md5_digest":"a4c86ac2556a3e4de7cd8c5263072428","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":79321,"upload_time":"2023-05-04T19:36:04","upload_time_iso_8601":"2023-05-04T19:36:04.510589Z","url":"https://files.pythonhosted.org/packages/59/cf/0f2b50e34167d58a903cd9251917bea9f5570772bde62dc3d2d9af33d9c8/esdbclient-0.12-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fbb848e3ba01e34c7df28dd0c627add943b3f81b405859bad3d253d8a6e9e428","md5":"67469f138d1b7fdc5792db9e52bd2329","sha256":"371634df82c77f411bdc1f21fbc8d4eb1557048522d4887780d54a89b5db995d"},"downloads":-1,"filename":"esdbclient-0.12.tar.gz","has_sig":false,"md5_digest":"67469f138d1b7fdc5792db9e52bd2329","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":102351,"upload_time":"2023-05-04T19:36:08","upload_time_iso_8601":"2023-05-04T19:36:08.870593Z","url":"https://files.pythonhosted.org/packages/fb/b8/48e3ba01e34c7df28dd0c627add943b3f81b405859bad3d253d8a6e9e428/esdbclient-0.12.tar.gz","yanked":false,"yanked_reason":null}],"0.13":[{"comment_text":"","digests":{"blake2b_256":"dfcbf64c1773f45e742364d329697c4e15f16ae57349b56ea46360a9fe5e8629","md5":"e58338e3dff050bc870ca539d974005c","sha256":"f27a349c4b672970fcf9f60393d84e5083e3d304382d03e9eb4c4b88c5f4cafa"},"downloads":-1,"filename":"esdbclient-0.13-py3-none-any.whl","has_sig":false,"md5_digest":"e58338e3dff050bc870ca539d974005c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":83636,"upload_time":"2023-05-06T02:07:43","upload_time_iso_8601":"2023-05-06T02:07:43.438665Z","url":"https://files.pythonhosted.org/packages/df/cb/f64c1773f45e742364d329697c4e15f16ae57349b56ea46360a9fe5e8629/esdbclient-0.13-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"af5eae1268031fbbc2effd38870d28e2e228471453aa215c691f3ed4168d2da1","md5":"e7ac0b27cc98b37c3aca687bd1c286f2","sha256":"172ba71b1781820d7300912e24c40eebbc2f230b5a9b29a6da0a7f0ab6c1e03c"},"downloads":-1,"filename":"esdbclient-0.13.tar.gz","has_sig":false,"md5_digest":"e7ac0b27cc98b37c3aca687bd1c286f2","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":109901,"upload_time":"2023-05-06T02:07:46","upload_time_iso_8601":"2023-05-06T02:07:46.166301Z","url":"https://files.pythonhosted.org/packages/af/5e/ae1268031fbbc2effd38870d28e2e228471453aa215c691f3ed4168d2da1/esdbclient-0.13.tar.gz","yanked":false,"yanked_reason":null}],"0.14":[{"comment_text":"","digests":{"blake2b_256":"7fe8d2d50302d70e61f03273f54e79ae0fb7a84fb83996db1fe00283320d102f","md5":"4ac40610b0779e88e956db01fba6e1f5","sha256":"e3df5cfe0d46f61d9763176b9177b520c6314ac3825ad54ee9b5bdab820dab9c"},"downloads":-1,"filename":"esdbclient-0.14-py3-none-any.whl","has_sig":false,"md5_digest":"4ac40610b0779e88e956db01fba6e1f5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":98290,"upload_time":"2023-05-16T19:11:14","upload_time_iso_8601":"2023-05-16T19:11:14.037884Z","url":"https://files.pythonhosted.org/packages/7f/e8/d2d50302d70e61f03273f54e79ae0fb7a84fb83996db1fe00283320d102f/esdbclient-0.14-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6503c000cc0c807b2669c4c51240402d982aa26637127db83a89f138c7ed63f1","md5":"9fa71f326f44fde99af35d1c097285b9","sha256":"7a2f4573daf6c5f02b0c59dd2024fdb390ca6c66a24d9dee40dc39673925cf40"},"downloads":-1,"filename":"esdbclient-0.14.tar.gz","has_sig":false,"md5_digest":"9fa71f326f44fde99af35d1c097285b9","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":132605,"upload_time":"2023-05-16T19:11:16","upload_time_iso_8601":"2023-05-16T19:11:16.569325Z","url":"https://files.pythonhosted.org/packages/65/03/c000cc0c807b2669c4c51240402d982aa26637127db83a89f138c7ed63f1/esdbclient-0.14.tar.gz","yanked":false,"yanked_reason":null}],"0.15":[{"comment_text":"","digests":{"blake2b_256":"79960891f03761b61f4abe258636a3d126b4f43618de78657b8a86ea53237f22","md5":"133f038bfaa9cde6a0c24492e0c528db","sha256":"ba13d625d460992ea14a6f7b17f43dbab362b910cdc127125f7c63e6ff34fd59"},"downloads":-1,"filename":"esdbclient-0.15-py3-none-any.whl","has_sig":false,"md5_digest":"133f038bfaa9cde6a0c24492e0c528db","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":102500,"upload_time":"2023-06-02T23:10:00","upload_time_iso_8601":"2023-06-02T23:10:00.905509Z","url":"https://files.pythonhosted.org/packages/79/96/0891f03761b61f4abe258636a3d126b4f43618de78657b8a86ea53237f22/esdbclient-0.15-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"558f5370f95a091cb40c927d323b5765dfae829555767cbf8ae6c1d509bb3acc","md5":"dc1967f9fd3a116695ade6d5df5a5388","sha256":"e9d88374922a6f49decb50d8c2e84a758edee42ab3069a20839d2282486a6eb1"},"downloads":-1,"filename":"esdbclient-0.15.tar.gz","has_sig":false,"md5_digest":"dc1967f9fd3a116695ade6d5df5a5388","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":139757,"upload_time":"2023-06-02T23:10:04","upload_time_iso_8601":"2023-06-02T23:10:04.130818Z","url":"https://files.pythonhosted.org/packages/55/8f/5370f95a091cb40c927d323b5765dfae829555767cbf8ae6c1d509bb3acc/esdbclient-0.15.tar.gz","yanked":false,"yanked_reason":null}],"0.16":[{"comment_text":"","digests":{"blake2b_256":"9b974e3bcde58597074d7c7015c2562cf935b9920896c2363b6add4535cb5a66","md5":"3bda7120dd492cdf5d0fe455be223912","sha256":"bdba577c4bddad432d90b9e510120c86a1fdf153facaee0fafb8560a4cb9e188"},"downloads":-1,"filename":"esdbclient-0.16-py3-none-any.whl","has_sig":false,"md5_digest":"3bda7120dd492cdf5d0fe455be223912","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":102849,"upload_time":"2023-08-11T12:22:15","upload_time_iso_8601":"2023-08-11T12:22:15.257830Z","url":"https://files.pythonhosted.org/packages/9b/97/4e3bcde58597074d7c7015c2562cf935b9920896c2363b6add4535cb5a66/esdbclient-0.16-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3073720162739c9d1fe280f877af1dace695258ea882af5caf59141ce34437fa","md5":"bc92de0817f4564f808f865718bc40dd","sha256":"df8c122c62f77e6ac688c5a53370cdd682ebb494251b36c6eeffbb9ff19245d5"},"downloads":-1,"filename":"esdbclient-0.16.tar.gz","has_sig":false,"md5_digest":"bc92de0817f4564f808f865718bc40dd","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":140724,"upload_time":"2023-08-11T12:22:17","upload_time_iso_8601":"2023-08-11T12:22:17.456461Z","url":"https://files.pythonhosted.org/packages/30/73/720162739c9d1fe280f877af1dace695258ea882af5caf59141ce34437fa/esdbclient-0.16.tar.gz","yanked":false,"yanked_reason":null}],"0.17":[{"comment_text":"","digests":{"blake2b_256":"f4ebecdbd04bba0e6978bc381d9adde9fecbe1412304fd80247ff355a746611d","md5":"0b7cd7839d56f1704497efafc1c9bccd","sha256":"08f4cb37b064d357850d54015352d45187f4d0adde696754d5f3ff0be5a2fc62"},"downloads":-1,"filename":"esdbclient-0.17-py3-none-any.whl","has_sig":false,"md5_digest":"0b7cd7839d56f1704497efafc1c9bccd","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":103259,"upload_time":"2023-10-12T18:52:57","upload_time_iso_8601":"2023-10-12T18:52:57.912064Z","url":"https://files.pythonhosted.org/packages/f4/eb/ecdbd04bba0e6978bc381d9adde9fecbe1412304fd80247ff355a746611d/esdbclient-0.17-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1e6e67bb41baa1c32c49c9f897cab45eda4feaef57e61c31306c308e57512689","md5":"03ebfd59b88394fb400c774037206cfd","sha256":"c23af403a605360b5f337ddc06623a5e880e0b1a7518ad78da7e2c308ff6e040"},"downloads":-1,"filename":"esdbclient-0.17.tar.gz","has_sig":false,"md5_digest":"03ebfd59b88394fb400c774037206cfd","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":141109,"upload_time":"2023-10-12T18:53:00","upload_time_iso_8601":"2023-10-12T18:53:00.867464Z","url":"https://files.pythonhosted.org/packages/1e/6e/67bb41baa1c32c49c9f897cab45eda4feaef57e61c31306c308e57512689/esdbclient-0.17.tar.gz","yanked":false,"yanked_reason":null}],"0.18":[{"comment_text":"","digests":{"blake2b_256":"c1ac57b6b54d297035d4c410e0a9b147f5fd791538cab3177b8d271b1732e038","md5":"16cf66ce702a1e665a98c6f21d3fbb27","sha256":"0016a93e20eaf16b6671fb472d1d0d59b8558d08e6ac6099939e3f5e8da56ef4"},"downloads":-1,"filename":"esdbclient-0.18-py3-none-any.whl","has_sig":false,"md5_digest":"16cf66ce702a1e665a98c6f21d3fbb27","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":103541,"upload_time":"2023-10-12T19:29:28","upload_time_iso_8601":"2023-10-12T19:29:28.595727Z","url":"https://files.pythonhosted.org/packages/c1/ac/57b6b54d297035d4c410e0a9b147f5fd791538cab3177b8d271b1732e038/esdbclient-0.18-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9c5e9a55a4a3d00adc28b5da19efb2f6d4cfe523162657792596abd749f5c895","md5":"a6647e681a4fccd2bb5e2c335be67f65","sha256":"9b0de7713cceb32f1433a34debbb5415c40d4b37df2aa6ac31a14d6b606c7147"},"downloads":-1,"filename":"esdbclient-0.18.tar.gz","has_sig":false,"md5_digest":"a6647e681a4fccd2bb5e2c335be67f65","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":141455,"upload_time":"2023-10-12T19:29:30","upload_time_iso_8601":"2023-10-12T19:29:30.932329Z","url":"https://files.pythonhosted.org/packages/9c/5e/9a55a4a3d00adc28b5da19efb2f6d4cfe523162657792596abd749f5c895/esdbclient-0.18.tar.gz","yanked":false,"yanked_reason":null}],"0.19":[{"comment_text":"","digests":{"blake2b_256":"9fd3d3a969805fe142db9c2b4124366a98cd8f26c3045fb6baca9066d981a92c","md5":"1e9a92bc3bf217a702e5f2e0a6924d71","sha256":"09dfe3b6fccb6cc8fbf55d6cb6f75fb380e2b8eeb56104ba326ef854fff38548"},"downloads":-1,"filename":"esdbclient-0.19-py3-none-any.whl","has_sig":false,"md5_digest":"1e9a92bc3bf217a702e5f2e0a6924d71","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":103774,"upload_time":"2023-10-15T19:25:22","upload_time_iso_8601":"2023-10-15T19:25:22.732948Z","url":"https://files.pythonhosted.org/packages/9f/d3/d3a969805fe142db9c2b4124366a98cd8f26c3045fb6baca9066d981a92c/esdbclient-0.19-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"05249a87a784fb41c4e86ad4a4f6b8ed5071419ca84fa747d57941bb93ae56cc","md5":"ffdea82b181445e060336164749b71d2","sha256":"75240926a567ee6c501b304a556abcae8826c606f3ba97d489107854e21b5844"},"downloads":-1,"filename":"esdbclient-0.19.tar.gz","has_sig":false,"md5_digest":"ffdea82b181445e060336164749b71d2","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":141945,"upload_time":"2023-10-15T19:25:25","upload_time_iso_8601":"2023-10-15T19:25:25.046788Z","url":"https://files.pythonhosted.org/packages/05/24/9a87a784fb41c4e86ad4a4f6b8ed5071419ca84fa747d57941bb93ae56cc/esdbclient-0.19.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"f0739347286d4045ad64747829b615d32f73fbdb0a316de526e6528af86eae78","md5":"c3d1bba69173451b4437234a8be520b1","sha256":"8d04d4177dc372947ff2b2cf1e7435d18c337104409aef1ca56d00427230658e"},"downloads":-1,"filename":"esdbclient-0.2-py3-none-any.whl","has_sig":false,"md5_digest":"c3d1bba69173451b4437234a8be520b1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":30759,"upload_time":"2022-05-22T22:35:37","upload_time_iso_8601":"2022-05-22T22:35:37.381028Z","url":"https://files.pythonhosted.org/packages/f0/73/9347286d4045ad64747829b615d32f73fbdb0a316de526e6528af86eae78/esdbclient-0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"82dcae7f871e5bcd4a8e534634497e8267e2adc04193874af5d97dcbab5719cf","md5":"7d67539d4a15bbce3d46045cfe18c5d8","sha256":"45af3621bea7fd2b57b6d6f33c7799f3fd432e0d58e8916a2e9d33b06e5371ba"},"downloads":-1,"filename":"esdbclient-0.2.tar.gz","has_sig":false,"md5_digest":"7d67539d4a15bbce3d46045cfe18c5d8","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":30322,"upload_time":"2022-05-22T22:35:39","upload_time_iso_8601":"2022-05-22T22:35:39.299922Z","url":"https://files.pythonhosted.org/packages/82/dc/ae7f871e5bcd4a8e534634497e8267e2adc04193874af5d97dcbab5719cf/esdbclient-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"16dc298af1075907f95e754a8a6b8be09d4e83ab464e0ab89a956dbc63b04a30","md5":"fa768708807527bfd0ad2569a7f2e565","sha256":"1c59273518059c39fe5c2973f55c738ac98ea71b8e0b3dcbc975c9bc50d05fe8"},"downloads":-1,"filename":"esdbclient-0.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"fa768708807527bfd0ad2569a7f2e565","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":30776,"upload_time":"2022-05-22T22:39:43","upload_time_iso_8601":"2022-05-22T22:39:43.082657Z","url":"https://files.pythonhosted.org/packages/16/dc/298af1075907f95e754a8a6b8be09d4e83ab464e0ab89a956dbc63b04a30/esdbclient-0.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"def569a17be391f47dc942b226fd2fa35138e6fbf1ae73e9a3cb55d0d9d14d84","md5":"48e0fdd979f1d1c415ec43155d8707e6","sha256":"ca5214a6f0d9f200e07b207833925d4e8df82fad549530a1e210629518181470"},"downloads":-1,"filename":"esdbclient-0.2.1.tar.gz","has_sig":false,"md5_digest":"48e0fdd979f1d1c415ec43155d8707e6","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":30323,"upload_time":"2022-05-22T22:39:45","upload_time_iso_8601":"2022-05-22T22:39:45.096889Z","url":"https://files.pythonhosted.org/packages/de/f5/69a17be391f47dc942b226fd2fa35138e6fbf1ae73e9a3cb55d0d9d14d84/esdbclient-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"39c574747e0241e8d578d9380bbb7f1526a7c9c463f0c28d405b2d2b929cec55","md5":"3bdfb428e40760ab70f5ac2eb6e9f3fe","sha256":"e8bc3b754b6ddfe56d3d4c092610af0afc1f7c869b5ad84e9c55e922dd37ab3c"},"downloads":-1,"filename":"esdbclient-0.3-py3-none-any.whl","has_sig":false,"md5_digest":"3bdfb428e40760ab70f5ac2eb6e9f3fe","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":31136,"upload_time":"2022-05-24T00:16:35","upload_time_iso_8601":"2022-05-24T00:16:35.703391Z","url":"https://files.pythonhosted.org/packages/39/c5/74747e0241e8d578d9380bbb7f1526a7c9c463f0c28d405b2d2b929cec55/esdbclient-0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6300f411d260f4d671e119dd50ec7d8015baf78367e966370b741a2efaf5df13","md5":"a0d91131c7e3837e9802e312fdda9eba","sha256":"8faece4e31f14f63727017f7c6efc43cc82d69657ecfe34f61d541249ab19cfc"},"downloads":-1,"filename":"esdbclient-0.3.tar.gz","has_sig":false,"md5_digest":"a0d91131c7e3837e9802e312fdda9eba","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":30774,"upload_time":"2022-05-24T00:16:37","upload_time_iso_8601":"2022-05-24T00:16:37.060558Z","url":"https://files.pythonhosted.org/packages/63/00/f411d260f4d671e119dd50ec7d8015baf78367e966370b741a2efaf5df13/esdbclient-0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4":[{"comment_text":"","digests":{"blake2b_256":"fb6c5c919db0b98a4f0b04c2e7b4b550c5c5efad6ae9562560b323a6ac5fbf5a","md5":"2e18313ad8d6b50e3c9e03093a749eba","sha256":"3e717d97a7f3d5cef049b564654bf6e11f35884168d2fc95464b68717c094821"},"downloads":-1,"filename":"esdbclient-0.4-py3-none-any.whl","has_sig":false,"md5_digest":"2e18313ad8d6b50e3c9e03093a749eba","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":33430,"upload_time":"2022-05-24T22:28:50","upload_time_iso_8601":"2022-05-24T22:28:50.552910Z","url":"https://files.pythonhosted.org/packages/fb/6c/5c919db0b98a4f0b04c2e7b4b550c5c5efad6ae9562560b323a6ac5fbf5a/esdbclient-0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e120be28fab480ee62b91ba546832c667007c574b45600ca3ac9992c265d4f02","md5":"70955c9b93255d726681eef47a95b9b8","sha256":"7088980c6963e96f8988ae8447191d3fc32ffedbd987808b4bd8a181094418a3"},"downloads":-1,"filename":"esdbclient-0.4.tar.gz","has_sig":false,"md5_digest":"70955c9b93255d726681eef47a95b9b8","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":32988,"upload_time":"2022-05-24T22:28:52","upload_time_iso_8601":"2022-05-24T22:28:52.706567Z","url":"https://files.pythonhosted.org/packages/e1/20/be28fab480ee62b91ba546832c667007c574b45600ca3ac9992c265d4f02/esdbclient-0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"b99167ecf5f9c2deb0f92e8fddb353446d6f53a1120a573ad8cb44a8283aa9c8","md5":"0c1bc910b44fcfc8d51ed3c6610bc4af","sha256":"fa442ba49054fc29b5c264e4130ddcb07b5ea8dd11509435864ac7044bf2eb71"},"downloads":-1,"filename":"esdbclient-0.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"0c1bc910b44fcfc8d51ed3c6610bc4af","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":34902,"upload_time":"2022-05-25T00:31:38","upload_time_iso_8601":"2022-05-25T00:31:38.582753Z","url":"https://files.pythonhosted.org/packages/b9/91/67ecf5f9c2deb0f92e8fddb353446d6f53a1120a573ad8cb44a8283aa9c8/esdbclient-0.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7ce8272b8bc1eee0462e9ee7ec5e902e73526615f3fe96d03d1bd811ef7bfa62","md5":"7e1ac086a9131d68e2b4dc24df1b5d18","sha256":"2a941aec264cfbc8e06871eb341ce99dceba11e6af6662f147003de4954fba8b"},"downloads":-1,"filename":"esdbclient-0.4.1.tar.gz","has_sig":false,"md5_digest":"7e1ac086a9131d68e2b4dc24df1b5d18","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36262,"upload_time":"2022-05-25T00:31:40","upload_time_iso_8601":"2022-05-25T00:31:40.720059Z","url":"https://files.pythonhosted.org/packages/7c/e8/272b8bc1eee0462e9ee7ec5e902e73526615f3fe96d03d1bd811ef7bfa62/esdbclient-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.10":[{"comment_text":"","digests":{"blake2b_256":"3628e064eef04d35562f5178ee3f458ebc01b9de9a08d9381c808fee19e314c2","md5":"5f36e6016ed48e212dbf331d815b06a3","sha256":"485a166ac867804a103c45da5550369aa81e3f621abde38716eaa1e6be8513e0"},"downloads":-1,"filename":"esdbclient-0.4.10-py3-none-any.whl","has_sig":false,"md5_digest":"5f36e6016ed48e212dbf331d815b06a3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36190,"upload_time":"2022-05-25T14:05:35","upload_time_iso_8601":"2022-05-25T14:05:35.393368Z","url":"https://files.pythonhosted.org/packages/36/28/e064eef04d35562f5178ee3f458ebc01b9de9a08d9381c808fee19e314c2/esdbclient-0.4.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cafa5e8007981ce5d99c6b5425b5a8bba3fdee845adba742881e2c437839c62b","md5":"4a932efa8da85db23849d150bfbff053","sha256":"742a5569ef6e3a567dd7d2902ad75c137cdfc2de0298ddcca69dd5db5eec306d"},"downloads":-1,"filename":"esdbclient-0.4.10.tar.gz","has_sig":false,"md5_digest":"4a932efa8da85db23849d150bfbff053","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":38872,"upload_time":"2022-05-25T14:05:37","upload_time_iso_8601":"2022-05-25T14:05:37.567867Z","url":"https://files.pythonhosted.org/packages/ca/fa/5e8007981ce5d99c6b5425b5a8bba3fdee845adba742881e2c437839c62b/esdbclient-0.4.10.tar.gz","yanked":false,"yanked_reason":null}],"0.4.11":[{"comment_text":"","digests":{"blake2b_256":"88b9dd2820ce865d428a00e9e4f9b5318e6f6654a275af073673f8b10c8828b6","md5":"d59b43a97d055364b017343a87e8e2df","sha256":"a1afca32e4d1523f16cb0f1e9561debd79326b82fb3ef13742bd489073646ae3"},"downloads":-1,"filename":"esdbclient-0.4.11-py3-none-any.whl","has_sig":false,"md5_digest":"d59b43a97d055364b017343a87e8e2df","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36193,"upload_time":"2022-05-25T14:12:07","upload_time_iso_8601":"2022-05-25T14:12:07.834055Z","url":"https://files.pythonhosted.org/packages/88/b9/dd2820ce865d428a00e9e4f9b5318e6f6654a275af073673f8b10c8828b6/esdbclient-0.4.11-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b3eae495ee6d80c2ae1f23a9d3ad1bfac7034b17e8a1ed1c262444a1372820b9","md5":"39330d2c8482883fa34944074b545908","sha256":"afce013fb55a78be5bb0810f264093344339a0e3e2d2d1ae467abae58d151ec4"},"downloads":-1,"filename":"esdbclient-0.4.11.tar.gz","has_sig":false,"md5_digest":"39330d2c8482883fa34944074b545908","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":38881,"upload_time":"2022-05-25T14:12:09","upload_time_iso_8601":"2022-05-25T14:12:09.942647Z","url":"https://files.pythonhosted.org/packages/b3/ea/e495ee6d80c2ae1f23a9d3ad1bfac7034b17e8a1ed1c262444a1372820b9/esdbclient-0.4.11.tar.gz","yanked":false,"yanked_reason":null}],"0.4.12":[{"comment_text":"","digests":{"blake2b_256":"5af32d6232243441154d9115382f6d3dd724486c64636e689685dcd1e09220b6","md5":"880a02b9f35cb99d23fd54eedc384725","sha256":"2acc06622341fce7bfc058e39021a1781418602039b90cce17a83c212f5b2520"},"downloads":-1,"filename":"esdbclient-0.4.12-py3-none-any.whl","has_sig":false,"md5_digest":"880a02b9f35cb99d23fd54eedc384725","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36218,"upload_time":"2022-05-25T14:16:41","upload_time_iso_8601":"2022-05-25T14:16:41.700535Z","url":"https://files.pythonhosted.org/packages/5a/f3/2d6232243441154d9115382f6d3dd724486c64636e689685dcd1e09220b6/esdbclient-0.4.12-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ab3b91ada665f10a01bb2c9cfb7dc2621b20e8b9d3be2f39f1a811661716af62","md5":"b179c4edaf2f203aae16296db756c1a1","sha256":"5e26e5210311206f3b5d5897a482a4ea1fd05d094c27f4d797ffd65e4b954c8e"},"downloads":-1,"filename":"esdbclient-0.4.12.tar.gz","has_sig":false,"md5_digest":"b179c4edaf2f203aae16296db756c1a1","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":38937,"upload_time":"2022-05-25T14:16:43","upload_time_iso_8601":"2022-05-25T14:16:43.882223Z","url":"https://files.pythonhosted.org/packages/ab/3b/91ada665f10a01bb2c9cfb7dc2621b20e8b9d3be2f39f1a811661716af62/esdbclient-0.4.12.tar.gz","yanked":false,"yanked_reason":null}],"0.4.13":[{"comment_text":"","digests":{"blake2b_256":"eb2e9130cca60327f5849d2a16c7af2030da19a55d37f9ef557b305c5bd9211f","md5":"ad21d9e3bf149faf32fc496a64cc3e68","sha256":"cafae2c7339ed4da184e77f36fa67403f8755d6ee5e8b12abd9515fd40c5a706"},"downloads":-1,"filename":"esdbclient-0.4.13-py3-none-any.whl","has_sig":false,"md5_digest":"ad21d9e3bf149faf32fc496a64cc3e68","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36365,"upload_time":"2022-05-25T14:24:39","upload_time_iso_8601":"2022-05-25T14:24:39.368179Z","url":"https://files.pythonhosted.org/packages/eb/2e/9130cca60327f5849d2a16c7af2030da19a55d37f9ef557b305c5bd9211f/esdbclient-0.4.13-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ff3d28c1ad17b793b12f5c3c6dbe7a80c471ebf86891bc5a50b53c8d9911a961","md5":"ca8432602157ddd90a8f242a2d5e6704","sha256":"ed31b1bff04e6407737bc1a1f36800258af2e8c5250e1c2c582c6339dcf4e7ad"},"downloads":-1,"filename":"esdbclient-0.4.13.tar.gz","has_sig":false,"md5_digest":"ca8432602157ddd90a8f242a2d5e6704","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":39253,"upload_time":"2022-05-25T14:24:41","upload_time_iso_8601":"2022-05-25T14:24:41.156756Z","url":"https://files.pythonhosted.org/packages/ff/3d/28c1ad17b793b12f5c3c6dbe7a80c471ebf86891bc5a50b53c8d9911a961/esdbclient-0.4.13.tar.gz","yanked":false,"yanked_reason":null}],"0.4.14":[{"comment_text":"","digests":{"blake2b_256":"3acc273efd68a6a29b88f5892672f128ec4e2569aea1b0b1ac2ff97a3c951348","md5":"128822a14fda272597dbd442838d8b61","sha256":"356670e2e71f3deff9b7ef7a08163a8325a3e594b3d89edffdd0229e482f0c87"},"downloads":-1,"filename":"esdbclient-0.4.14-py3-none-any.whl","has_sig":false,"md5_digest":"128822a14fda272597dbd442838d8b61","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36391,"upload_time":"2022-05-25T14:42:04","upload_time_iso_8601":"2022-05-25T14:42:04.684906Z","url":"https://files.pythonhosted.org/packages/3a/cc/273efd68a6a29b88f5892672f128ec4e2569aea1b0b1ac2ff97a3c951348/esdbclient-0.4.14-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cc7f8dd2c4a6da8305cd7c58991dada732e63e2cf250bf7b1c71680814418ced","md5":"a9058901305c9a78ad3d60bce3fbbc92","sha256":"c2ee1bbf67e8b7cbd63388df90bb59a4aa983f4306dc823c7b35871176d0b16e"},"downloads":-1,"filename":"esdbclient-0.4.14.tar.gz","has_sig":false,"md5_digest":"a9058901305c9a78ad3d60bce3fbbc92","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":39294,"upload_time":"2022-05-25T14:42:07","upload_time_iso_8601":"2022-05-25T14:42:07.375865Z","url":"https://files.pythonhosted.org/packages/cc/7f/8dd2c4a6da8305cd7c58991dada732e63e2cf250bf7b1c71680814418ced/esdbclient-0.4.14.tar.gz","yanked":false,"yanked_reason":null}],"0.4.15":[{"comment_text":"","digests":{"blake2b_256":"9ca65e094fecef523beda6f0c0d5aad086f7f5eff3aae40fe3c9e3fb7f439f54","md5":"0222be8973a3b1b1ebcde5fa8284b70b","sha256":"643a48cfed6615b453e6a156f2195be7abd33482a987bf429bc676a1865aef68"},"downloads":-1,"filename":"esdbclient-0.4.15-py3-none-any.whl","has_sig":false,"md5_digest":"0222be8973a3b1b1ebcde5fa8284b70b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36432,"upload_time":"2022-05-26T12:30:41","upload_time_iso_8601":"2022-05-26T12:30:41.618022Z","url":"https://files.pythonhosted.org/packages/9c/a6/5e094fecef523beda6f0c0d5aad086f7f5eff3aae40fe3c9e3fb7f439f54/esdbclient-0.4.15-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8478a65c27f49e2c50df342b4ef85d54ba796a991b26fc4b23bb15aa0fc6b99e","md5":"bbf0d35f2cf3b6e3e1f3ee011a63f22f","sha256":"97ec4309d138d7500e3b6e9aadc1c38e7f65f8edfad8e9414fe78c875b91950a"},"downloads":-1,"filename":"esdbclient-0.4.15.tar.gz","has_sig":false,"md5_digest":"bbf0d35f2cf3b6e3e1f3ee011a63f22f","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":39405,"upload_time":"2022-05-26T12:30:43","upload_time_iso_8601":"2022-05-26T12:30:43.578223Z","url":"https://files.pythonhosted.org/packages/84/78/a65c27f49e2c50df342b4ef85d54ba796a991b26fc4b23bb15aa0fc6b99e/esdbclient-0.4.15.tar.gz","yanked":false,"yanked_reason":null}],"0.4.16":[{"comment_text":"","digests":{"blake2b_256":"8cacba1e215711f72c223597bcd69e82d09e20938fc229f61bca72ff17343891","md5":"ba76145d5bb5adfbe43d6774e3d82f00","sha256":"97d14521f4982b6f3b0e861b9a07c61643d6583a736c60abadb88e7772a99e9f"},"downloads":-1,"filename":"esdbclient-0.4.16-py3-none-any.whl","has_sig":false,"md5_digest":"ba76145d5bb5adfbe43d6774e3d82f00","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":37616,"upload_time":"2022-06-10T17:36:44","upload_time_iso_8601":"2022-06-10T17:36:44.468773Z","url":"https://files.pythonhosted.org/packages/8c/ac/ba1e215711f72c223597bcd69e82d09e20938fc229f61bca72ff17343891/esdbclient-0.4.16-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5fd752888e6f8987b99a890d797a9526538f02d6b2f34da3b75af32e32a3a68b","md5":"bd7bc5a5a95868e168ae0e7cae36d531","sha256":"4781fdac6396e8f31650b8031675c3a29fd52c13ade592b4613ca3cacb21102e"},"downloads":-1,"filename":"esdbclient-0.4.16.tar.gz","has_sig":false,"md5_digest":"bd7bc5a5a95868e168ae0e7cae36d531","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":46546,"upload_time":"2022-06-10T17:36:46","upload_time_iso_8601":"2022-06-10T17:36:46.162828Z","url":"https://files.pythonhosted.org/packages/5f/d7/52888e6f8987b99a890d797a9526538f02d6b2f34da3b75af32e32a3a68b/esdbclient-0.4.16.tar.gz","yanked":false,"yanked_reason":null}],"0.4.17":[{"comment_text":"","digests":{"blake2b_256":"805587b49e110dded3f4ab456a5cb8dc805d42d173dcb223d859bcc6883af6ed","md5":"6bc4d5ef60e1e33664daf699b8ec1fb8","sha256":"445a7bc98458193fbb651d39392c74b0b4cf13a7bdd095c4007e7077c2b6c49b"},"downloads":-1,"filename":"esdbclient-0.4.17-py3-none-any.whl","has_sig":false,"md5_digest":"6bc4d5ef60e1e33664daf699b8ec1fb8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":37614,"upload_time":"2022-06-10T17:42:50","upload_time_iso_8601":"2022-06-10T17:42:50.817771Z","url":"https://files.pythonhosted.org/packages/80/55/87b49e110dded3f4ab456a5cb8dc805d42d173dcb223d859bcc6883af6ed/esdbclient-0.4.17-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"dc58e135c769b738c9cc41504818a68a23441e205d75eec204b5d9674a83023e","md5":"bebe54a1dbf229a0a014208f7c23ef70","sha256":"9bf24dd6988af6ecb3a68edd12fb048dc67a4f50d0f5462f2a2fa9583069333c"},"downloads":-1,"filename":"esdbclient-0.4.17.tar.gz","has_sig":false,"md5_digest":"bebe54a1dbf229a0a014208f7c23ef70","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":46501,"upload_time":"2022-06-10T17:42:52","upload_time_iso_8601":"2022-06-10T17:42:52.817690Z","url":"https://files.pythonhosted.org/packages/dc/58/e135c769b738c9cc41504818a68a23441e205d75eec204b5d9674a83023e/esdbclient-0.4.17.tar.gz","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"c84ab81edce123967977115b35c21891f2c5feecc439b13239d8a3a3c63494fe","md5":"9ef5f14c456fc322776186e2868eac82","sha256":"8563ffe1d46c592b48f188cb399b90f8c9d513c6cd1ef64941d587ed0bfb64c6"},"downloads":-1,"filename":"esdbclient-0.4.2-py3-none-any.whl","has_sig":false,"md5_digest":"9ef5f14c456fc322776186e2868eac82","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":34898,"upload_time":"2022-05-25T00:40:05","upload_time_iso_8601":"2022-05-25T00:40:05.204369Z","url":"https://files.pythonhosted.org/packages/c8/4a/b81edce123967977115b35c21891f2c5feecc439b13239d8a3a3c63494fe/esdbclient-0.4.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"13c1630dc4068e9e4d703620be08c891e0a4b3293c9237e320174f554e2465d8","md5":"9c63112b8bcecbadfdba9327d720f7cd","sha256":"452ebf55accdfc0cc3741e6f2e21883c7dee0c6e5e9f47492c2c796bd9f1be0a"},"downloads":-1,"filename":"esdbclient-0.4.2.tar.gz","has_sig":false,"md5_digest":"9c63112b8bcecbadfdba9327d720f7cd","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36279,"upload_time":"2022-05-25T00:40:07","upload_time_iso_8601":"2022-05-25T00:40:07.088812Z","url":"https://files.pythonhosted.org/packages/13/c1/630dc4068e9e4d703620be08c891e0a4b3293c9237e320174f554e2465d8/esdbclient-0.4.2.tar.gz","yanked":false,"yanked_reason":null}],"0.4.3":[{"comment_text":"","digests":{"blake2b_256":"e7ce116fde33bdde647ac263b4739593ddabc8c6901805820b05f0c43320b5c7","md5":"c37f4c144af12572b757263d05b032f0","sha256":"5639a443eefe59b0e7e477235134a3571ff804accbd64285b705939a2496183c"},"downloads":-1,"filename":"esdbclient-0.4.3-py3-none-any.whl","has_sig":false,"md5_digest":"c37f4c144af12572b757263d05b032f0","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":34909,"upload_time":"2022-05-25T00:47:08","upload_time_iso_8601":"2022-05-25T00:47:08.754028Z","url":"https://files.pythonhosted.org/packages/e7/ce/116fde33bdde647ac263b4739593ddabc8c6901805820b05f0c43320b5c7/esdbclient-0.4.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"291a5f039ae5b18c011a754b13b05d28cfc871127696bee1a931e4282f795463","md5":"00911d72a2908523e569380894152238","sha256":"c9216fe1e6c6ff7752405ec47618f40f45d92e1a68e6e7d172a5bbc5ac719090"},"downloads":-1,"filename":"esdbclient-0.4.3.tar.gz","has_sig":false,"md5_digest":"00911d72a2908523e569380894152238","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36320,"upload_time":"2022-05-25T00:47:10","upload_time_iso_8601":"2022-05-25T00:47:10.511135Z","url":"https://files.pythonhosted.org/packages/29/1a/5f039ae5b18c011a754b13b05d28cfc871127696bee1a931e4282f795463/esdbclient-0.4.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4.4":[{"comment_text":"","digests":{"blake2b_256":"917f503604ade629937955113015e1bc9646d186353ee44cf0df0d2881c36ea2","md5":"741988ad1ab055de2f9245685e24d2c7","sha256":"c4465158c930343f5f51e46c9ed6d99c5d39eb0bc1c90308685a2e270644aeb7"},"downloads":-1,"filename":"esdbclient-0.4.4-py3-none-any.whl","has_sig":false,"md5_digest":"741988ad1ab055de2f9245685e24d2c7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":34994,"upload_time":"2022-05-25T01:19:36","upload_time_iso_8601":"2022-05-25T01:19:36.219949Z","url":"https://files.pythonhosted.org/packages/91/7f/503604ade629937955113015e1bc9646d186353ee44cf0df0d2881c36ea2/esdbclient-0.4.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"325341fc93b38abda74363af3283f821fd76e2a839643c24c0f70478586cef16","md5":"6e1220f20b1ba3ba58be9b4a3c4c651b","sha256":"c10d0017cfd967f5312f4e6a1330018ec25f47dec1e317b52fd256138026ab65"},"downloads":-1,"filename":"esdbclient-0.4.4.tar.gz","has_sig":false,"md5_digest":"6e1220f20b1ba3ba58be9b4a3c4c651b","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36352,"upload_time":"2022-05-25T01:19:38","upload_time_iso_8601":"2022-05-25T01:19:38.069742Z","url":"https://files.pythonhosted.org/packages/32/53/41fc93b38abda74363af3283f821fd76e2a839643c24c0f70478586cef16/esdbclient-0.4.4.tar.gz","yanked":false,"yanked_reason":null}],"0.4.5":[{"comment_text":"","digests":{"blake2b_256":"387c6b1194eaa60dfb504d740055e5867bbc8868eb74f315fe52d43184b5558d","md5":"46451f1c952a8c987e168d57d2930594","sha256":"47dd962024d4768557ba7e2d499d16bc6e7c7cd12bc22a58b7a4ce2647a57553"},"downloads":-1,"filename":"esdbclient-0.4.5-py3-none-any.whl","has_sig":false,"md5_digest":"46451f1c952a8c987e168d57d2930594","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":35240,"upload_time":"2022-05-25T01:57:13","upload_time_iso_8601":"2022-05-25T01:57:13.504733Z","url":"https://files.pythonhosted.org/packages/38/7c/6b1194eaa60dfb504d740055e5867bbc8868eb74f315fe52d43184b5558d/esdbclient-0.4.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"285c7302d863ad4a56e311ae2ca2f0a6e8a3d5c7e098072a197180d1a753326f","md5":"9d5cf19ac67b22beafa2775b9fdd439c","sha256":"c7ff916777a1faa32d2b73b030c0c440648f4410ca675b8d8817da09ae49188e"},"downloads":-1,"filename":"esdbclient-0.4.5.tar.gz","has_sig":false,"md5_digest":"9d5cf19ac67b22beafa2775b9fdd439c","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36910,"upload_time":"2022-05-25T01:57:15","upload_time_iso_8601":"2022-05-25T01:57:15.815127Z","url":"https://files.pythonhosted.org/packages/28/5c/7302d863ad4a56e311ae2ca2f0a6e8a3d5c7e098072a197180d1a753326f/esdbclient-0.4.5.tar.gz","yanked":false,"yanked_reason":null}],"0.4.6":[{"comment_text":"","digests":{"blake2b_256":"72463856b1a1d0e786532da4ea1beda89ed0e3ad0c237a870c8db9fbe0c7a64e","md5":"19301f5060765ba9d9ec4902a7c86b17","sha256":"f398e6bfacfdc00475f94b6ffb382c9a14b01de937034a90ab14b36af1f2e3c4"},"downloads":-1,"filename":"esdbclient-0.4.6-py3-none-any.whl","has_sig":false,"md5_digest":"19301f5060765ba9d9ec4902a7c86b17","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":35242,"upload_time":"2022-05-25T02:22:03","upload_time_iso_8601":"2022-05-25T02:22:03.797066Z","url":"https://files.pythonhosted.org/packages/72/46/3856b1a1d0e786532da4ea1beda89ed0e3ad0c237a870c8db9fbe0c7a64e/esdbclient-0.4.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"59cd24d187d1812393f894af50f88bc20f8fe6d92dfa6fe5f6b5eb8da8ff480c","md5":"5ca558761e75788258c9bece93d0626f","sha256":"79aa4c4e38550d98c05372ec8da93e5422e50d42ee35d41f7503d73d67de061c"},"downloads":-1,"filename":"esdbclient-0.4.6.tar.gz","has_sig":false,"md5_digest":"5ca558761e75788258c9bece93d0626f","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36912,"upload_time":"2022-05-25T02:22:05","upload_time_iso_8601":"2022-05-25T02:22:05.922192Z","url":"https://files.pythonhosted.org/packages/59/cd/24d187d1812393f894af50f88bc20f8fe6d92dfa6fe5f6b5eb8da8ff480c/esdbclient-0.4.6.tar.gz","yanked":false,"yanked_reason":null}],"0.4.7":[{"comment_text":"","digests":{"blake2b_256":"e07b70f6a1b15514a3bd27892098e6fc36b96240df562b25ebbc1a6aeb843691","md5":"f4301d089a2026a12f5d9c408dc1902a","sha256":"204a8ef5177cc00af1e69be5edf32a5a598d22fe9fb39314afaa002969206c94"},"downloads":-1,"filename":"esdbclient-0.4.7-py3-none-any.whl","has_sig":false,"md5_digest":"f4301d089a2026a12f5d9c408dc1902a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":35273,"upload_time":"2022-05-25T02:44:35","upload_time_iso_8601":"2022-05-25T02:44:35.596887Z","url":"https://files.pythonhosted.org/packages/e0/7b/70f6a1b15514a3bd27892098e6fc36b96240df562b25ebbc1a6aeb843691/esdbclient-0.4.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"de415b525bec415bbf41eb03b8131f0c5954bd3c1def349304c206c052c19202","md5":"5753a0288df3e040f0eac25129da26aa","sha256":"c3124d26b986c7e1316f22d528b87ba7da3ba1cda4e665e939a0ef651b1e5d55"},"downloads":-1,"filename":"esdbclient-0.4.7.tar.gz","has_sig":false,"md5_digest":"5753a0288df3e040f0eac25129da26aa","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":36942,"upload_time":"2022-05-25T02:44:37","upload_time_iso_8601":"2022-05-25T02:44:37.711562Z","url":"https://files.pythonhosted.org/packages/de/41/5b525bec415bbf41eb03b8131f0c5954bd3c1def349304c206c052c19202/esdbclient-0.4.7.tar.gz","yanked":false,"yanked_reason":null}],"0.4.8":[{"comment_text":"","digests":{"blake2b_256":"cc81ffb6d197345798734d1e588e38bfdf453afa5a1e0a9ce7107014247234cb","md5":"a3ee1e8fc37b3b3515d885cbd096ab6b","sha256":"2877b1afa5975ff859afe141733e956e8278fc903b80a7ae03d304ee4da7c579"},"downloads":-1,"filename":"esdbclient-0.4.8-py3-none-any.whl","has_sig":false,"md5_digest":"a3ee1e8fc37b3b3515d885cbd096ab6b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36118,"upload_time":"2022-05-25T13:42:59","upload_time_iso_8601":"2022-05-25T13:42:59.017882Z","url":"https://files.pythonhosted.org/packages/cc/81/ffb6d197345798734d1e588e38bfdf453afa5a1e0a9ce7107014247234cb/esdbclient-0.4.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f2cb2dc9e135c6281aee5197fee42a07094ab7166ba277aebb7ce3235eac68f8","md5":"93aead6c15ee90f428ec15ca51172d62","sha256":"73f42f037fc3c0c9f9806fb0db76232d7853e46ce1c39d0fadbb997a94e65dde"},"downloads":-1,"filename":"esdbclient-0.4.8.tar.gz","has_sig":false,"md5_digest":"93aead6c15ee90f428ec15ca51172d62","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":38731,"upload_time":"2022-05-25T13:43:01","upload_time_iso_8601":"2022-05-25T13:43:01.369977Z","url":"https://files.pythonhosted.org/packages/f2/cb/2dc9e135c6281aee5197fee42a07094ab7166ba277aebb7ce3235eac68f8/esdbclient-0.4.8.tar.gz","yanked":false,"yanked_reason":null}],"0.4.9":[{"comment_text":"","digests":{"blake2b_256":"c40589c0927fe91d5eb1a7ac91abed32b4f0148b6971dac2b07cf65b9f480279","md5":"3d249e9623bb29e8647aa79c1c7e8bed","sha256":"01c02ec852f03446df1fdb119a397dc4d9d6884322c07623647d118e578db9a0"},"downloads":-1,"filename":"esdbclient-0.4.9-py3-none-any.whl","has_sig":false,"md5_digest":"3d249e9623bb29e8647aa79c1c7e8bed","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36135,"upload_time":"2022-05-25T13:55:01","upload_time_iso_8601":"2022-05-25T13:55:01.271842Z","url":"https://files.pythonhosted.org/packages/c4/05/89c0927fe91d5eb1a7ac91abed32b4f0148b6971dac2b07cf65b9f480279/esdbclient-0.4.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0c407108056083dc2cb40237faad5556ff33bd1a34c3500a464b7e7a134dd17c","md5":"7ae670e3ee2c6f5a5faadd3f1a779935","sha256":"f6ed72c19870b758816b5f7540f4f2cd0c59292a79d299098b0256ea8cf81b36"},"downloads":-1,"filename":"esdbclient-0.4.9.tar.gz","has_sig":false,"md5_digest":"7ae670e3ee2c6f5a5faadd3f1a779935","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":38762,"upload_time":"2022-05-25T13:55:03","upload_time_iso_8601":"2022-05-25T13:55:03.606843Z","url":"https://files.pythonhosted.org/packages/0c/40/7108056083dc2cb40237faad5556ff33bd1a34c3500a464b7e7a134dd17c/esdbclient-0.4.9.tar.gz","yanked":false,"yanked_reason":null}],"0.5":[{"comment_text":"","digests":{"blake2b_256":"367ee94d88e7a0e5451341cbc7547847482f9015d66b202794c48ba5651d55ba","md5":"6f7d4b1baad34c208ce5037a5a65e6d1","sha256":"be81e9d84e11c05d5e68273469835e5b811e49c3e5805f7f685e17ac8be5354c"},"downloads":-1,"filename":"esdbclient-0.5-py3-none-any.whl","has_sig":false,"md5_digest":"6f7d4b1baad34c208ce5037a5a65e6d1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":36245,"upload_time":"2022-11-06T21:05:33","upload_time_iso_8601":"2022-11-06T21:05:33.794937Z","url":"https://files.pythonhosted.org/packages/36/7e/e94d88e7a0e5451341cbc7547847482f9015d66b202794c48ba5651d55ba/esdbclient-0.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"47ad847a3ec397f2d4403d4f41010932a88b389d2b8656169ffda366df324417","md5":"f8f21f27ac5ac8754ef6dbbab1863b4c","sha256":"d21732e55f9d23bfe0bb1abb3e2c5ac5c653d86b7fac370d90b1a776a8f72aa6"},"downloads":-1,"filename":"esdbclient-0.5.tar.gz","has_sig":false,"md5_digest":"f8f21f27ac5ac8754ef6dbbab1863b4c","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":44649,"upload_time":"2022-11-06T21:05:36","upload_time_iso_8601":"2022-11-06T21:05:36.096618Z","url":"https://files.pythonhosted.org/packages/47/ad/847a3ec397f2d4403d4f41010932a88b389d2b8656169ffda366df324417/esdbclient-0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.6":[{"comment_text":"","digests":{"blake2b_256":"ec1dc7c20e05e106c2cbfefc6800ed7af4fbe6b8f2717b523ee0232108a90e9a","md5":"54dddc880b2b24aa13f94a73f126ba97","sha256":"ede5fada20cb878592df8ab3a3051d416c668abca810521782c2169fd5c23b87"},"downloads":-1,"filename":"esdbclient-0.6-py3-none-any.whl","has_sig":false,"md5_digest":"54dddc880b2b24aa13f94a73f126ba97","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":51605,"upload_time":"2023-01-24T15:16:33","upload_time_iso_8601":"2023-01-24T15:16:33.551497Z","url":"https://files.pythonhosted.org/packages/ec/1d/c7c20e05e106c2cbfefc6800ed7af4fbe6b8f2717b523ee0232108a90e9a/esdbclient-0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0ad56a011a016a7c68573f9f33d84730fc0086d2c11ff9b8670e741ff94bc0dc","md5":"421ed887f665779773e8ff6ad118683f","sha256":"628b62aed76545f5c841255422ff5b2868e1f32884b7c4dae01f6c0142138904"},"downloads":-1,"filename":"esdbclient-0.6.tar.gz","has_sig":false,"md5_digest":"421ed887f665779773e8ff6ad118683f","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":61345,"upload_time":"2023-01-24T15:16:35","upload_time_iso_8601":"2023-01-24T15:16:35.399480Z","url":"https://files.pythonhosted.org/packages/0a/d5/6a011a016a7c68573f9f33d84730fc0086d2c11ff9b8670e741ff94bc0dc/esdbclient-0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.7":[{"comment_text":"","digests":{"blake2b_256":"bf213ba20c751bd4beb16ba95d183c312ed570e55c636e7148716c126b21df8b","md5":"272e2756c78711e84416c940b65ca776","sha256":"abe9621b1b3c664f7976f43717791f369293c50154a06e96f32d1099d81e8757"},"downloads":-1,"filename":"esdbclient-0.7-py3-none-any.whl","has_sig":false,"md5_digest":"272e2756c78711e84416c940b65ca776","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":53279,"upload_time":"2023-01-31T14:19:31","upload_time_iso_8601":"2023-01-31T14:19:31.129493Z","url":"https://files.pythonhosted.org/packages/bf/21/3ba20c751bd4beb16ba95d183c312ed570e55c636e7148716c126b21df8b/esdbclient-0.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e8a5497474a01af6be059d8bfe5569535d3b74457583fdb550c8b4a426453d8b","md5":"5b53a6990f511535a27f8e841e594eb7","sha256":"123d4dd6e231b89c2b49de3ec8023a9f8eb481bb934bce787cfc64319da9bfb1"},"downloads":-1,"filename":"esdbclient-0.7.tar.gz","has_sig":false,"md5_digest":"5b53a6990f511535a27f8e841e594eb7","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":66640,"upload_time":"2023-01-31T14:19:33","upload_time_iso_8601":"2023-01-31T14:19:33.320119Z","url":"https://files.pythonhosted.org/packages/e8/a5/497474a01af6be059d8bfe5569535d3b74457583fdb550c8b4a426453d8b/esdbclient-0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.8":[{"comment_text":"","digests":{"blake2b_256":"e377ca2630e406126b4357ffffe3f6c2bda6fcc82ea3ad91e17de5e3de5cd0fd","md5":"00f6266d1d6b7ca1e6ab6814a8fcd57d","sha256":"d1ab6b9c65ac9f77cff2d52e2189fbaf86f32d151855a89c810c1aba2a7f0dae"},"downloads":-1,"filename":"esdbclient-0.8-py3-none-any.whl","has_sig":false,"md5_digest":"00f6266d1d6b7ca1e6ab6814a8fcd57d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":54586,"upload_time":"2023-02-11T18:58:01","upload_time_iso_8601":"2023-02-11T18:58:01.156572Z","url":"https://files.pythonhosted.org/packages/e3/77/ca2630e406126b4357ffffe3f6c2bda6fcc82ea3ad91e17de5e3de5cd0fd/esdbclient-0.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b856a19381759e8e118e2185f1e6f35daee96f86c447c28297d97d31b45514c6","md5":"c3c4700fa037e1c0a576eb433e71b765","sha256":"4fb5a87ffba8bacade4726fba1c1f29cd4cd105a0dd75bea47214208731ec617"},"downloads":-1,"filename":"esdbclient-0.8.tar.gz","has_sig":false,"md5_digest":"c3c4700fa037e1c0a576eb433e71b765","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":68848,"upload_time":"2023-02-11T18:58:03","upload_time_iso_8601":"2023-02-11T18:58:03.428033Z","url":"https://files.pythonhosted.org/packages/b8/56/a19381759e8e118e2185f1e6f35daee96f86c447c28297d97d31b45514c6/esdbclient-0.8.tar.gz","yanked":false,"yanked_reason":null}],"0.9":[{"comment_text":"","digests":{"blake2b_256":"188f9b8942adf027e90e0fda8d1c9358cc0fac90af25282480d3b427ed79862e","md5":"fe3015db0246b094cf6b1af7c92c3a95","sha256":"1304faba5090e885dccc5d93567e9fc950c4fdbe684dd63f1edd87c42f963147"},"downloads":-1,"filename":"esdbclient-0.9-py3-none-any.whl","has_sig":false,"md5_digest":"fe3015db0246b094cf6b1af7c92c3a95","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":56002,"upload_time":"2023-02-12T01:16:38","upload_time_iso_8601":"2023-02-12T01:16:38.978889Z","url":"https://files.pythonhosted.org/packages/18/8f/9b8942adf027e90e0fda8d1c9358cc0fac90af25282480d3b427ed79862e/esdbclient-0.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6e3477debc175463d5f3c711f74a336ed6ff2540f96caf99f248b20e06eea78b","md5":"02afa406aa4355afe46951e223554674","sha256":"46cf713a02b3b627e74f26382e8c6aa6ee8953c4e2fa86b90bf5d2472a588915"},"downloads":-1,"filename":"esdbclient-0.9.tar.gz","has_sig":false,"md5_digest":"02afa406aa4355afe46951e223554674","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":72505,"upload_time":"2023-02-12T01:16:40","upload_time_iso_8601":"2023-02-12T01:16:40.639959Z","url":"https://files.pythonhosted.org/packages/6e/34/77debc175463d5f3c711f74a336ed6ff2540f96caf99f248b20e06eea78b/esdbclient-0.9.tar.gz","yanked":false,"yanked_reason":null}],"1.0":[{"comment_text":"","digests":{"blake2b_256":"9a2c6fe442c225cd9a791dd7a452de9fa29497a6e7f7578d60f240f6c7cadffe","md5":"6f388c61a85476a06fbb097852eebdef","sha256":"a02d59ec5c2bcbc521b8e5bcc7d3ab337eb909c7f5e9606a74f854c2ceef49aa"},"downloads":-1,"filename":"esdbclient-1.0-py3-none-any.whl","has_sig":false,"md5_digest":"6f388c61a85476a06fbb097852eebdef","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":104252,"upload_time":"2023-11-02T16:34:07","upload_time_iso_8601":"2023-11-02T16:34:07.310501Z","url":"https://files.pythonhosted.org/packages/9a/2c/6fe442c225cd9a791dd7a452de9fa29497a6e7f7578d60f240f6c7cadffe/esdbclient-1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6219d5c5fe377c3ee4b763cef4ec571e22b099edfd4b1b7e9ee64c4d67dccdad","md5":"ecb701b8b0f2686eb4f8aa8e8e1b0b6f","sha256":"8221d2ae610777b015a15aaa0d6d27413a1309b89a8e5f9824a491e0ccec0bb1"},"downloads":-1,"filename":"esdbclient-1.0.tar.gz","has_sig":false,"md5_digest":"ecb701b8b0f2686eb4f8aa8e8e1b0b6f","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":116170,"upload_time":"2023-11-02T16:34:09","upload_time_iso_8601":"2023-11-02T16:34:09.710209Z","url":"https://files.pythonhosted.org/packages/62/19/d5c5fe377c3ee4b763cef4ec571e22b099edfd4b1b7e9ee64c4d67dccdad/esdbclient-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"647c2c2f36d1de84f35cefee2325d454f8f70745d55c340d6236f10c58ad5898","md5":"159e3b1ced762203fb012135a1277ef9","sha256":"503d15a2266043e8ecde60cdc4bf392e5045a6b698a926ba97edc26514d1dd15"},"downloads":-1,"filename":"esdbclient-1.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"159e3b1ced762203fb012135a1277ef9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":104224,"upload_time":"2023-11-03T03:33:47","upload_time_iso_8601":"2023-11-03T03:33:47.969103Z","url":"https://files.pythonhosted.org/packages/64/7c/2c2f36d1de84f35cefee2325d454f8f70745d55c340d6236f10c58ad5898/esdbclient-1.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"67311d55fe3f3f251ebc4f37ee436b691c51f0aed073756154d85e89c609d214","md5":"1ae6f0ea07f45707eaaa78d85467a804","sha256":"6741a16c8a4884c8c56ff043c990ae3947fc56a4e255325f6c56f503216d9fcb"},"downloads":-1,"filename":"esdbclient-1.0.1.tar.gz","has_sig":false,"md5_digest":"1ae6f0ea07f45707eaaa78d85467a804","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":116145,"upload_time":"2023-11-03T03:33:52","upload_time_iso_8601":"2023-11-03T03:33:52.660851Z","url":"https://files.pythonhosted.org/packages/67/31/1d55fe3f3f251ebc4f37ee436b691c51f0aed073756154d85e89c609d214/esdbclient-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.10":[{"comment_text":"","digests":{"blake2b_256":"4ede56208b12e6062364547d62d6fc0ae6a205ffbd1858cfef89ddabf0433ecf","md5":"23dcaf6dd9b7a10fa208a2cecb422c2c","sha256":"714a30a937f5d92c9127b68e0945e268747e380f2272ef2505a662f5089245ba"},"downloads":-1,"filename":"esdbclient-1.0.10-py3-none-any.whl","has_sig":false,"md5_digest":"23dcaf6dd9b7a10fa208a2cecb422c2c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":108818,"upload_time":"2023-11-27T18:21:04","upload_time_iso_8601":"2023-11-27T18:21:04.676071Z","url":"https://files.pythonhosted.org/packages/4e/de/56208b12e6062364547d62d6fc0ae6a205ffbd1858cfef89ddabf0433ecf/esdbclient-1.0.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"905f185220e768f2358e35de323b85de5f1a56ecb7ca01d45b5c3756c530ad92","md5":"71d33bb21bc968d857370436e9889d81","sha256":"e596887a1b57dca9018b5040eb0a87a9796558381a47ff0028a06b871e50e5c5"},"downloads":-1,"filename":"esdbclient-1.0.10.tar.gz","has_sig":false,"md5_digest":"71d33bb21bc968d857370436e9889d81","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122390,"upload_time":"2023-11-27T18:21:07","upload_time_iso_8601":"2023-11-27T18:21:07.990091Z","url":"https://files.pythonhosted.org/packages/90/5f/185220e768f2358e35de323b85de5f1a56ecb7ca01d45b5c3756c530ad92/esdbclient-1.0.10.tar.gz","yanked":false,"yanked_reason":null}],"1.0.11":[{"comment_text":"","digests":{"blake2b_256":"069ce9284468672d6a07fc5bccab963ccd6f05baf9403c41cccb58af52c44655","md5":"153a3b201437a3f4a2aaee0a604ac819","sha256":"fccf6515cd3d4fad432a324993951178a789af75eb2e10944461668e1b7a1987"},"downloads":-1,"filename":"esdbclient-1.0.11-py3-none-any.whl","has_sig":false,"md5_digest":"153a3b201437a3f4a2aaee0a604ac819","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":108787,"upload_time":"2023-11-30T10:38:36","upload_time_iso_8601":"2023-11-30T10:38:36.209187Z","url":"https://files.pythonhosted.org/packages/06/9c/e9284468672d6a07fc5bccab963ccd6f05baf9403c41cccb58af52c44655/esdbclient-1.0.11-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ccac46a982c9786d440a4479cb48fda8ec9b233b9ca605b5b5225f513a1bf4e1","md5":"701438eccfb2347f8d1f10befad2019c","sha256":"cc03152a1a87bd61a15f74268dbc269f07145aee479522efdd6418006ad4d507"},"downloads":-1,"filename":"esdbclient-1.0.11.tar.gz","has_sig":false,"md5_digest":"701438eccfb2347f8d1f10befad2019c","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122363,"upload_time":"2023-11-30T10:38:38","upload_time_iso_8601":"2023-11-30T10:38:38.989577Z","url":"https://files.pythonhosted.org/packages/cc/ac/46a982c9786d440a4479cb48fda8ec9b233b9ca605b5b5225f513a1bf4e1/esdbclient-1.0.11.tar.gz","yanked":false,"yanked_reason":null}],"1.0.12":[{"comment_text":"","digests":{"blake2b_256":"80cd2ffad359e4d40d82e9ff3269cb6821069b25be5204ee35e83d93c1e92840","md5":"d59fe7a30b27222c7cccbb6bbd232730","sha256":"a15f328ca85d921b2fc51a3a2495572f8b4180c1f507570efeeb11bed40a6650"},"downloads":-1,"filename":"esdbclient-1.0.12-py3-none-any.whl","has_sig":false,"md5_digest":"d59fe7a30b27222c7cccbb6bbd232730","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":108822,"upload_time":"2023-11-30T11:28:41","upload_time_iso_8601":"2023-11-30T11:28:41.843312Z","url":"https://files.pythonhosted.org/packages/80/cd/2ffad359e4d40d82e9ff3269cb6821069b25be5204ee35e83d93c1e92840/esdbclient-1.0.12-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f1cdda43c0ff5d82983b2c00d7c78ed284d6eb0b09723d8dae6edf59c566a7f3","md5":"9368c7ed5587e4adefa03327b427c14b","sha256":"2d83751e5ee4d355edf2f14201413ca41de3944f143a85397fd26859b5d4e19d"},"downloads":-1,"filename":"esdbclient-1.0.12.tar.gz","has_sig":false,"md5_digest":"9368c7ed5587e4adefa03327b427c14b","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122407,"upload_time":"2023-11-30T11:28:44","upload_time_iso_8601":"2023-11-30T11:28:44.740079Z","url":"https://files.pythonhosted.org/packages/f1/cd/da43c0ff5d82983b2c00d7c78ed284d6eb0b09723d8dae6edf59c566a7f3/esdbclient-1.0.12.tar.gz","yanked":false,"yanked_reason":null}],"1.0.13":[{"comment_text":"","digests":{"blake2b_256":"1891140f4cc631832d8591e67db5d90130b10f4d7b326b5665f283f55a859370","md5":"8ee227f6e1eef1d3f372ecd5630062ca","sha256":"66974a41a621676c386bdcc2e06e6230b18da21de350e555f5f14a18b2d2a5e3"},"downloads":-1,"filename":"esdbclient-1.0.13-py3-none-any.whl","has_sig":false,"md5_digest":"8ee227f6e1eef1d3f372ecd5630062ca","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":109067,"upload_time":"2023-12-14T21:12:50","upload_time_iso_8601":"2023-12-14T21:12:50.163205Z","url":"https://files.pythonhosted.org/packages/18/91/140f4cc631832d8591e67db5d90130b10f4d7b326b5665f283f55a859370/esdbclient-1.0.13-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"88ea149dfc2b3caf9e85cad4f31a2f2abf89a1b2435679b1fbe189c231e26ade","md5":"ce5a7c56378365d2a128b3f3fb46fa07","sha256":"7965602ea2b2ed90dbd47c3ce99f7931904cbf0f4afbac0d9bfa81105806c507"},"downloads":-1,"filename":"esdbclient-1.0.13.tar.gz","has_sig":false,"md5_digest":"ce5a7c56378365d2a128b3f3fb46fa07","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122729,"upload_time":"2023-12-14T21:12:53","upload_time_iso_8601":"2023-12-14T21:12:53.345323Z","url":"https://files.pythonhosted.org/packages/88/ea/149dfc2b3caf9e85cad4f31a2f2abf89a1b2435679b1fbe189c231e26ade/esdbclient-1.0.13.tar.gz","yanked":false,"yanked_reason":null}],"1.0.14":[{"comment_text":"","digests":{"blake2b_256":"628f861b28b13c456e32e92878ae357aad531662aa79cda2dad80dc8597c0f8a","md5":"516c0d8bef23fb9ce9e46d863a4456e6","sha256":"4a36c12c03e5862fd8fbe279e9314123e5ed0f7f0ccb8ab268202537c5df8f77"},"downloads":-1,"filename":"esdbclient-1.0.14-py3-none-any.whl","has_sig":false,"md5_digest":"516c0d8bef23fb9ce9e46d863a4456e6","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":109440,"upload_time":"2023-12-20T13:07:56","upload_time_iso_8601":"2023-12-20T13:07:56.658029Z","url":"https://files.pythonhosted.org/packages/62/8f/861b28b13c456e32e92878ae357aad531662aa79cda2dad80dc8597c0f8a/esdbclient-1.0.14-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"58b7f3f802a1ce181ead3aee663d890542bdf600f515831faed94c49c6932df4","md5":"1b12c0ca5ef0a2690896b9f567c6e86d","sha256":"bf0398f620a465fd6c614817c452b41ea2fad5fde23e32d6fcadea16f11a299c"},"downloads":-1,"filename":"esdbclient-1.0.14.tar.gz","has_sig":false,"md5_digest":"1b12c0ca5ef0a2690896b9f567c6e86d","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":123243,"upload_time":"2023-12-20T13:07:58","upload_time_iso_8601":"2023-12-20T13:07:58.831102Z","url":"https://files.pythonhosted.org/packages/58/b7/f3f802a1ce181ead3aee663d890542bdf600f515831faed94c49c6932df4/esdbclient-1.0.14.tar.gz","yanked":false,"yanked_reason":null}],"1.0.15":[{"comment_text":"","digests":{"blake2b_256":"5957bf0802bca3181b0a7406fbf8f6e8315afb3e5a84f365b62f3b1e123a4258","md5":"16ebc82d5664aabb42aa6416efc84d6e","sha256":"4bb5330ccd42e623bd787bacdd10333471510d9971346ffecfaa359856ea163a"},"downloads":-1,"filename":"esdbclient-1.0.15-py3-none-any.whl","has_sig":false,"md5_digest":"16ebc82d5664aabb42aa6416efc84d6e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":109475,"upload_time":"2024-01-13T20:00:41","upload_time_iso_8601":"2024-01-13T20:00:41.387467Z","url":"https://files.pythonhosted.org/packages/59/57/bf0802bca3181b0a7406fbf8f6e8315afb3e5a84f365b62f3b1e123a4258/esdbclient-1.0.15-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ca0847cc88c28279fdf053e5dcbc69158bf787abde1485366469e6af48af867f","md5":"64137373b652505c08b6918962e7126e","sha256":"a26aa8e137a4eee08f8bd47267373f029794e64569c62ba3cfe807b1a17952d2"},"downloads":-1,"filename":"esdbclient-1.0.15.tar.gz","has_sig":false,"md5_digest":"64137373b652505c08b6918962e7126e","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":123268,"upload_time":"2024-01-13T20:00:44","upload_time_iso_8601":"2024-01-13T20:00:44.472431Z","url":"https://files.pythonhosted.org/packages/ca/08/47cc88c28279fdf053e5dcbc69158bf787abde1485366469e6af48af867f/esdbclient-1.0.15.tar.gz","yanked":false,"yanked_reason":null}],"1.0.16":[{"comment_text":"","digests":{"blake2b_256":"58be59bb60e604c084a5f0ae589459e330e62bc1b8bcba9ffc0fa28792cd24a6","md5":"7ce134766cbd4997558b8c615dbb478f","sha256":"d804ec8aa16734d0241ec6011f412c53aa5934df2409118e0e89b411daaf6233"},"downloads":-1,"filename":"esdbclient-1.0.16-py3-none-any.whl","has_sig":false,"md5_digest":"7ce134766cbd4997558b8c615dbb478f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":109507,"upload_time":"2024-01-14T04:44:01","upload_time_iso_8601":"2024-01-14T04:44:01.381780Z","url":"https://files.pythonhosted.org/packages/58/be/59bb60e604c084a5f0ae589459e330e62bc1b8bcba9ffc0fa28792cd24a6/esdbclient-1.0.16-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4f17292de1e0f4d5aba1880091bfaa55abbc4dc2987958c258aac1f343dcf4f1","md5":"19b19485cabe6932243358df91daec5b","sha256":"ff8c82bd2760f7ac2071564490a2cb9709878e6cda88497d4f98c5982d102ce4"},"downloads":-1,"filename":"esdbclient-1.0.16.tar.gz","has_sig":false,"md5_digest":"19b19485cabe6932243358df91daec5b","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":123312,"upload_time":"2024-01-14T04:44:05","upload_time_iso_8601":"2024-01-14T04:44:05.111328Z","url":"https://files.pythonhosted.org/packages/4f/17/292de1e0f4d5aba1880091bfaa55abbc4dc2987958c258aac1f343dcf4f1/esdbclient-1.0.16.tar.gz","yanked":false,"yanked_reason":null}],"1.0.17":[{"comment_text":"","digests":{"blake2b_256":"5fc3a75844614e5c57f1aeb64a808c313389c1588c12ca63c9a179ee727ecdad","md5":"8bdb45ec244b5dc8416bc8ad3cebf75d","sha256":"d62176ace1f140352490998f281a80ae72b82980649ce4ef5790f8948de02a39"},"downloads":-1,"filename":"esdbclient-1.0.17-py3-none-any.whl","has_sig":false,"md5_digest":"8bdb45ec244b5dc8416bc8ad3cebf75d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":109629,"upload_time":"2024-01-25T10:32:27","upload_time_iso_8601":"2024-01-25T10:32:27.012148Z","url":"https://files.pythonhosted.org/packages/5f/c3/a75844614e5c57f1aeb64a808c313389c1588c12ca63c9a179ee727ecdad/esdbclient-1.0.17-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0ed1f1fd03872c1647f3c2c4409b6e3f88427a3ac415b0720a34307e27107a9c","md5":"e322b9dda007babb26596db6855243b5","sha256":"91e593313e77f3583d04847334fc2bb0b2a4423ef45bb0399c9ba46e3b47fff6"},"downloads":-1,"filename":"esdbclient-1.0.17.tar.gz","has_sig":false,"md5_digest":"e322b9dda007babb26596db6855243b5","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":123520,"upload_time":"2024-01-25T10:32:29","upload_time_iso_8601":"2024-01-25T10:32:29.979862Z","url":"https://files.pythonhosted.org/packages/0e/d1/f1fd03872c1647f3c2c4409b6e3f88427a3ac415b0720a34307e27107a9c/esdbclient-1.0.17.tar.gz","yanked":false,"yanked_reason":null}],"1.0.18":[{"comment_text":"","digests":{"blake2b_256":"662675d6561937a20da373c82a0acbe6498bac783abaf13a49015f4299bcc3f0","md5":"daa42ad8eae1b02c661f7430ca44dbc5","sha256":"8638ffb3fadef21886845ab3627058f1376f7ba603fb568308ac1ef418d180e1"},"downloads":-1,"filename":"esdbclient-1.0.18-py3-none-any.whl","has_sig":false,"md5_digest":"daa42ad8eae1b02c661f7430ca44dbc5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":109950,"upload_time":"2024-03-15T20:39:28","upload_time_iso_8601":"2024-03-15T20:39:28.713773Z","url":"https://files.pythonhosted.org/packages/66/26/75d6561937a20da373c82a0acbe6498bac783abaf13a49015f4299bcc3f0/esdbclient-1.0.18-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"616a1be0f13470b555be766c441eaa6217f577a95f136ce6eb138d42b52bd6e1","md5":"76bd57588ae0721a921b4646bbbca322","sha256":"b70b7caff9bffd64e1a083253cb894e2b5c00278004f52eba7141e61b8706a58"},"downloads":-1,"filename":"esdbclient-1.0.18.tar.gz","has_sig":false,"md5_digest":"76bd57588ae0721a921b4646bbbca322","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":123975,"upload_time":"2024-03-15T20:39:31","upload_time_iso_8601":"2024-03-15T20:39:31.652525Z","url":"https://files.pythonhosted.org/packages/61/6a/1be0f13470b555be766c441eaa6217f577a95f136ce6eb138d42b52bd6e1/esdbclient-1.0.18.tar.gz","yanked":false,"yanked_reason":null}],"1.0.19":[{"comment_text":"","digests":{"blake2b_256":"7fcbc298e18e6a866b3a99424c748ed8317d3cdd7b952d41575ac2e7de85e1c1","md5":"bd77b3fe08c7d2e234dc97904dce6006","sha256":"47ba692770f618b6d3c53e11e5db896c0e47be6a7c29a5f86b529cef9e45328c"},"downloads":-1,"filename":"esdbclient-1.0.19-py3-none-any.whl","has_sig":false,"md5_digest":"bd77b3fe08c7d2e234dc97904dce6006","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":110312,"upload_time":"2024-04-02T17:27:11","upload_time_iso_8601":"2024-04-02T17:27:11.214174Z","url":"https://files.pythonhosted.org/packages/7f/cb/c298e18e6a866b3a99424c748ed8317d3cdd7b952d41575ac2e7de85e1c1/esdbclient-1.0.19-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2209319dfaa55bd5fed4f4d21889d835297cdadbf1fedba74c578dad57448ae4","md5":"07891d34b355a2714a106f263170b011","sha256":"c965c3587a42b390ce2f3b3651548f77103b0e4681c890fc2fdfa3397a8ffaa9"},"downloads":-1,"filename":"esdbclient-1.0.19.tar.gz","has_sig":false,"md5_digest":"07891d34b355a2714a106f263170b011","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":124806,"upload_time":"2024-04-02T17:27:14","upload_time_iso_8601":"2024-04-02T17:27:14.072813Z","url":"https://files.pythonhosted.org/packages/22/09/319dfaa55bd5fed4f4d21889d835297cdadbf1fedba74c578dad57448ae4/esdbclient-1.0.19.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"2a32dbe9d2bed73a15dbbc908d01f749c09b35eb3d75a9237ece7207eef2a66f","md5":"db4405fe7f5b641faa62ff5663b54a02","sha256":"90daf65f5f0998fc473613624cc46523e5772029a06dd3af6f34746ed71ade0e"},"downloads":-1,"filename":"esdbclient-1.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"db4405fe7f5b641faa62ff5663b54a02","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":104720,"upload_time":"2023-11-09T07:15:36","upload_time_iso_8601":"2023-11-09T07:15:36.880815Z","url":"https://files.pythonhosted.org/packages/2a/32/dbe9d2bed73a15dbbc908d01f749c09b35eb3d75a9237ece7207eef2a66f/esdbclient-1.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4a65b8fcd6969948d5db749e4980c104c6cc04e6ff394c69d40fd366f79190d3","md5":"b47cde69cc76b47990535f6260c28989","sha256":"2cc703d0ff7a7bc1f9cbd0e834f9348f5db6b0c426260077921207bd1e0e6552"},"downloads":-1,"filename":"esdbclient-1.0.2.tar.gz","has_sig":false,"md5_digest":"b47cde69cc76b47990535f6260c28989","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":117116,"upload_time":"2023-11-09T07:15:39","upload_time_iso_8601":"2023-11-09T07:15:39.391320Z","url":"https://files.pythonhosted.org/packages/4a/65/b8fcd6969948d5db749e4980c104c6cc04e6ff394c69d40fd366f79190d3/esdbclient-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.20":[{"comment_text":"","digests":{"blake2b_256":"ef7403af3cedc0e6b9f52412a0f3168c4f343961949074efe9049b330f482853","md5":"a5c46adf42c1be3c782a0bb91580fb75","sha256":"f4c26bb240beaf941cabc201669254de08ba2916c377da49cf373af64fd5e385"},"downloads":-1,"filename":"esdbclient-1.0.20-py3-none-any.whl","has_sig":false,"md5_digest":"a5c46adf42c1be3c782a0bb91580fb75","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":113102,"upload_time":"2024-04-04T03:48:39","upload_time_iso_8601":"2024-04-04T03:48:39.543935Z","url":"https://files.pythonhosted.org/packages/ef/74/03af3cedc0e6b9f52412a0f3168c4f343961949074efe9049b330f482853/esdbclient-1.0.20-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"97d5510c4f0c57e0f8874b1e8df83af65875a965e782440a3abb8cd5967564fc","md5":"a6e2c80ad47b044688413a8aa072b92a","sha256":"47589862bc1e56e664e5b2762889f8aec9a8adf9e634ca996fb23cbcbc7c6095"},"downloads":-1,"filename":"esdbclient-1.0.20.tar.gz","has_sig":false,"md5_digest":"a6e2c80ad47b044688413a8aa072b92a","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":129373,"upload_time":"2024-04-04T03:48:42","upload_time_iso_8601":"2024-04-04T03:48:42.554894Z","url":"https://files.pythonhosted.org/packages/97/d5/510c4f0c57e0f8874b1e8df83af65875a965e782440a3abb8cd5967564fc/esdbclient-1.0.20.tar.gz","yanked":false,"yanked_reason":null}],"1.0.21":[{"comment_text":"","digests":{"blake2b_256":"c7b325ced05ce22d3334b0d9137cdb4f817957f8c9dbe585e0b15c13314fbfb4","md5":"688fa7457145bb570f41a939ca2e1a09","sha256":"45f3d637ef895d4d15a09437d33fc678ffad001ae411d6b94a81d7b9648ed932"},"downloads":-1,"filename":"esdbclient-1.0.21-py3-none-any.whl","has_sig":false,"md5_digest":"688fa7457145bb570f41a939ca2e1a09","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":113957,"upload_time":"2024-04-05T05:18:01","upload_time_iso_8601":"2024-04-05T05:18:01.948907Z","url":"https://files.pythonhosted.org/packages/c7/b3/25ced05ce22d3334b0d9137cdb4f817957f8c9dbe585e0b15c13314fbfb4/esdbclient-1.0.21-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1963859923a1ae7d2b1efe24bff33b7712810063ef8025d3fbf2624762f8b1f1","md5":"3c38e4fa7529061df5fded1a538e96cb","sha256":"3e113824c4d90fe073f27a7518689298881c2bb63bb22ccc152ad8eaf770c366"},"downloads":-1,"filename":"esdbclient-1.0.21.tar.gz","has_sig":false,"md5_digest":"3c38e4fa7529061df5fded1a538e96cb","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":130660,"upload_time":"2024-04-05T05:18:05","upload_time_iso_8601":"2024-04-05T05:18:05.273675Z","url":"https://files.pythonhosted.org/packages/19/63/859923a1ae7d2b1efe24bff33b7712810063ef8025d3fbf2624762f8b1f1/esdbclient-1.0.21.tar.gz","yanked":false,"yanked_reason":null}],"1.0.22":[{"comment_text":"","digests":{"blake2b_256":"5dce47e9b10068a50ea467969aa66082253a3e877869411d3e496bfcecc88966","md5":"a9bc5fb2b28477916f88addf0449c213","sha256":"91e18249fda8e99783940f3d4a3189888e1b8fa3476905aac69985cb84e4a143"},"downloads":-1,"filename":"esdbclient-1.0.22-py3-none-any.whl","has_sig":false,"md5_digest":"a9bc5fb2b28477916f88addf0449c213","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":114180,"upload_time":"2024-04-08T19:29:39","upload_time_iso_8601":"2024-04-08T19:29:39.591903Z","url":"https://files.pythonhosted.org/packages/5d/ce/47e9b10068a50ea467969aa66082253a3e877869411d3e496bfcecc88966/esdbclient-1.0.22-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7a0634e836b9a9dd31e9cc4144af06cf66a4bab7f35989fcfe103107ed696162","md5":"115899353fee53e5441ba12393de1ffe","sha256":"b9fd39bb0fc233a8f2b453723e1a42a695b0bf376693fdc2fdcde072c9d39d5a"},"downloads":-1,"filename":"esdbclient-1.0.22.tar.gz","has_sig":false,"md5_digest":"115899353fee53e5441ba12393de1ffe","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":130954,"upload_time":"2024-04-08T19:29:43","upload_time_iso_8601":"2024-04-08T19:29:43.282825Z","url":"https://files.pythonhosted.org/packages/7a/06/34e836b9a9dd31e9cc4144af06cf66a4bab7f35989fcfe103107ed696162/esdbclient-1.0.22.tar.gz","yanked":false,"yanked_reason":null}],"1.0.23":[{"comment_text":"","digests":{"blake2b_256":"8b7e50d10d592f825ec05fae4787450fe4db83c7c927a1ad1e30bf6a7792b46c","md5":"6d5770b35212d2f80b7a027964660b1e","sha256":"392d26357178ed8c207a056a5df111e73819fc15a1c655880cefb45752ac1802"},"downloads":-1,"filename":"esdbclient-1.0.23-py3-none-any.whl","has_sig":false,"md5_digest":"6d5770b35212d2f80b7a027964660b1e","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":116468,"upload_time":"2024-04-26T09:46:55","upload_time_iso_8601":"2024-04-26T09:46:55.312398Z","url":"https://files.pythonhosted.org/packages/8b/7e/50d10d592f825ec05fae4787450fe4db83c7c927a1ad1e30bf6a7792b46c/esdbclient-1.0.23-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d4920f015f77199420464c97224e035e3334211919a8f6fec16df878c63b5791","md5":"95eae200ed9e971bba39d59d0db623db","sha256":"0c01a852f1759befa8648ec7588d8c37a7b5892c74beb3bfda7295cf8966244e"},"downloads":-1,"filename":"esdbclient-1.0.23.tar.gz","has_sig":false,"md5_digest":"95eae200ed9e971bba39d59d0db623db","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":133354,"upload_time":"2024-04-26T09:46:58","upload_time_iso_8601":"2024-04-26T09:46:58.289123Z","url":"https://files.pythonhosted.org/packages/d4/92/0f015f77199420464c97224e035e3334211919a8f6fec16df878c63b5791/esdbclient-1.0.23.tar.gz","yanked":false,"yanked_reason":null}],"1.0.24":[{"comment_text":"","digests":{"blake2b_256":"9bbbb3982bd5efec336611febc0c0815f80a76421d954b0e0413a6e9d35eeb1e","md5":"2ba1380d3a8923a1073e330458b86f5f","sha256":"1fee3d98091964ec429795b1e07ad5cad57082c60c77719046404aa87291e231"},"downloads":-1,"filename":"esdbclient-1.0.24-py3-none-any.whl","has_sig":false,"md5_digest":"2ba1380d3a8923a1073e330458b86f5f","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":116645,"upload_time":"2024-04-26T11:52:58","upload_time_iso_8601":"2024-04-26T11:52:58.432280Z","url":"https://files.pythonhosted.org/packages/9b/bb/b3982bd5efec336611febc0c0815f80a76421d954b0e0413a6e9d35eeb1e/esdbclient-1.0.24-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d2fcde23a90741b28446b7f0a26251ed609b7476eb4bade69341286644bed12c","md5":"5721d0947ec171e1a9ff322fa2f1d709","sha256":"09899a4194ba02dfdb18dee96cd41411def74cf3ce243d2eba436548c731a2c2"},"downloads":-1,"filename":"esdbclient-1.0.24.tar.gz","has_sig":false,"md5_digest":"5721d0947ec171e1a9ff322fa2f1d709","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":133660,"upload_time":"2024-04-26T11:53:01","upload_time_iso_8601":"2024-04-26T11:53:01.097918Z","url":"https://files.pythonhosted.org/packages/d2/fc/de23a90741b28446b7f0a26251ed609b7476eb4bade69341286644bed12c/esdbclient-1.0.24.tar.gz","yanked":false,"yanked_reason":null}],"1.0.25":[{"comment_text":"","digests":{"blake2b_256":"e0f904d1c54b2ceeb94be215d41adcdef3d83ed3357751da00a6adaf15de1714","md5":"fa6bf4f96a2c2a6bd9b9e023538238be","sha256":"18692aa7763cad72d757668cfdda83d88bbcb3d0f0946a7c07ee82ba1db9ca25"},"downloads":-1,"filename":"esdbclient-1.0.25-py3-none-any.whl","has_sig":false,"md5_digest":"fa6bf4f96a2c2a6bd9b9e023538238be","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":117782,"upload_time":"2024-04-30T11:37:04","upload_time_iso_8601":"2024-04-30T11:37:04.106963Z","url":"https://files.pythonhosted.org/packages/e0/f9/04d1c54b2ceeb94be215d41adcdef3d83ed3357751da00a6adaf15de1714/esdbclient-1.0.25-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d7552605407dbc2f13f43a08ff981355882a79eee4a3e71c792d017314922ada","md5":"70131690178c4c69e3c007e2e96e1c1d","sha256":"bc06954d6b9a810678dde66a1d520715c9ba7ea26d4702c473375131778c86c7"},"downloads":-1,"filename":"esdbclient-1.0.25.tar.gz","has_sig":false,"md5_digest":"70131690178c4c69e3c007e2e96e1c1d","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":134644,"upload_time":"2024-04-30T11:37:07","upload_time_iso_8601":"2024-04-30T11:37:07.388527Z","url":"https://files.pythonhosted.org/packages/d7/55/2605407dbc2f13f43a08ff981355882a79eee4a3e71c792d017314922ada/esdbclient-1.0.25.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"f28083f0c25dda9f85b316791b2e3f73789108b5716bf1547d444ae5073a65fa","md5":"afc703555e950902b74c2f6f2124d5e6","sha256":"965b139c96c376344dc268dc67d6a712b487d630fa56a33f85a2ec3abd0f61b9"},"downloads":-1,"filename":"esdbclient-1.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"afc703555e950902b74c2f6f2124d5e6","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":105302,"upload_time":"2023-11-21T01:49:13","upload_time_iso_8601":"2023-11-21T01:49:13.645384Z","url":"https://files.pythonhosted.org/packages/f2/80/83f0c25dda9f85b316791b2e3f73789108b5716bf1547d444ae5073a65fa/esdbclient-1.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4318fb8136b3f11906673aa7995b8b88023715575c3ccecbf416cbb5dc99d10a","md5":"c9b86440d9c49b43b8747d83c43d2463","sha256":"07e34d33e1a550a65fcc8f6d1b8350939cb402c6442d3739af7e1fe69648c522"},"downloads":-1,"filename":"esdbclient-1.0.3.tar.gz","has_sig":false,"md5_digest":"c9b86440d9c49b43b8747d83c43d2463","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":118029,"upload_time":"2023-11-21T01:49:16","upload_time_iso_8601":"2023-11-21T01:49:16.681608Z","url":"https://files.pythonhosted.org/packages/43/18/fb8136b3f11906673aa7995b8b88023715575c3ccecbf416cbb5dc99d10a/esdbclient-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.4":[{"comment_text":"","digests":{"blake2b_256":"f7cc658c392410f25e32821a39ac39b4fee8cb67af4107063456b101830288b9","md5":"995fd0a10f5d6829c837c93862e351a8","sha256":"c40adfa8eef3947ca2ac9f53e2f344d35f3a29df81d607a35c9a36f7ca8a2a31"},"downloads":-1,"filename":"esdbclient-1.0.4-py3-none-any.whl","has_sig":false,"md5_digest":"995fd0a10f5d6829c837c93862e351a8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":105463,"upload_time":"2023-11-21T06:59:22","upload_time_iso_8601":"2023-11-21T06:59:22.425679Z","url":"https://files.pythonhosted.org/packages/f7/cc/658c392410f25e32821a39ac39b4fee8cb67af4107063456b101830288b9/esdbclient-1.0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6bfb68f36ea0788c85eb38a0d2405d2371445cfbf0eeb3af89aafe0dda5a88bc","md5":"1771a9650f897294f2c8e2503eff74ab","sha256":"a3aa839bf1b443ea4dc3dff48bb2287f859e06392998c5b16c2c594e829c19a6"},"downloads":-1,"filename":"esdbclient-1.0.4.tar.gz","has_sig":false,"md5_digest":"1771a9650f897294f2c8e2503eff74ab","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":118351,"upload_time":"2023-11-21T06:59:25","upload_time_iso_8601":"2023-11-21T06:59:25.368997Z","url":"https://files.pythonhosted.org/packages/6b/fb/68f36ea0788c85eb38a0d2405d2371445cfbf0eeb3af89aafe0dda5a88bc/esdbclient-1.0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0.5":[{"comment_text":"","digests":{"blake2b_256":"ba05ea901da7b3386953ead83055ce30f2f3044fdc5f678e4b78eb863581689b","md5":"3e7db9657661eeccb62293f9f9e60cf5","sha256":"b8af00e343346bc03b928735a0b24d0487b3811870c8002b7d86d230d9ed4c22"},"downloads":-1,"filename":"esdbclient-1.0.5-py3-none-any.whl","has_sig":false,"md5_digest":"3e7db9657661eeccb62293f9f9e60cf5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":105690,"upload_time":"2023-11-21T15:31:05","upload_time_iso_8601":"2023-11-21T15:31:05.347730Z","url":"https://files.pythonhosted.org/packages/ba/05/ea901da7b3386953ead83055ce30f2f3044fdc5f678e4b78eb863581689b/esdbclient-1.0.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"75f32d93b8a60c4a3071784f43d6ecb0a04e224966445811f4182140185a21f8","md5":"fd7f1dd354bc8ca0760e79b56fd7d179","sha256":"8656d589a977e6cd1b748d9913017fe9f178bae321778143905aec1f27713dff"},"downloads":-1,"filename":"esdbclient-1.0.5.tar.gz","has_sig":false,"md5_digest":"fd7f1dd354bc8ca0760e79b56fd7d179","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":118644,"upload_time":"2023-11-21T15:31:08","upload_time_iso_8601":"2023-11-21T15:31:08.263397Z","url":"https://files.pythonhosted.org/packages/75/f3/2d93b8a60c4a3071784f43d6ecb0a04e224966445811f4182140185a21f8/esdbclient-1.0.5.tar.gz","yanked":false,"yanked_reason":null}],"1.0.6":[{"comment_text":"","digests":{"blake2b_256":"0fdac659d2ba1ec1eae8e47aa82c5e236b17681d7e758143e505019e2d54ba8f","md5":"6c0d15b70b6db1c309770c48d7ef2a46","sha256":"69767937b6100f1cb30a143f403d0744ef18dec2ae8308c77c82e4198c834b7e"},"downloads":-1,"filename":"esdbclient-1.0.6-py3-none-any.whl","has_sig":false,"md5_digest":"6c0d15b70b6db1c309770c48d7ef2a46","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":105744,"upload_time":"2023-11-21T15:39:00","upload_time_iso_8601":"2023-11-21T15:39:00.856961Z","url":"https://files.pythonhosted.org/packages/0f/da/c659d2ba1ec1eae8e47aa82c5e236b17681d7e758143e505019e2d54ba8f/esdbclient-1.0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"03a53ab060552d2ac01e6e35740b89a1d1f513a5e2b8e3acda07068e75a5506f","md5":"dd256e4a9727b1fc3fba159e7a461a4e","sha256":"861c00c940ef28116fc4351e93753081a5923cdf8ccabdc21f083e2b06d5383c"},"downloads":-1,"filename":"esdbclient-1.0.6.tar.gz","has_sig":false,"md5_digest":"dd256e4a9727b1fc3fba159e7a461a4e","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":118761,"upload_time":"2023-11-21T15:39:03","upload_time_iso_8601":"2023-11-21T15:39:03.773160Z","url":"https://files.pythonhosted.org/packages/03/a5/3ab060552d2ac01e6e35740b89a1d1f513a5e2b8e3acda07068e75a5506f/esdbclient-1.0.6.tar.gz","yanked":false,"yanked_reason":null}],"1.0.7":[{"comment_text":"","digests":{"blake2b_256":"0776186b7e4683e18f676bb3d2db1b808e7fbd7ed07c95fcdb9f1b70abc70050","md5":"441d08ddfcf82e4091496604c24d8906","sha256":"528370096c587eac5a3abaa98e1ed4c9f6a4796abfd2c22acd38bb1e02737dea"},"downloads":-1,"filename":"esdbclient-1.0.7-py3-none-any.whl","has_sig":false,"md5_digest":"441d08ddfcf82e4091496604c24d8906","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":106507,"upload_time":"2023-11-22T18:49:28","upload_time_iso_8601":"2023-11-22T18:49:28.183698Z","url":"https://files.pythonhosted.org/packages/07/76/186b7e4683e18f676bb3d2db1b808e7fbd7ed07c95fcdb9f1b70abc70050/esdbclient-1.0.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"197aa8d76b4410cf46cf134bdd2777f298bb3df8262d1dfae5e3a45f3c756bea","md5":"9be58acb07f93a96785b033419395489","sha256":"ffa5c7df8b906c646a154d1b7b71022cddac1012a2c22deab5f58b0fb8f1ec42"},"downloads":-1,"filename":"esdbclient-1.0.7.tar.gz","has_sig":false,"md5_digest":"9be58acb07f93a96785b033419395489","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":120108,"upload_time":"2023-11-22T18:49:31","upload_time_iso_8601":"2023-11-22T18:49:31.252980Z","url":"https://files.pythonhosted.org/packages/19/7a/a8d76b4410cf46cf134bdd2777f298bb3df8262d1dfae5e3a45f3c756bea/esdbclient-1.0.7.tar.gz","yanked":false,"yanked_reason":null}],"1.0.8":[{"comment_text":"","digests":{"blake2b_256":"4ce1cd446ac332160c999fea58f6b1b61dedde594c904a71e5a3373e2dc40cf0","md5":"fa1d4ac17455136bbe8f7db722287f11","sha256":"14329ef99c4f808d832c234dcb8b534aebf2dd69391ae64a0f97247917d2ef25"},"downloads":-1,"filename":"esdbclient-1.0.8-py3-none-any.whl","has_sig":false,"md5_digest":"fa1d4ac17455136bbe8f7db722287f11","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":106735,"upload_time":"2023-11-23T07:29:04","upload_time_iso_8601":"2023-11-23T07:29:04.404899Z","url":"https://files.pythonhosted.org/packages/4c/e1/cd446ac332160c999fea58f6b1b61dedde594c904a71e5a3373e2dc40cf0/esdbclient-1.0.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cf346627a309959c9285f3cbfe665cbdb2a1ea2d91f66b8593c77e00d948f688","md5":"af298a8225a6620eb0ad7ad3232816fb","sha256":"ef54ecbc4422d10c7892ee483831f575039121dd4acfb08e0759d09cf63ba388"},"downloads":-1,"filename":"esdbclient-1.0.8.tar.gz","has_sig":false,"md5_digest":"af298a8225a6620eb0ad7ad3232816fb","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":120357,"upload_time":"2023-11-23T07:29:07","upload_time_iso_8601":"2023-11-23T07:29:07.113381Z","url":"https://files.pythonhosted.org/packages/cf/34/6627a309959c9285f3cbfe665cbdb2a1ea2d91f66b8593c77e00d948f688/esdbclient-1.0.8.tar.gz","yanked":false,"yanked_reason":null}],"1.0.9":[{"comment_text":"","digests":{"blake2b_256":"8d65f13b9fbf09a3e607d67865179f19fb96512a21790e7571966ea9e344cd95","md5":"6701b0cc37cc3747fb47908c8159bc1f","sha256":"63a45a0fad7a0009090766b36bf05d6962c9f69cc8624854dfcd2e6f57cfb9d0"},"downloads":-1,"filename":"esdbclient-1.0.9-py3-none-any.whl","has_sig":false,"md5_digest":"6701b0cc37cc3747fb47908c8159bc1f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":108597,"upload_time":"2023-11-25T08:57:37","upload_time_iso_8601":"2023-11-25T08:57:37.380577Z","url":"https://files.pythonhosted.org/packages/8d/65/f13b9fbf09a3e607d67865179f19fb96512a21790e7571966ea9e344cd95/esdbclient-1.0.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"56a1bec713c4cb1f37a9773bbcf3b23a0f8bbe77c3d7675ddad87a24a04e805c","md5":"30fdf807adfda59ec8ae57492219f4f8","sha256":"0add843131c6cf03f6144f35a015d58e9b723aa393e509197cfead6f0b614298"},"downloads":-1,"filename":"esdbclient-1.0.9.tar.gz","has_sig":false,"md5_digest":"30fdf807adfda59ec8ae57492219f4f8","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122175,"upload_time":"2023-11-25T08:57:40","upload_time_iso_8601":"2023-11-25T08:57:40.814042Z","url":"https://files.pythonhosted.org/packages/56/a1/bec713c4cb1f37a9773bbcf3b23a0f8bbe77c3d7675ddad87a24a04e805c/esdbclient-1.0.9.tar.gz","yanked":false,"yanked_reason":null}],"1.0a1":[{"comment_text":"","digests":{"blake2b_256":"d7ee4981d6693a73a64e511b36d918ea297d8927982b4fd317a6ed938cd6bba1","md5":"1396ff6f928a43773cff5f1f6883dd1e","sha256":"0489865c5753f93f5c0035e944d4e7d0c45130060c55f0a7006ccf54781c4262"},"downloads":-1,"filename":"esdbclient-1.0a1-py3-none-any.whl","has_sig":false,"md5_digest":"1396ff6f928a43773cff5f1f6883dd1e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":85016,"upload_time":"2023-05-07T12:57:39","upload_time_iso_8601":"2023-05-07T12:57:39.130795Z","url":"https://files.pythonhosted.org/packages/d7/ee/4981d6693a73a64e511b36d918ea297d8927982b4fd317a6ed938cd6bba1/esdbclient-1.0a1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b311882738ae2b850082be1d3d3ef714ac16e096652959b82a27b5f446250912","md5":"ea124a84a3f64afd03b849162385c083","sha256":"50780aa93fabc8ab87ef30bff306bb7d58645b145d793bc2cd22542c6dcd549d"},"downloads":-1,"filename":"esdbclient-1.0a1.tar.gz","has_sig":false,"md5_digest":"ea124a84a3f64afd03b849162385c083","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":113994,"upload_time":"2023-05-07T12:57:41","upload_time_iso_8601":"2023-05-07T12:57:41.671148Z","url":"https://files.pythonhosted.org/packages/b3/11/882738ae2b850082be1d3d3ef714ac16e096652959b82a27b5f446250912/esdbclient-1.0a1.tar.gz","yanked":false,"yanked_reason":null}],"1.0a2":[{"comment_text":"","digests":{"blake2b_256":"e63895bb4311df4944e72355e49298201936f9b64adf2073b49a9b5fa565d91d","md5":"5bef23d456c52a7d0fa522b6b4533574","sha256":"c4e169eb1bb7555241e3f2c3892892c22d5980c662e39ecfb25a01fb53f79c39"},"downloads":-1,"filename":"esdbclient-1.0a2-py3-none-any.whl","has_sig":false,"md5_digest":"5bef23d456c52a7d0fa522b6b4533574","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":94394,"upload_time":"2023-05-10T23:34:20","upload_time_iso_8601":"2023-05-10T23:34:20.560820Z","url":"https://files.pythonhosted.org/packages/e6/38/95bb4311df4944e72355e49298201936f9b64adf2073b49a9b5fa565d91d/esdbclient-1.0a2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e24d5fb0d8d680cde508bed2eb64ad0f2b4e65f14b4855f195b40d59c6b95570","md5":"24c2ca05427ba68a5d366dfff4b2024f","sha256":"e8f5e760a1b50205f7e2e7532ed6e913bacbdb5b26628063a82e69c740d249c7"},"downloads":-1,"filename":"esdbclient-1.0a2.tar.gz","has_sig":false,"md5_digest":"24c2ca05427ba68a5d366dfff4b2024f","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122030,"upload_time":"2023-05-10T23:34:32","upload_time_iso_8601":"2023-05-10T23:34:32.009281Z","url":"https://files.pythonhosted.org/packages/e2/4d/5fb0d8d680cde508bed2eb64ad0f2b4e65f14b4855f195b40d59c6b95570/esdbclient-1.0a2.tar.gz","yanked":false,"yanked_reason":null}],"1.0a3":[{"comment_text":"","digests":{"blake2b_256":"77294da3d977881d049820ee2dca28da3077e551b1114be3b28f9a8eb54d9313","md5":"341fac2e271762be2a2c3f490c1ae9e8","sha256":"32550467ab7ad21b51cc91a1c1ca90f92f00f52bb7764770467ccc38a283f120"},"downloads":-1,"filename":"esdbclient-1.0a3-py3-none-any.whl","has_sig":false,"md5_digest":"341fac2e271762be2a2c3f490c1ae9e8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":94394,"upload_time":"2023-05-11T00:28:10","upload_time_iso_8601":"2023-05-11T00:28:10.687335Z","url":"https://files.pythonhosted.org/packages/77/29/4da3d977881d049820ee2dca28da3077e551b1114be3b28f9a8eb54d9313/esdbclient-1.0a3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"75e116fc26ffce1fa0feb82350d5cae695cbbbf55501e019ed6de9e85d515453","md5":"670273495b253b292cd5c492d1036e6b","sha256":"34922e99fbf391d51a575684cdf788fee0257ac6b697901c6316ebd66af1c348"},"downloads":-1,"filename":"esdbclient-1.0a3.tar.gz","has_sig":false,"md5_digest":"670273495b253b292cd5c492d1036e6b","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":122043,"upload_time":"2023-05-11T00:28:14","upload_time_iso_8601":"2023-05-11T00:28:14.278497Z","url":"https://files.pythonhosted.org/packages/75/e1/16fc26ffce1fa0feb82350d5cae695cbbbf55501e019ed6de9e85d515453/esdbclient-1.0a3.tar.gz","yanked":false,"yanked_reason":null}],"1.0a4":[{"comment_text":"","digests":{"blake2b_256":"baa21c3d38688a6f6fcc1ceed416e3bbec69746d5d396c7491d19ba76e70ad2f","md5":"2079483a9fa3f3305c060e5315fa74c1","sha256":"66ba27597846a1ed4fe3e893f0e99f0f63dda08fc7bb356d3e52ac702e69120e"},"downloads":-1,"filename":"esdbclient-1.0a4-py3-none-any.whl","has_sig":false,"md5_digest":"2079483a9fa3f3305c060e5315fa74c1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":94947,"upload_time":"2023-05-11T10:22:04","upload_time_iso_8601":"2023-05-11T10:22:04.968754Z","url":"https://files.pythonhosted.org/packages/ba/a2/1c3d38688a6f6fcc1ceed416e3bbec69746d5d396c7491d19ba76e70ad2f/esdbclient-1.0a4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6d131f2413db158534b1f6da11ce2439b9114e7cf51f28d523979e1f03f33aac","md5":"10ee7e8dcf906535d6caeab2af01e740","sha256":"39e0bc443c25268130b1b1d3fe2d43cc50f1917bca0a9b28cc8b4927e165d74d"},"downloads":-1,"filename":"esdbclient-1.0a4.tar.gz","has_sig":false,"md5_digest":"10ee7e8dcf906535d6caeab2af01e740","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":123589,"upload_time":"2023-05-11T10:22:08","upload_time_iso_8601":"2023-05-11T10:22:08.289419Z","url":"https://files.pythonhosted.org/packages/6d/13/1f2413db158534b1f6da11ce2439b9114e7cf51f28d523979e1f03f33aac/esdbclient-1.0a4.tar.gz","yanked":false,"yanked_reason":null}],"1.0a5":[{"comment_text":"","digests":{"blake2b_256":"7e299b793fb65de6aedf444088d82af7c5e2394970a7fc4625f8db12ac501179","md5":"f69d8e8c301f14c6d651183f6b03ee31","sha256":"1482226f65a6c5a553c45db1b087f30647bfcbc50b776323dc09035a88691a56"},"downloads":-1,"filename":"esdbclient-1.0a5-py3-none-any.whl","has_sig":false,"md5_digest":"f69d8e8c301f14c6d651183f6b03ee31","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":98297,"upload_time":"2023-05-16T19:48:03","upload_time_iso_8601":"2023-05-16T19:48:03.442180Z","url":"https://files.pythonhosted.org/packages/7e/29/9b793fb65de6aedf444088d82af7c5e2394970a7fc4625f8db12ac501179/esdbclient-1.0a5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7aeaa5b0520fdd34265f376345293182eba64c8218cf096ed6d92dad99432899","md5":"4dee086fa0f92fc297e216a0bc301043","sha256":"18ec53e9634782217d411dc5a6f5e347844a51433dde13f62ec23c1064984598"},"downloads":-1,"filename":"esdbclient-1.0a5.tar.gz","has_sig":false,"md5_digest":"4dee086fa0f92fc297e216a0bc301043","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":132610,"upload_time":"2023-05-16T19:48:05","upload_time_iso_8601":"2023-05-16T19:48:05.841330Z","url":"https://files.pythonhosted.org/packages/7a/ea/a5b0520fdd34265f376345293182eba64c8218cf096ed6d92dad99432899/esdbclient-1.0a5.tar.gz","yanked":false,"yanked_reason":null}],"1.0a6":[{"comment_text":"","digests":{"blake2b_256":"afd38666eb3ebce28e41c2d8bb49bd56b96e0b103a592669e46c445a16e1ac7e","md5":"3620297b94359e0d2f046580e21c2328","sha256":"07835d14399e9ce3db5bc6f4e5a9cf941abf8933efd8fb8080378871c5e2a818"},"downloads":-1,"filename":"esdbclient-1.0a6-py3-none-any.whl","has_sig":false,"md5_digest":"3620297b94359e0d2f046580e21c2328","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":100126,"upload_time":"2023-05-22T13:36:05","upload_time_iso_8601":"2023-05-22T13:36:05.781873Z","url":"https://files.pythonhosted.org/packages/af/d3/8666eb3ebce28e41c2d8bb49bd56b96e0b103a592669e46c445a16e1ac7e/esdbclient-1.0a6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1e88ca25597a80d3d82cb89790dced3f9c80cf81fd19f6e9b86c72714c1a7528","md5":"4aa9c9a48ef7dfae06ca76126cf8933f","sha256":"beb1027f13ce0048ede437b681e5b0e65be25280975812f5c31e0c79939db0af"},"downloads":-1,"filename":"esdbclient-1.0a6.tar.gz","has_sig":false,"md5_digest":"4aa9c9a48ef7dfae06ca76126cf8933f","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":137275,"upload_time":"2023-05-22T13:36:08","upload_time_iso_8601":"2023-05-22T13:36:08.543553Z","url":"https://files.pythonhosted.org/packages/1e/88/ca25597a80d3d82cb89790dced3f9c80cf81fd19f6e9b86c72714c1a7528/esdbclient-1.0a6.tar.gz","yanked":false,"yanked_reason":null}],"1.0a7":[{"comment_text":"","digests":{"blake2b_256":"70d7aaddfa1f0dd9a8abec637417373bd28967f9b645e50d4c46dfad180397ef","md5":"f3bd4484765faf6e0a7f7f19850ea314","sha256":"1cc39b3f92f1826416730752e4ac10631ded42ec2122b4b3fa908a51fb7870f1"},"downloads":-1,"filename":"esdbclient-1.0a7-py3-none-any.whl","has_sig":false,"md5_digest":"f3bd4484765faf6e0a7f7f19850ea314","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":102510,"upload_time":"2023-06-02T23:10:18","upload_time_iso_8601":"2023-06-02T23:10:18.687046Z","url":"https://files.pythonhosted.org/packages/70/d7/aaddfa1f0dd9a8abec637417373bd28967f9b645e50d4c46dfad180397ef/esdbclient-1.0a7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e22f4d7a74c097df41b9da1b406ba2fc8a70fe5f18e923e2cff2798a4335761a","md5":"9810f6ccb4b2d8af60021f45adbe72e7","sha256":"c9a98a27b1a044268501448bbc9e1867e67f93dd0fb701bb9d260c1691106e38"},"downloads":-1,"filename":"esdbclient-1.0a7.tar.gz","has_sig":false,"md5_digest":"9810f6ccb4b2d8af60021f45adbe72e7","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":139762,"upload_time":"2023-06-02T23:10:23","upload_time_iso_8601":"2023-06-02T23:10:23.332501Z","url":"https://files.pythonhosted.org/packages/e2/2f/4d7a74c097df41b9da1b406ba2fc8a70fe5f18e923e2cff2798a4335761a/esdbclient-1.0a7.tar.gz","yanked":false,"yanked_reason":null}],"1.0b1":[{"comment_text":"","digests":{"blake2b_256":"3d6f9bc9b361270f5b76f5c571a83029b9af1ba0fbd09a6645baad5fc879bd7c","md5":"8232830a32b5741566a5c12a89355903","sha256":"ae0ea049139334ccda5e6942d29f7a32ae475ceb0ba1f960d7ef76ded6191e26"},"downloads":-1,"filename":"esdbclient-1.0b1-py3-none-any.whl","has_sig":false,"md5_digest":"8232830a32b5741566a5c12a89355903","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":102861,"upload_time":"2023-08-11T12:19:21","upload_time_iso_8601":"2023-08-11T12:19:21.651666Z","url":"https://files.pythonhosted.org/packages/3d/6f/9bc9b361270f5b76f5c571a83029b9af1ba0fbd09a6645baad5fc879bd7c/esdbclient-1.0b1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9a62913e404e3453c2b1c803dd0b5be956c5f6c324aeffa26593657f78740f1d","md5":"3e5386fc2c652fa1253b41141a11cf8a","sha256":"fac2ba8e91d5d89cbc4eb0863703e426cc1a223dea1a6861bbbf4a56b5536b34"},"downloads":-1,"filename":"esdbclient-1.0b1.tar.gz","has_sig":false,"md5_digest":"3e5386fc2c652fa1253b41141a11cf8a","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":140723,"upload_time":"2023-08-11T12:19:23","upload_time_iso_8601":"2023-08-11T12:19:23.474314Z","url":"https://files.pythonhosted.org/packages/9a/62/913e404e3453c2b1c803dd0b5be956c5f6c324aeffa26593657f78740f1d/esdbclient-1.0b1.tar.gz","yanked":false,"yanked_reason":null}],"1.0b2":[{"comment_text":"","digests":{"blake2b_256":"6c95f376b4ce94f2916a25908d7532c9f630e2568b86434de70710f107369e4c","md5":"c55b3f5631267d411dc788559735217c","sha256":"315bd052d4098410c53bb7a17e5572974aa8a31c688e9672ed58b6eb17461668"},"downloads":-1,"filename":"esdbclient-1.0b2-py3-none-any.whl","has_sig":false,"md5_digest":"c55b3f5631267d411dc788559735217c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":103270,"upload_time":"2023-10-12T18:53:29","upload_time_iso_8601":"2023-10-12T18:53:29.489004Z","url":"https://files.pythonhosted.org/packages/6c/95/f376b4ce94f2916a25908d7532c9f630e2568b86434de70710f107369e4c/esdbclient-1.0b2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3a7c2c2197a70daad75358b65e68ac98c0e661196bb996d365cd7e4c4b391f52","md5":"cd635da7e35efd788ece0eff114af85d","sha256":"f8c07062517a57478937c6adb0464c99cab321f7047279b17f50b451181d8410"},"downloads":-1,"filename":"esdbclient-1.0b2.tar.gz","has_sig":false,"md5_digest":"cd635da7e35efd788ece0eff114af85d","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":141114,"upload_time":"2023-10-12T18:53:31","upload_time_iso_8601":"2023-10-12T18:53:31.128208Z","url":"https://files.pythonhosted.org/packages/3a/7c/2c2197a70daad75358b65e68ac98c0e661196bb996d365cd7e4c4b391f52/esdbclient-1.0b2.tar.gz","yanked":false,"yanked_reason":null}],"1.0b3":[{"comment_text":"","digests":{"blake2b_256":"7b1828bc60f17ba0ad6e1136dbb37e9cfa37a73a8c29e0cc2c74a005c386dbe0","md5":"4247cef9f98d4d03330509844599bd4b","sha256":"2211058f08b9e730f3b5cdc6f234f82938a884ea79d26956c8da1c30592b5828"},"downloads":-1,"filename":"esdbclient-1.0b3-py3-none-any.whl","has_sig":false,"md5_digest":"4247cef9f98d4d03330509844599bd4b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":103553,"upload_time":"2023-10-12T19:29:45","upload_time_iso_8601":"2023-10-12T19:29:45.408681Z","url":"https://files.pythonhosted.org/packages/7b/18/28bc60f17ba0ad6e1136dbb37e9cfa37a73a8c29e0cc2c74a005c386dbe0/esdbclient-1.0b3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9330573ab738ea9798ed8d6ce6c943047922a3706e9dd85661fd8c246f37859c","md5":"0ef867549a0760f2317fe584c723ab69","sha256":"68c5c086962750da9d0f8b110bc86aa1c665ffc96130cdaca534abd8d6d038d3"},"downloads":-1,"filename":"esdbclient-1.0b3.tar.gz","has_sig":false,"md5_digest":"0ef867549a0760f2317fe584c723ab69","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":141462,"upload_time":"2023-10-12T19:29:47","upload_time_iso_8601":"2023-10-12T19:29:47.331933Z","url":"https://files.pythonhosted.org/packages/93/30/573ab738ea9798ed8d6ce6c943047922a3706e9dd85661fd8c246f37859c/esdbclient-1.0b3.tar.gz","yanked":false,"yanked_reason":null}],"1.0b4":[{"comment_text":"","digests":{"blake2b_256":"049e19f84ec3f2deb32dbc098171ef833ddc556eec5e8004a66102302bc8dc32","md5":"2e242e1bd4b1acd2d3b077b50b9d7036","sha256":"238f1d319e5059cc7ab73b22da28de0179f50635c5248d5e0fffb2ecc7857871"},"downloads":-1,"filename":"esdbclient-1.0b4-py3-none-any.whl","has_sig":false,"md5_digest":"2e242e1bd4b1acd2d3b077b50b9d7036","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":103784,"upload_time":"2023-10-15T19:25:34","upload_time_iso_8601":"2023-10-15T19:25:34.552030Z","url":"https://files.pythonhosted.org/packages/04/9e/19f84ec3f2deb32dbc098171ef833ddc556eec5e8004a66102302bc8dc32/esdbclient-1.0b4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"00e62c6c9d30544b5bffbf82f0bba485a240220d8d5daa8b72c19905b1ccddaf","md5":"aadf1099cb295881bc1ef3f3ff4ecaab","sha256":"45f52cea356fb35dbddaedec18f586b624d0b130a5a1a99de916d6e7d68ef7f3"},"downloads":-1,"filename":"esdbclient-1.0b4.tar.gz","has_sig":false,"md5_digest":"aadf1099cb295881bc1ef3f3ff4ecaab","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":141948,"upload_time":"2023-10-15T19:25:36","upload_time_iso_8601":"2023-10-15T19:25:36.497944Z","url":"https://files.pythonhosted.org/packages/00/e6/2c6c9d30544b5bffbf82f0bba485a240220d8d5daa8b72c19905b1ccddaf/esdbclient-1.0b4.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"4dd60f30e9177ca9d614dca8f3e8958f920fbd3b87d7abce834a6084dbe708a8","md5":"541fc2333f3fcc06d15d0ec43edf275f","sha256":"5de157ae3c361af21355e39ed1dbdafcc1fece20accdbbd1a836d53ba2b1b3fa"},"downloads":-1,"filename":"esdbclient-1.1-py3-none-any.whl","has_sig":false,"md5_digest":"541fc2333f3fcc06d15d0ec43edf275f","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":144397,"upload_time":"2024-07-02T16:56:52","upload_time_iso_8601":"2024-07-02T16:56:52.294026Z","url":"https://files.pythonhosted.org/packages/4d/d6/0f30e9177ca9d614dca8f3e8958f920fbd3b87d7abce834a6084dbe708a8/esdbclient-1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5034d46c44f9d6baec3e3b0a6df6583c17b4a02e095458804d561a952726aac3","md5":"4d9303bd362ce3cf791e168fe30248d7","sha256":"8c3eaa033766cfb7efc6266d6160956ed62df478b3489510ac50910383d9f8b0"},"downloads":-1,"filename":"esdbclient-1.1.tar.gz","has_sig":false,"md5_digest":"4d9303bd362ce3cf791e168fe30248d7","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162125,"upload_time":"2024-07-02T16:56:58","upload_time_iso_8601":"2024-07-02T16:56:58.959642Z","url":"https://files.pythonhosted.org/packages/50/34/d46c44f9d6baec3e3b0a6df6583c17b4a02e095458804d561a952726aac3/esdbclient-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"d21a5d16608adef5240a8ac43dcfc794ab44fda9b8048e33c2f1bf916a9249d8","md5":"a3d743948d07ecd80beace9ec179df22","sha256":"db2d5abc008dff55f54820bab2f9dfd07228fb587deb5cbac7bc5bae24aaed2f"},"downloads":-1,"filename":"esdbclient-1.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"a3d743948d07ecd80beace9ec179df22","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":144784,"upload_time":"2024-08-19T23:47:35","upload_time_iso_8601":"2024-08-19T23:47:35.930722Z","url":"https://files.pythonhosted.org/packages/d2/1a/5d16608adef5240a8ac43dcfc794ab44fda9b8048e33c2f1bf916a9249d8/esdbclient-1.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e83827512437b7bebe830d4569e30f75fff25b98f52967ca3ea238ce30837a69","md5":"6f1cfb2eea3df2f9cd54865be76c4528","sha256":"213fab246ae185752797bb34e1444770bc408e618aa58d6a14772d8d8f88f09f"},"downloads":-1,"filename":"esdbclient-1.1.1.tar.gz","has_sig":false,"md5_digest":"6f1cfb2eea3df2f9cd54865be76c4528","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162560,"upload_time":"2024-08-19T23:47:38","upload_time_iso_8601":"2024-08-19T23:47:38.144139Z","url":"https://files.pythonhosted.org/packages/e8/38/27512437b7bebe830d4569e30f75fff25b98f52967ca3ea238ce30837a69/esdbclient-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.2":[{"comment_text":"","digests":{"blake2b_256":"1f09fec79ec1fc1806a663322731cfdc705c92b2623da10751c0ab2d8658a812","md5":"f937245edb5059b197fcd9f77599c23c","sha256":"934ddffc1d73912e878b62284ab3cfaace0de13a926657244564b9c0580f9d2a"},"downloads":-1,"filename":"esdbclient-1.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"f937245edb5059b197fcd9f77599c23c","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":145030,"upload_time":"2024-10-24T14:46:36","upload_time_iso_8601":"2024-10-24T14:46:36.607888Z","url":"https://files.pythonhosted.org/packages/1f/09/fec79ec1fc1806a663322731cfdc705c92b2623da10751c0ab2d8658a812/esdbclient-1.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3ded444565504ba04cec15eb753b61a0443b07c387c1ce88d00e8ecf7d1ac51c","md5":"011e497994cf3c22387376567023d54a","sha256":"9731688e716a44b9f060652718b05c0fb7d9abf466cfeabf9b257d9ceeb8bb8e"},"downloads":-1,"filename":"esdbclient-1.1.2.tar.gz","has_sig":false,"md5_digest":"011e497994cf3c22387376567023d54a","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162961,"upload_time":"2024-10-24T14:46:38","upload_time_iso_8601":"2024-10-24T14:46:38.334292Z","url":"https://files.pythonhosted.org/packages/3d/ed/444565504ba04cec15eb753b61a0443b07c387c1ce88d00e8ecf7d1ac51c/esdbclient-1.1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.1.3":[{"comment_text":"","digests":{"blake2b_256":"78f3567db05e7c2d8efe0211263340854f9fab3284213b0d3062bbb589109978","md5":"af96dfaf12de797845c826354079720f","sha256":"bc3f337ff6d20e5b2dfe0c552d8bf4ce45ab8d60129b4ebca6120668a4052c10"},"downloads":-1,"filename":"esdbclient-1.1.3-py3-none-any.whl","has_sig":false,"md5_digest":"af96dfaf12de797845c826354079720f","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":145031,"upload_time":"2024-11-08T02:41:52","upload_time_iso_8601":"2024-11-08T02:41:52.257200Z","url":"https://files.pythonhosted.org/packages/78/f3/567db05e7c2d8efe0211263340854f9fab3284213b0d3062bbb589109978/esdbclient-1.1.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"16ea39338bea95be626ef583c88db91d4e7ff27e339e6754126db5a8e0326d49","md5":"cf580e3717064b938d3d1ed1978ed0db","sha256":"be40ed914e322ca954d279a56ecb0a2b44894554bdb24ff817e946ebed9a89c6"},"downloads":-1,"filename":"esdbclient-1.1.3.tar.gz","has_sig":false,"md5_digest":"cf580e3717064b938d3d1ed1978ed0db","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162993,"upload_time":"2024-11-08T02:41:54","upload_time_iso_8601":"2024-11-08T02:41:54.654414Z","url":"https://files.pythonhosted.org/packages/16/ea/39338bea95be626ef583c88db91d4e7ff27e339e6754126db5a8e0326d49/esdbclient-1.1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.1.4":[{"comment_text":"","digests":{"blake2b_256":"fef750caebb0ae9cd5afdb2053cd3bd45773c0c3bad764f971e329fe80e55379","md5":"4dd2796dbcc9f1310ecd832192d7bb48","sha256":"a186859a57e364ff61cf53bb1ce5893dd8fd89c10f006c69c5724923af504df9"},"downloads":-1,"filename":"esdbclient-1.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"4dd2796dbcc9f1310ecd832192d7bb48","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":145022,"upload_time":"2024-11-19T14:18:05","upload_time_iso_8601":"2024-11-19T14:18:05.882113Z","url":"https://files.pythonhosted.org/packages/fe/f7/50caebb0ae9cd5afdb2053cd3bd45773c0c3bad764f971e329fe80e55379/esdbclient-1.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"03f38afd9c5fa10e1cb045862fde4fd9c2fef9b6223e77871579d40eaffd15f8","md5":"a673308edc3ca393707319111edf44aa","sha256":"2b18a33a4e005996cf86b5c23e39fb81418d8a1286edd4cdb432e74dda07548a"},"downloads":-1,"filename":"esdbclient-1.1.4.tar.gz","has_sig":false,"md5_digest":"a673308edc3ca393707319111edf44aa","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162965,"upload_time":"2024-11-19T14:18:07","upload_time_iso_8601":"2024-11-19T14:18:07.704506Z","url":"https://files.pythonhosted.org/packages/03/f3/8afd9c5fa10e1cb045862fde4fd9c2fef9b6223e77871579d40eaffd15f8/esdbclient-1.1.4.tar.gz","yanked":false,"yanked_reason":null}],"1.1b1":[{"comment_text":"","digests":{"blake2b_256":"a98f15fcdf4fb5a267c332e349b92bdba552fb198a5740d3f7591f16715a4d5c","md5":"c2521bc25412b561835ddd9764e2621b","sha256":"67b42c4416b1b86420dc42a263f3933f55e6f582f66e9ec768df4e382e46c0db"},"downloads":-1,"filename":"esdbclient-1.1b1-py3-none-any.whl","has_sig":false,"md5_digest":"c2521bc25412b561835ddd9764e2621b","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":130192,"upload_time":"2024-05-07T17:50:53","upload_time_iso_8601":"2024-05-07T17:50:53.516597Z","url":"https://files.pythonhosted.org/packages/a9/8f/15fcdf4fb5a267c332e349b92bdba552fb198a5740d3f7591f16715a4d5c/esdbclient-1.1b1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e48c6ca17e7b3734af921af9f10d86b4333583236ae064242bf1b48c093fcaa3","md5":"cbb7e515084901cbdb12099fda4aba69","sha256":"4fe9d1593f1f5777be334a55e0d0c93bed31f8f79baf11ab31ee932b38f73acc"},"downloads":-1,"filename":"esdbclient-1.1b1.tar.gz","has_sig":false,"md5_digest":"cbb7e515084901cbdb12099fda4aba69","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":146969,"upload_time":"2024-05-07T17:50:56","upload_time_iso_8601":"2024-05-07T17:50:56.623462Z","url":"https://files.pythonhosted.org/packages/e4/8c/6ca17e7b3734af921af9f10d86b4333583236ae064242bf1b48c093fcaa3/esdbclient-1.1b1.tar.gz","yanked":false,"yanked_reason":null}],"1.1b2":[{"comment_text":"","digests":{"blake2b_256":"29cc149f19d6a423d0fb13cee9a4642cc0867a300a18228ae05685a3d32b96fd","md5":"9523bb3529d52aa663ac1745dbbd1c58","sha256":"5137b8e0302459f14a34791e50018d7d0165a6c1145ce9bb3f00271575f0a3a0"},"downloads":-1,"filename":"esdbclient-1.1b2-py3-none-any.whl","has_sig":false,"md5_digest":"9523bb3529d52aa663ac1745dbbd1c58","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":129925,"upload_time":"2024-05-09T16:59:49","upload_time_iso_8601":"2024-05-09T16:59:49.338759Z","url":"https://files.pythonhosted.org/packages/29/cc/149f19d6a423d0fb13cee9a4642cc0867a300a18228ae05685a3d32b96fd/esdbclient-1.1b2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"461caec208bd150115ba18419c03f4d3f18b8ae49136ee54964aa6be7dfee5c9","md5":"0ab5284e2dda1cd5de7a32aaecf7c257","sha256":"e75b96f3ff21ade2c0bb04a90dde8a06d49afb251a4e58340b0d878ac40c0878"},"downloads":-1,"filename":"esdbclient-1.1b2.tar.gz","has_sig":false,"md5_digest":"0ab5284e2dda1cd5de7a32aaecf7c257","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":146901,"upload_time":"2024-05-09T16:59:52","upload_time_iso_8601":"2024-05-09T16:59:52.629096Z","url":"https://files.pythonhosted.org/packages/46/1c/aec208bd150115ba18419c03f4d3f18b8ae49136ee54964aa6be7dfee5c9/esdbclient-1.1b2.tar.gz","yanked":false,"yanked_reason":null}],"1.1b3":[{"comment_text":"","digests":{"blake2b_256":"5a18b4b4d9793c9c5cb067e73b51ce735e3c193132953d894fc75daf21bce047","md5":"bd5fcab5428ac0563c58b2d9ea48783d","sha256":"eb98520c0b83678801521dbc3670566a6df10869af5acaf33f1086ae534d322f"},"downloads":-1,"filename":"esdbclient-1.1b3-py3-none-any.whl","has_sig":false,"md5_digest":"bd5fcab5428ac0563c58b2d9ea48783d","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.7","size":130553,"upload_time":"2024-05-20T17:39:57","upload_time_iso_8601":"2024-05-20T17:39:57.720013Z","url":"https://files.pythonhosted.org/packages/5a/18/b4b4d9793c9c5cb067e73b51ce735e3c193132953d894fc75daf21bce047/esdbclient-1.1b3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"44393772592017ccaf194f9f62d7ca80f48d5a4f94662fd6d69a7b0a15b14f07","md5":"b191770d03b56a0b1f17bf4ee5ea640d","sha256":"6bdcbe506ad81459b5436db8eb898cca74a1b0206d4d5e6b3584518100288e18"},"downloads":-1,"filename":"esdbclient-1.1b3.tar.gz","has_sig":false,"md5_digest":"b191770d03b56a0b1f17bf4ee5ea640d","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.7","size":148139,"upload_time":"2024-05-20T17:40:01","upload_time_iso_8601":"2024-05-20T17:40:01.111340Z","url":"https://files.pythonhosted.org/packages/44/39/3772592017ccaf194f9f62d7ca80f48d5a4f94662fd6d69a7b0a15b14f07/esdbclient-1.1b3.tar.gz","yanked":false,"yanked_reason":null}],"1.1b4":[{"comment_text":"","digests":{"blake2b_256":"e2b47e64316c18abafbeb64830a4acaf74959963ecee137670f7d9bfb07afe5c","md5":"5caca1eea3684d9ec3e867470bdd08f4","sha256":"b582d78514094ce639bdaa4af7dd08857d9acc54b349c5d5b7c7dcefdb97d698"},"downloads":-1,"filename":"esdbclient-1.1b4-py3-none-any.whl","has_sig":false,"md5_digest":"5caca1eea3684d9ec3e867470bdd08f4","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":131955,"upload_time":"2024-06-05T15:52:59","upload_time_iso_8601":"2024-06-05T15:52:59.928384Z","url":"https://files.pythonhosted.org/packages/e2/b4/7e64316c18abafbeb64830a4acaf74959963ecee137670f7d9bfb07afe5c/esdbclient-1.1b4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"15b8d2f5e64365fb4672eb1d4f06540d328a5db3a3fe6d0a8d6a634b4aeadd15","md5":"9e199867c0e19ce174af471975c3ccb2","sha256":"1b35ecaa3bfafbaeedac6ecdcc670dc4a0ada0c16e3443ac122717b0669c9993"},"downloads":-1,"filename":"esdbclient-1.1b4.tar.gz","has_sig":false,"md5_digest":"9e199867c0e19ce174af471975c3ccb2","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":150467,"upload_time":"2024-06-05T15:53:03","upload_time_iso_8601":"2024-06-05T15:53:03.258264Z","url":"https://files.pythonhosted.org/packages/15/b8/d2f5e64365fb4672eb1d4f06540d328a5db3a3fe6d0a8d6a634b4aeadd15/esdbclient-1.1b4.tar.gz","yanked":false,"yanked_reason":null}],"1.1b5":[{"comment_text":"","digests":{"blake2b_256":"468bd67c0bce0223bdba0a4f7ddc8aa97807588ca752e3345dc729d8e8b7db87","md5":"33b35a7cfd540242cbcb774412b90d1d","sha256":"98d7e3bd34bdd88475a77a21322cee84ac8f64454638793abde6cee73dfdd725"},"downloads":-1,"filename":"esdbclient-1.1b5-py3-none-any.whl","has_sig":false,"md5_digest":"33b35a7cfd540242cbcb774412b90d1d","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":130936,"upload_time":"2024-06-05T23:22:58","upload_time_iso_8601":"2024-06-05T23:22:58.986570Z","url":"https://files.pythonhosted.org/packages/46/8b/d67c0bce0223bdba0a4f7ddc8aa97807588ca752e3345dc729d8e8b7db87/esdbclient-1.1b5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"674ac267333ea413960a9a27a249325ab0577edfdb7f39c0513c21a22795201e","md5":"6611cd063f665d536cf70e8a564cc2a1","sha256":"41c90ea188eb5daed5e4ee2b063f706a6e104cfc918da6e6d2df4fa728176d9e"},"downloads":-1,"filename":"esdbclient-1.1b5.tar.gz","has_sig":false,"md5_digest":"6611cd063f665d536cf70e8a564cc2a1","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":149564,"upload_time":"2024-06-05T23:23:02","upload_time_iso_8601":"2024-06-05T23:23:02.111754Z","url":"https://files.pythonhosted.org/packages/67/4a/c267333ea413960a9a27a249325ab0577edfdb7f39c0513c21a22795201e/esdbclient-1.1b5.tar.gz","yanked":false,"yanked_reason":null}],"1.1b6":[{"comment_text":"","digests":{"blake2b_256":"540c4165279e559f2976827ebd322fc3d59bee3b1ab1e23bb6b038ae2c5d3dde","md5":"ac5aab358dca48a0f822f9506b771596","sha256":"73057f757b0223ac697076d3a72d22ca2437c4e8af5da1e6a070ba92148f1330"},"downloads":-1,"filename":"esdbclient-1.1b6-py3-none-any.whl","has_sig":false,"md5_digest":"ac5aab358dca48a0f822f9506b771596","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":140528,"upload_time":"2024-06-24T07:33:26","upload_time_iso_8601":"2024-06-24T07:33:26.750840Z","url":"https://files.pythonhosted.org/packages/54/0c/4165279e559f2976827ebd322fc3d59bee3b1ab1e23bb6b038ae2c5d3dde/esdbclient-1.1b6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f63cbe40784aeb585da7e29ae1b1b86a602046b872195383e38118978b9565ad","md5":"620bd9138f546857cd047bc87e8c8332","sha256":"ebdf0f0571927b211c07065516b7597b98cfcf13f5a20223d57f3fe005e2c8fe"},"downloads":-1,"filename":"esdbclient-1.1b6.tar.gz","has_sig":false,"md5_digest":"620bd9138f546857cd047bc87e8c8332","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":156718,"upload_time":"2024-06-24T07:33:30","upload_time_iso_8601":"2024-06-24T07:33:30.402115Z","url":"https://files.pythonhosted.org/packages/f6/3c/be40784aeb585da7e29ae1b1b86a602046b872195383e38118978b9565ad/esdbclient-1.1b6.tar.gz","yanked":false,"yanked_reason":null}],"1.1b7":[{"comment_text":"","digests":{"blake2b_256":"e02635bed4788d185a8d841a79e3672e62372a73ce2cd3b525c848cd3e882d3a","md5":"111ba1695efa33f1bcfc6a756093362c","sha256":"d3d0195019931aac355e6f2410c64a26a2d54b8e608d0201826fa4e8baf3e1e6"},"downloads":-1,"filename":"esdbclient-1.1b7-py3-none-any.whl","has_sig":false,"md5_digest":"111ba1695efa33f1bcfc6a756093362c","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":144405,"upload_time":"2024-07-01T19:02:32","upload_time_iso_8601":"2024-07-01T19:02:32.539484Z","url":"https://files.pythonhosted.org/packages/e0/26/35bed4788d185a8d841a79e3672e62372a73ce2cd3b525c848cd3e882d3a/esdbclient-1.1b7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4ae4ae5c869409763df2620107bc49a9e620df1602057d310245faeb32f2b273","md5":"6248fa8e985e3c1404549cea4668e54f","sha256":"b315bc7ba71684700d1d918acd15af0a4ef3af7847a393a6e1518c63e7befa62"},"downloads":-1,"filename":"esdbclient-1.1b7.tar.gz","has_sig":false,"md5_digest":"6248fa8e985e3c1404549cea4668e54f","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162145,"upload_time":"2024-07-01T19:02:36","upload_time_iso_8601":"2024-07-01T19:02:36.339839Z","url":"https://files.pythonhosted.org/packages/4a/e4/ae5c869409763df2620107bc49a9e620df1602057d310245faeb32f2b273/esdbclient-1.1b7.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"fef750caebb0ae9cd5afdb2053cd3bd45773c0c3bad764f971e329fe80e55379","md5":"4dd2796dbcc9f1310ecd832192d7bb48","sha256":"a186859a57e364ff61cf53bb1ce5893dd8fd89c10f006c69c5724923af504df9"},"downloads":-1,"filename":"esdbclient-1.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"4dd2796dbcc9f1310ecd832192d7bb48","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":145022,"upload_time":"2024-11-19T14:18:05","upload_time_iso_8601":"2024-11-19T14:18:05.882113Z","url":"https://files.pythonhosted.org/packages/fe/f7/50caebb0ae9cd5afdb2053cd3bd45773c0c3bad764f971e329fe80e55379/esdbclient-1.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"03f38afd9c5fa10e1cb045862fde4fd9c2fef9b6223e77871579d40eaffd15f8","md5":"a673308edc3ca393707319111edf44aa","sha256":"2b18a33a4e005996cf86b5c23e39fb81418d8a1286edd4cdb432e74dda07548a"},"downloads":-1,"filename":"esdbclient-1.1.4.tar.gz","has_sig":false,"md5_digest":"a673308edc3ca393707319111edf44aa","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":162965,"upload_time":"2024-11-19T14:18:07","upload_time_iso_8601":"2024-11-19T14:18:07.704506Z","url":"https://files.pythonhosted.org/packages/03/f3/8afd9c5fa10e1cb045862fde4fd9c2fef9b6223e77871579d40eaffd15f8/esdbclient-1.1.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
