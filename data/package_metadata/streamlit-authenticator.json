{"info":{"author":"Mohammad Khorasani","author_email":"khorasani.mohammad@gmail.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"<img src=\"https://raw.githubusercontent.com/mkhorasani/Streamlit-Authenticator/main/graphics/logo.png\" alt=\"Streamlit Authenticator logo\" style=\"margin-top:50px;width:450px\"></img>\r\n<!--- [![Downloads](https://pepy.tech/badge/streamlit-authenticator)](https://pepy.tech/project/streamlit-authenticator) --->\r\n<!--- [![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/khorasani) --->\r\n\r\n**A secure authentication module to manage user access in a Streamlit application**\r\n\r\n[![Downloads](https://static.pepy.tech/badge/streamlit-authenticator)](https://pepy.tech/project/streamlit-authenticator)\r\n[![Downloads](https://static.pepy.tech/badge/streamlit-authenticator/month)](https://pepy.tech/project/streamlit-authenticator)\r\n[![Downloads](https://static.pepy.tech/badge/streamlit-authenticator/week)](https://pepy.tech/project/streamlit-authenticator)\r\n<!--- <br/><br/><br/> ---?\r\n<!--- <a href=\"http://tinyurl.com/2p8mw32d\"><img src=\"https://raw.githubusercontent.com/mkhorasani/streamlit_authenticator_test/main/Web%20App%20Web%20Dev%20with%20Streamlit%20-%20Cover.png\" width=\"300\" height=\"450\"> --->\r\n\r\n<!--- ###### _To learn more please refer to my book [Web Application Development with Streamlit](http://tinyurl.com/2p8mw32d)._ --->\r\n\r\n## Table of Contents\r\n- [Quickstart](#1-quickstart)\r\n- [Installation](#2-installation)\r\n- [Creating a configuration file](#3-creating-a-configuration-file)\r\n- [Setup](#4-setup)\r\n- [Creating a login widget](#5-creating-a-login-widget)\r\n- [Creating a guest login widget](#6-creating-a-guest-login-widget)\r\n- [Authenticating users](#7-authenticating-users)\r\n- [Creating a reset password widget](#8-creating-a-reset-password-widget)\r\n- [Creating a new user registration widget](#9-creating-a-new-user-registration-widget)\r\n- [Creating a forgot password widget](#10-creating-a-forgot-password-widget)\r\n- [Creating a forgot username widget](#11-creating-a-forgot-username-widget)\r\n- [Creating an update user details widget](#12-creating-an-update-user-details-widget)\r\n- [Updating the configuration file](#13-updating-the-configuration-file)\r\n- [License](#license)\r\n\r\n### 1. Quickstart\r\n\r\n* Check out the [demo app](https://demo-app-v0-3-3.streamlit.app/).\r\n* Please refer to the [API reference](https://streamlit-authenticator.readthedocs.io/en/latest/).\r\n\r\n### 2. Installation\r\n\r\nStreamlit-Authenticator is distributed via [PyPI](https://pypi.org/project/streamlit-authenticator/):\r\n\r\n```python\r\npip install streamlit-authenticator\r\n```\r\n\r\nUsing Streamlit-Authenticator is as simple as importing the module and calling it to verify your user's credentials.\r\n\r\n```python\r\nimport streamlit as st\r\nimport streamlit_authenticator as stauth\r\n```\r\n\r\n### 3. Creating a configuration file\r\n\r\n* Initially create a YAML configuration file and add to it your users' credentials: including names, usernames, and passwords (plain text passwords will be hashed automatically).\r\n* In addition, enter a name, random key, and number of days to expiry, for a re-authentication cookie that will be stored on the client's browser to enable password-less re-authentication. If you do not require re-authentication, you may set the number of days to expiry to 0.\r\n* Finally, define a list of pre-authorized emails of users who can register and add their credentials to the configuration file with the use of the **register_user** widget.\r\n* **_Please remember to update the config file (as shown in step 13) after you use the reset_password, register_user, forgot_password, or update_user_details widgets._**\r\n\r\n```python\r\ncookie:\r\n  expiry_days: 30\r\n  key: some_signature_key # Must be a string\r\n  name: some_cookie_name\r\ncredentials:\r\n  usernames:\r\n    jsmith:\r\n      email: jsmith@gmail.com\r\n      failed_login_attempts: 0 # Will be managed automatically\r\n      logged_in: False # Will be managed automatically\r\n      name: John Smith\r\n      password: abc # Will be hashed automatically\r\n      roles:\r\n      - admin\r\n      - editor\r\n      - viewer\r\n    rbriggs:\r\n      email: rbriggs@gmail.com\r\n      failed_login_attempts: 0 # Will be managed automatically\r\n      logged_in: False # Will be managed automatically\r\n      name: Rebecca Briggs\r\n      password: def # Will be hashed automatically\r\n      roles:\r\n      - viewer\r\noauth2:\r\n  google: # Follow instructions: https://developers.google.com/identity/protocols/oauth2\r\n    client_id: # To be filled\r\n    client_secret: # To be filled\r\n    redirect_uri: # URL to redirect to after OAuth2 authentication\r\n  microsoft: # Follow instructions: https://learn.microsoft.com/en-us/graph/auth-register-app-v2\r\n    client_id: # To be filled\r\n    client_secret: # To be filled\r\n    redirect_uri: # URL to redirect to after OAuth2 authentication\r\n    tenant_id: # To be filled\r\npre-authorized:\r\n  emails:\r\n  - melsby@gmail.com\r\n```\r\n\r\n* _Please note that the 'failed_login_attempts' and 'logged_in' fields corresponding to each user's number of failed login attempts and log-in status in the credentials will be added and managed automatically._\r\n\r\n### 4. Setup\r\n\r\n* Subsequently import the configuration file into your script and create an authentication object.\r\n\r\n```python\r\nimport yaml\r\nfrom yaml.loader import SafeLoader\r\n\r\nwith open('../config.yaml') as file:\r\n    config = yaml.load(file, Loader=SafeLoader)\r\n\r\n# Pre-hashing all plain text passwords once\r\n# stauth.Hasher.hash_passwords(config['credentials'])\r\n\r\nauthenticator = stauth.Authenticate(\r\n    config['credentials'],\r\n    config['cookie']['name'],\r\n    config['cookie']['key'],\r\n    config['cookie']['expiry_days']\r\n)\r\n```\r\n\r\n* Plain text passwords will be hashed automatically by default, however, for a large number of users it is recommended to pre-hash the passwords in the credentials using the **Hasher.hash_passwords** function.\r\n* If you choose to pre-hash the passwords, please set the **auto_hash** parameter in the **Authenticate** class to False.\r\n\r\n> ### Hasher.hash_passwords\r\n> #### Parameters:\r\n>  - **credentials:** _dict_\r\n>    - The credentials dict with plain text passwords.\r\n> #### Returns:\r\n> - _dict_\r\n>   - The credentials dict with hashed passwords.\r\n\r\n> ### Authenticate\r\n> #### Parameters:\r\n>  - **credentials:** _dict, str_\r\n>    - Dictionary with the usernames, names, passwords, and emails, and other user data, or path pointing to the location of the config file.\r\n>  - **cookie_name:** _str_\r\n>    - Specifies the name of the re-authentication cookie stored on the client's browser for password-less re-authentication.\r\n>  - **cookie_key:** _str_\r\n>    - Specifies the key that will be used to hash the signature of the re-authentication cookie.\r\n>  - **cookie_expiry_days:** _float, default 30.0_\r\n>    - Specifies the number of days before the re-authentication cookie automatically expires on the client's browser.\r\n>  - **validator:** _Validator, optional, default None_\r\n>    - Provides a validator object that will check the validity of the username, name, and email fields.\r\n>  - **auto_hash:** _bool, default True_\r\n>    - Automatic hashing requirement for passwords, True: plain text passwords will be hashed automatically, False: plain text passwords will not be hashed automatically.\r\n>  - ****kwargs:** _dict, optional_\r\n>    - Arguments to pass to the Authenticate class.\r\n\r\n* **_Please remember to pass the authenticator object to each and every page in a multi-page application as a session state variable._**\r\n\r\n### 5. Creating a login widget\r\n\r\n* You can render the login widget as follows.\r\n\r\n```python\r\nauthenticator.login()\r\n```\r\n\r\n> ### Authenticate.login\r\n> #### Parameters:\r\n>  - **location:** _str, {'main', 'sidebar', 'unrendered'}, default 'main'_\r\n>    - Specifies the location of the login widget.\r\n>  - **max_concurrent_users:** _int, optional, default None_\r\n>    - Limits the number of concurrent users. If not specified there will be no limit to the number of concurrently logged in users.\r\n>  - **max_login_attempts:** _int, optional, default None_\r\n>    - Limits the number of failed login attempts. If not specified there will be no limit to the number of failed login attempts.\r\n>  - **fields:** _dict, optional, default {'Form name':'Login', 'Username':'Username', 'Password':'Password', 'Login':'Login', 'Captcha':'Captcha'}_\r\n>    - Customizes the text of headers, buttons and other fields.\r\n>  - **captcha:** _bool, default False_\r\n>    - Specifies the captcha requirement for the login widget, True: captcha required, False: captcha removed.\r\n>  - **single_session:** _bool, default False_\r\n>    - Disables the ability for the same user to log in multiple sessions, True: single session allowed, False: multiple sessions allowed.\r\n>  - **clear_on_submit:** _bool, default False_\r\n>    - Specifies the clear on submit setting, True: clears inputs on submit, False: keeps inputs on submit.\r\n>  - **key:** _str, default 'Login'_\r\n>    - Unique key provided to widget to avoid duplicate WidgetID errors.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/login_form.JPG)\r\n\r\n* **_Please remember to re-invoke an 'unrendered' login widget on each and every page in a multi-page application._**\r\n\r\n### 6. Creating a guest login widget\r\n\r\n* You can render the guest login widget as follows.\r\n\r\n```python\r\nauthenticator.experimental_guest_login('Login with Google', provider='google', oauth2=config['oauth2'])\r\nauthenticator.experimental_guest_login('Login with Microsoft', provider='microsoft', oauth2=config['oauth2'])\r\n```\r\n\r\n> ### Authenticate.experimental_guest_login\r\n> #### Parameters:\r\n>  - **button_name:** _str, default 'Guest login'_\r\n>    - Rendered name of the guest login button.\r\n>  - **location:** _str, {'main', 'sidebar'}, default 'main'_\r\n>    - Specifies the location of the guest login button.\r\n>  - **provider:** _str, {'google', 'microsoft'}, default 'google'_\r\n>    - Selection for OAuth2 provider, Google or Microsoft.\r\n>  - **oauth2:** _dict, optional, default None_\r\n>    - Configuration parameters to implement an OAuth2 authentication.\r\n>  - **max_concurrent_users:** _int, optional, default None_\r\n>    - Limits the number of concurrent users. If not specified there will be no limit to the number of concurrently logged in users.\r\n>  - **single_session:** _bool, default False_\r\n>    - Disables the ability for the same user to log in multiple sessions, True: single session allowed, False: multiple sessions allowed.\r\n>  - **roles:** _list, optional, default None_\r\n>    - User roles for guest users.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on button press with a dict as a parameter.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/guest_login_buttons.JPG)\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/guest_login_google.JPG)\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/guest_login_microsoft.JPG)\r\n\r\n\r\n* You may implement the guest login widget using both Google and Microsoft OAuth2 handles.\r\n* To create the client id and client secret parameters for Google OAuth2 please refer to https://developers.google.com/identity/protocols/oauth2.\r\n* To create the client id, client secret, and tenant id parameters for Microsoft OAuth2 please refer to https://learn.microsoft.com/en-us/graph/auth-register-app-v2.\r\n* Please note that upon successful login, the guest user's name, email, and other information will be registered in the credentials dictionary and their re-authentication cookie will be saved automatically.\r\n\r\n### 7. Authenticating user\r\n\r\n* You can then retrieve the name, authentication status, and username from Streamlit's session state using **st.session_state['name']**, **st.session_state['authentication_status']**, and **st.session_state['username']** to allow a verified user to access restricted content.\r\n* You may also render a logout button, or may choose not to render the button if you only need to implement the logout logic programmatically.\r\n* The optional **key** parameter for the logout button should be used with multi-page applications to prevent Streamlit from throwing duplicate key errors.\r\n\r\n```python\r\nif st.session_state['authentication_status']:\r\n    authenticator.logout()\r\n    st.write(f'Welcome *{st.session_state[\"name\"]}*')\r\n    st.title('Some content')\r\nelif st.session_state['authentication_status'] is False:\r\n    st.error('Username/password is incorrect')\r\nelif st.session_state['authentication_status'] is None:\r\n    st.warning('Please enter your username and password')\r\n```\r\n\r\n> ### Authenticate.logout\r\n> #### Parameters:\r\n>  - **button_name:** _str, default 'Logout'_\r\n>    - Customizes the button name.\r\n>  - **location:** _str, {'main', 'sidebar', 'unrendered'}, default 'main'_\r\n>    - Specifies the location of the logout button. If 'unrendered' is passed, the logout logic will be executed without rendering the button.\r\n>  - **key:** _str, default None_\r\n>    - Unique key that should be used in multi-page applications.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/logged_in.JPG)\r\n\r\n* Or prompt an unverified user to enter a correct username and password.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/incorrect_login.JPG)\r\n\r\n* You may also retrieve the number of failed login attempts a user has made by accessing **st.session_state['failed_login_attempts']** which returns a dictionary with the username as key and the number of failed attempts as the value.\r\n\r\n### 8. Creating a reset password widget\r\n\r\n* You may use the **reset_password** widget to allow a logged in user to modify their password as shown below.\r\n\r\n```python\r\nif st.session_state['authentication_status']:\r\n    try:\r\n        if authenticator.reset_password(st.session_state['username']):\r\n            st.success('Password modified successfully')\r\n    except Exception as e:\r\n        st.error(e)\r\n```\r\n\r\n> ### Authenticate.reset_password\r\n> #### Parameters:\r\n>  - **username:** _str_\r\n>    - Specifies the username of the user to reset the password for.\r\n>  - **location:** _str, {'main', 'sidebar'}, default 'main'_\r\n>    - Specifies the location of the reset password widget.\r\n>  - **fields:** _dict, optional, default {'Form name':'Reset password', 'Current password':'Current password', 'New password':'New password', 'Repeat password': 'Repeat password', 'Reset':'Reset'}_\r\n>    - Customizes the text of headers, buttons and other fields.\r\n>  - **clear_on_submit:** _bool, default False_\r\n>    - Specifies the clear on submit setting, True: clears inputs on submit, False: keeps inputs on submit.\r\n>  - **key:** _str, default 'Reset password'_\r\n>    - Unique key provided to widget to avoid duplicate WidgetID errors.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n> #### Returns::\r\n> - _bool_\r\n>   - Status of resetting the password.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/reset_password.JPG)\r\n\r\n* **_Please remember to update the config file (as shown in step 13) after you use this widget._**\r\n\r\n### 9. Creating a new user registration widget\r\n\r\n* You may use the **register_user** widget to allow a user to sign up to your application as shown below.\r\n* If you require the user to be pre-authorized, define a **pre_authorized** list of emails that are allowed to register, and add it to the configuration file or provide it as a parameter to the **register_user** widget.\r\n* Once they have registered, their email will be automatically removed from the **pre_authorized** list.\r\n* Alternatively, to allow anyone to sign up, do not provide a **pre_authorized** list.\r\n\r\n```python\r\ntry:\r\n    email_of_registered_user, username_of_registered_user, name_of_registered_user = authenticator.register_user(pre_authorized=config['pre-authorized'])\r\n    if email_of_registered_user:\r\n        st.success('User registered successfully')\r\nexcept Exception as e:\r\n    st.error(e)\r\n```\r\n\r\n> ### Authenticate.register_user\r\n> #### Parameters:\r\n>  - **location:** _str, {'main', 'sidebar'}, default 'main'_\r\n>    - Specifies the location of the register user widget.\r\n>  - **pre_authorized:** _list, optional, default None_\r\n>    - List of emails of unregistered users who are authorized to register. If no list is provided, all users will be allowed to register.\r\n>  - **domains:** _list, optional, default None_\r\n>    - Specifies the required list of domains a new email must belong to i.e. ['gmail.com', 'yahoo.com'], list: the required list of domains, None: any domain is allowed.\r\n>  - **fields:** _dict, optional, default {'Form name':'Register user', 'Email':'Email', 'Username':'Username', 'Password':'Password', 'Repeat password':'Repeat password', 'Password hint':'Password hint', 'Captcha':'Captcha', 'Register':'Register'}_\r\n>    - Customizes the text of headers, buttons and other fields.\r\n>  - **captcha:** _bool, default True_\r\n>    - Specifies the captcha requirement for the register user widget, True: captcha required, False: captcha removed.\r\n>  - **roles:** _list, optional, default None_\r\n>    - User roles for registered users.\r\n>  - **merge_username_email:** _bool, default False_\r\n>    - Merges username into email field, True: username will be the same as the email, False: username and email will be independent.\r\n>  - **clear_on_submit:** _bool, default False_\r\n>    - Specifies the clear on submit setting, True: clears inputs on submit, False: keeps inputs on submit.\r\n>  - **key:** _str, default 'Register user'_\r\n>    - Unique key provided to widget to avoid duplicate WidgetID errors.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n> #### Returns:\r\n> - _str_\r\n>   - Email associated with the new user.\r\n> - _str_\r\n>   - Username associated with the new user.\r\n> - _str_\r\n>   - Name associated with the new user.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/register_user.JPG)\r\n\r\n* **_Please remember to update the config file (as shown in step 13) after you use this widget._**\r\n\r\n### 10. Creating a forgot password widget\r\n\r\n* You may use the **forgot_password** widget to allow a user to generate a new random password.\r\n* The new password will be automatically hashed and saved in the credentials dictionary.\r\n* The widget will return the username, email, and new random password which the developer should then transfer to the user securely.\r\n\r\n```python\r\ntry:\r\n    username_of_forgotten_password, email_of_forgotten_password, new_random_password = authenticator.forgot_password()\r\n    if username_of_forgotten_password:\r\n        st.success('New password to be sent securely')\r\n        # The developer should securely transfer the new password to the user.\r\n    elif username_of_forgotten_password == False:\r\n        st.error('Username not found')\r\nexcept Exception as e:\r\n    st.error(e)\r\n```\r\n\r\n> ### Authenticate.forgot_password\r\n> #### Parameters\r\n>  - **location:** _str, {'main', 'sidebar'}, default 'main'_\r\n>    - Specifies the location of the forgot password widget.\r\n>  - **fields:** _dict, optional, default {'Form name':'Forgot password', 'Username':'Username',  'Captcha':'Captcha', 'Submit':'Submit'}_\r\n>    - Customizes the text of headers, buttons and other fields.\r\n>  - **captcha:** _bool, default False_\r\n>    - Specifies the captcha requirement for the forgot password widget, True: captcha required, False: captcha removed.\r\n>  - **clear_on_submit:** _bool, default False_\r\n>    - Specifies the clear on submit setting, True: clears inputs on submit, False: keeps inputs on submit.\r\n>  - **key:** _str, default 'Forgot password'_\r\n>    - Unique key provided to widget to avoid duplicate WidgetID errors.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n> #### Returns:\r\n> - _str_\r\n>   - Username associated with the forgotten password.\r\n> - _str_\r\n>   - Email associated with the forgotten password.\r\n> - _str_\r\n>   - New plain text password that should be transferred to the user securely.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/forgot_password.JPG)\r\n\r\n* **_Please remember to update the config file (as shown in step 13) after you use this widget._**\r\n\r\n### 11. Creating a forgot username widget\r\n\r\n* You may use the **forgot_username** widget to allow a user to retrieve their forgotten username.\r\n* The widget will return the username and email which the developer should then transfer to the user securely.\r\n\r\n```python\r\ntry:\r\n    username_of_forgotten_username, email_of_forgotten_username = authenticator.forgot_username()\r\n    if username_of_forgotten_username:\r\n        st.success('Username to be sent securely')\r\n        # The developer should securely transfer the username to the user.\r\n    elif username_of_forgotten_username == False:\r\n        st.error('Email not found')\r\nexcept Exception as e:\r\n    st.error(e)\r\n```\r\n\r\n> ### Authenticate.forgot_username\r\n> #### Parameters\r\n>  - **location:** _str, {'main', 'sidebar'}, default 'main'_\r\n>    - Specifies the location of the forgot username widget.\r\n>  - **fields:** _dict, optional, default {'Form name':'Forgot username', 'Email':'Email', 'Captcha':'Captcha', 'Submit':'Submit'}_\r\n>    - Customizes the text of headers, buttons and other fields.\r\n>  - **captcha:** _bool, default False_\r\n>    - Specifies the captcha requirement for the forgot username widget, True: captcha required, False: captcha removed.\r\n>  - **clear_on_submit:** _bool, default False_\r\n>    - Specifies the clear on submit setting, True: clears inputs on submit, False: keeps inputs on submit.\r\n>  - **key:** _str, default 'Forgot username'_\r\n>    - Unique key provided to widget to avoid duplicate WidgetID errors.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n> #### Returns:\r\n> - _str_\r\n>   - Forgotten username that should be transferred to the user securely.\r\n> - _str_\r\n>   - Email associated with the forgotten username.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/forgot_username.JPG)\r\n\r\n### 12. Creating an update user details widget\r\n\r\n* You may use the **update_user_details** widget to allow a logged in user to update their name and/or email.\r\n* The widget will automatically save the updated details in both the credentials dictionary and re-authentication cookie.\r\n\r\n```python\r\nif st.session_state['authentication_status']:\r\n    try:\r\n        if authenticator.update_user_details(st.session_state['username']):\r\n            st.success('Entries updated successfully')\r\n    except Exception as e:\r\n        st.error(e)\r\n```\r\n\r\n> ### Authenticate.update_user_details\r\n> #### Parameters\r\n>  - **username:** _str_\r\n>    - Specifies the username of the user to update user details for.\r\n>  - **location:** _str, {'main', 'sidebar'}, default 'main'_\r\n>    - Specifies the location of the update user details widget.\r\n>  - **fields:** _dict, optional, default {'Form name':'Update user details', 'Field':'Field', 'First name':'First name', 'Last name':'Last name', 'Email':'Email', 'New value':'New value', 'Update':'Update'}_\r\n>    - Customizes the text of headers, buttons and other fields.\r\n>  - **clear_on_submit:** _bool, default False_\r\n>    - Specifies the clear on submit setting, True: clears inputs on submit, False: keeps inputs on submit.\r\n>  - **key:** _str, default 'Update user details'_\r\n>    - Unique key provided to widget to avoid duplicate WidgetID errors.\r\n>  - **callback:** _callable, optional, default None_\r\n>    - Callback function that will be invoked on form submission with a dict as a parameter.\r\n> #### Returns:\r\n> - _bool_\r\n>   - Status of updating the user details.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/update_user_details.JPG)\r\n\r\n* **_Please remember to update the config file (as shown in step 13) after you use this widget._**\r\n\r\n### 13. Updating the configuration file\r\n\r\n* Please ensure that the configuration file is re-saved anytime the credentials are updated or whenever the **reset_password**, **register_user**, **forgot_password**, or **update_user_details** widgets are used.\r\n\r\n```python\r\nwith open('../config.yaml', 'w') as file:\r\n    yaml.dump(config, file, default_flow_style=False)\r\n```\r\n\r\n## License\r\n\r\nThis project is proprietary software. The use of this software is governed by the terms specified in the [LICENSE](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/LICENSE) file. Unauthorized copying, modification, or distribution of this software is prohibited.\r\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/mkhorasani/Streamlit-Authenticator","keywords":"Python, Streamlit, Authentication, Components","license":null,"license_expression":null,"license_files":null,"maintainer":null,"maintainer_email":null,"name":"streamlit-authenticator","package_url":"https://pypi.org/project/streamlit-authenticator/","platform":null,"project_url":"https://pypi.org/project/streamlit-authenticator/","project_urls":{"Homepage":"https://github.com/mkhorasani/Streamlit-Authenticator"},"provides_extra":null,"release_url":"https://pypi.org/project/streamlit-authenticator/0.4.1/","requires_dist":["bcrypt>=3.1.7","captcha>=0.5.0","extra-streamlit-components>=0.1.70","PyJWT>=2.3.0","PyYAML>=5.3.1","streamlit>=1.37.0"],"requires_python":">=3.6","summary":"A secure authentication module to manage user access in a Streamlit application.","version":"0.4.1","yanked":false,"yanked_reason":null},"last_serial":25258883,"releases":{"0.0.5":[{"comment_text":"","digests":{"blake2b_256":"df247579b9b69fca70521ebdf45fe4f6c9192276ababb3330738a4f91b7a9d9b","md5":"9df84090b565d38dc527776151f64ea8","sha256":"5e5464d62c0dc04671cd7e45fda990afdc9c03d5544ea57fe558d42c2367b5d6"},"downloads":-1,"filename":"streamlit-authenticator-0.0.5.tar.gz","has_sig":false,"md5_digest":"9df84090b565d38dc527776151f64ea8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":4508,"upload_time":"2021-11-09T10:13:48","upload_time_iso_8601":"2021-11-09T10:13:48.804593Z","url":"https://files.pythonhosted.org/packages/df/24/7579b9b69fca70521ebdf45fe4f6c9192276ababb3330738a4f91b7a9d9b/streamlit-authenticator-0.0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"ddb38b49ca78ae94c9fd17e3b5af4e7e9eda38dde4cfd941e375936a9a37a467","md5":"98cee7641ccb71e955124f7afbda2fe1","sha256":"4c62c5abc8a0525ce7702b5e5e932b8acd027750b1321d07f999b41ed9c1cd32"},"downloads":-1,"filename":"streamlit-authenticator-0.1.0.tar.gz","has_sig":false,"md5_digest":"98cee7641ccb71e955124f7afbda2fe1","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":4578,"upload_time":"2021-12-23T17:49:41","upload_time_iso_8601":"2021-12-23T17:49:41.887574Z","url":"https://files.pythonhosted.org/packages/dd/b3/8b49ca78ae94c9fd17e3b5af4e7e9eda38dde4cfd941e375936a9a37a467/streamlit-authenticator-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"140324d14e8b1010d6661d2421d3192a88e734ce126317f447bfcc76e23efde9","md5":"66e693f4739c31b6825e5298c023de61","sha256":"43f8d673f4af6bb169af921015a0831535309ad9d37debde3ef44a1db1f8a994"},"downloads":-1,"filename":"streamlit_authenticator-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"66e693f4739c31b6825e5298c023de61","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":8947,"upload_time":"2022-02-15T16:03:13","upload_time_iso_8601":"2022-02-15T16:03:13.240108Z","url":"https://files.pythonhosted.org/packages/14/03/24d14e8b1010d6661d2421d3192a88e734ce126317f447bfcc76e23efde9/streamlit_authenticator-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"14ab95c831f2ea32f434a9a2473d47874c3115dd603d72190f3dc063ba8a4040","md5":"0837ee3fbff0fe1bb5a9cc7aa708b878","sha256":"f03cf8cf7bb357defdf31a801ffc2ed5d10c58a9fdd0d62357dbddc5749e260f"},"downloads":-1,"filename":"streamlit-authenticator-0.1.1.tar.gz","has_sig":false,"md5_digest":"0837ee3fbff0fe1bb5a9cc7aa708b878","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":4667,"upload_time":"2022-02-15T16:03:15","upload_time_iso_8601":"2022-02-15T16:03:15.256885Z","url":"https://files.pythonhosted.org/packages/14/ab/95c831f2ea32f434a9a2473d47874c3115dd603d72190f3dc063ba8a4040/streamlit-authenticator-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"6a47c0eb1f862e119f9a184ef686f0c93590dabf6e18be556fc7d0ed99cb1ec1","md5":"9a986acd2c62c94a3beddf654d0dd59c","sha256":"7fe470066e9232872f403f207715fb8a09ce7fdcebed50d63fecbf2b3f72e2b5"},"downloads":-1,"filename":"streamlit-authenticator-0.1.2.tar.gz","has_sig":false,"md5_digest":"9a986acd2c62c94a3beddf654d0dd59c","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":4673,"upload_time":"2022-03-17T19:18:04","upload_time_iso_8601":"2022-03-17T19:18:04.492061Z","url":"https://files.pythonhosted.org/packages/6a/47/c0eb1f862e119f9a184ef686f0c93590dabf6e18be556fc7d0ed99cb1ec1/streamlit-authenticator-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"0193baff0e983e2e2477f9e447429d5248e548d955ae9fd11ad18cc07d5445af","md5":"af5e34d0f49e5f235c972d41c1944203","sha256":"255e1db27455c9a4a6e473ac981d99c4d88061353ab457a911cf91e63d697fb7"},"downloads":-1,"filename":"streamlit-authenticator-0.1.3.tar.gz","has_sig":false,"md5_digest":"af5e34d0f49e5f235c972d41c1944203","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":5122,"upload_time":"2022-03-26T15:23:26","upload_time_iso_8601":"2022-03-26T15:23:26.641765Z","url":"https://files.pythonhosted.org/packages/01/93/baff0e983e2e2477f9e447429d5248e548d955ae9fd11ad18cc07d5445af/streamlit-authenticator-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"139a4783e3274d4544d067fde3188064c67c69f78145dbdea984be3aa53a27cf","md5":"89db63097ef9783da0bf1ffe2e739cc0","sha256":"cee7b782caa5878b2da201d98efede0cbe1c58fed6fe3ff77093ad9ff90959c9"},"downloads":-1,"filename":"streamlit-authenticator-0.1.4.tar.gz","has_sig":false,"md5_digest":"89db63097ef9783da0bf1ffe2e739cc0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":5278,"upload_time":"2022-04-25T15:50:03","upload_time_iso_8601":"2022-04-25T15:50:03.655312Z","url":"https://files.pythonhosted.org/packages/13/9a/4783e3274d4544d067fde3188064c67c69f78145dbdea984be3aa53a27cf/streamlit-authenticator-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"42c14b0a1a87045521d0fedeeb01cf91ccf16cde0820b03baae69b3a49ed6727","md5":"63803a18f50342e4891040fd445405e7","sha256":"a844a2ee8dc82175a39b4f2b01b5ec884d961fcbf973db8c8ec41a5a45986680"},"downloads":-1,"filename":"streamlit-authenticator-0.1.5.tar.gz","has_sig":false,"md5_digest":"63803a18f50342e4891040fd445405e7","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":5581,"upload_time":"2022-05-25T16:19:42","upload_time_iso_8601":"2022-05-25T16:19:42.106537Z","url":"https://files.pythonhosted.org/packages/42/c1/4b0a1a87045521d0fedeeb01cf91ccf16cde0820b03baae69b3a49ed6727/streamlit-authenticator-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"c22d85a9369d0c59492775b22e983d84d5eb5a940668c22ec2ea7dad90fa399e","md5":"c858324983cf09594eaf29ba50991490","sha256":"dc40a8ab0c422c2ff7699204af16bf2d686e0359c18627b60f8cd1bac63d55d8"},"downloads":-1,"filename":"streamlit-authenticator-0.2.1.tar.gz","has_sig":false,"md5_digest":"c858324983cf09594eaf29ba50991490","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":11388,"upload_time":"2022-06-25T15:07:42","upload_time_iso_8601":"2022-06-25T15:07:42.996393Z","url":"https://files.pythonhosted.org/packages/c2/2d/85a9369d0c59492775b22e983d84d5eb5a940668c22ec2ea7dad90fa399e/streamlit-authenticator-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.2":[{"comment_text":"","digests":{"blake2b_256":"ec5f68d20e0faeb52608d6248599f087034ed449732642c010898bca670d7627","md5":"308acfbe06e79fe87b0684bea8639ee0","sha256":"9a3cea4524b99902e97a91f9e5bd2ba6f92f1ee5a126ac90c59195fbe83d74b9"},"downloads":-1,"filename":"streamlit-authenticator-0.2.2.tar.gz","has_sig":false,"md5_digest":"308acfbe06e79fe87b0684bea8639ee0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":12394,"upload_time":"2023-05-06T15:14:22","upload_time_iso_8601":"2023-05-06T15:14:22.433421Z","url":"https://files.pythonhosted.org/packages/ec/5f/68d20e0faeb52608d6248599f087034ed449732642c010898bca670d7627/streamlit-authenticator-0.2.2.tar.gz","yanked":false,"yanked_reason":null}],"0.2.3":[{"comment_text":"","digests":{"blake2b_256":"f821e84f2fdad4f89318701e033071bf6cf567442f7c6d3a996e9384208552cf","md5":"83813d52ce61cbea966044f3e88f0bdf","sha256":"7693c5ae9821ae774447d2e75cff15eff9b9f026b25f33b94f6962b9e2fe9dbc"},"downloads":-1,"filename":"streamlit-authenticator-0.2.3.tar.gz","has_sig":false,"md5_digest":"83813d52ce61cbea966044f3e88f0bdf","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":12199,"upload_time":"2023-09-08T06:37:54","upload_time_iso_8601":"2023-09-08T06:37:54.608653Z","url":"https://files.pythonhosted.org/packages/f8/21/e84f2fdad4f89318701e033071bf6cf567442f7c6d3a996e9384208552cf/streamlit-authenticator-0.2.3.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"432974c3f47041164666d934053b66b3e13a087070bcc0be66c1f1934e9ed4a5","md5":"26cf5b47c678aef2b5b186c481df6a47","sha256":"0cbbb9bae616c27e01ab42478e3c6e4fcb3fedb8473095a28254d8d1713dd01e"},"downloads":-1,"filename":"streamlit_authenticator-0.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"26cf5b47c678aef2b5b186c481df6a47","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":17837,"upload_time":"2024-01-25T20:44:15","upload_time_iso_8601":"2024-01-25T20:44:15.369132Z","url":"https://files.pythonhosted.org/packages/43/29/74c3f47041164666d934053b66b3e13a087070bcc0be66c1f1934e9ed4a5/streamlit_authenticator-0.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.3.2":[{"comment_text":"","digests":{"blake2b_256":"4229c75f245f4343c526bd97f2bc65c05faccc90e4c95032645eff1d988fe872","md5":"5f0c19be20a1584d4baf4eb2e9377d1e","sha256":"0620768d01aa6c7bff4200f062effff333a8e0cfde9b5300a67ba878c51b0adc"},"downloads":-1,"filename":"streamlit_authenticator-0.3.2-py3-none-any.whl","has_sig":false,"md5_digest":"5f0c19be20a1584d4baf4eb2e9377d1e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":22336,"upload_time":"2024-03-26T19:27:37","upload_time_iso_8601":"2024-03-26T19:27:37.314285Z","url":"https://files.pythonhosted.org/packages/42/29/c75f245f4343c526bd97f2bc65c05faccc90e4c95032645eff1d988fe872/streamlit_authenticator-0.3.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"478c73720cbba26a17bbda9b5118de19b460613322ed84fa01ce050be6caa35b","md5":"624233415ef9faea25e866607d9ccf04","sha256":"f17a77d0394a45d6554a72d890cc270d9be5328eeb12958898bf0183e7321ed6"},"downloads":-1,"filename":"streamlit-authenticator-0.3.2.tar.gz","has_sig":false,"md5_digest":"624233415ef9faea25e866607d9ccf04","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":18754,"upload_time":"2024-03-26T19:27:42","upload_time_iso_8601":"2024-03-26T19:27:42.809604Z","url":"https://files.pythonhosted.org/packages/47/8c/73720cbba26a17bbda9b5118de19b460613322ed84fa01ce050be6caa35b/streamlit-authenticator-0.3.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3.3":[{"comment_text":"","digests":{"blake2b_256":"baa594a8d19360957885cbcd03d263d204c43a37d97392e9159db46307f36650","md5":"a6277cab74caa09630f5da79e8fb89ea","sha256":"a7d09bd522b9ebdb7925fcdc48cbf21be5b01760c8c7dd7c95dadeac9ea8e81a"},"downloads":-1,"filename":"streamlit_authenticator-0.3.3-py3-none-any.whl","has_sig":false,"md5_digest":"a6277cab74caa09630f5da79e8fb89ea","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":28782,"upload_time":"2024-07-27T14:14:40","upload_time_iso_8601":"2024-07-27T14:14:40.566875Z","url":"https://files.pythonhosted.org/packages/ba/a5/94a8d19360957885cbcd03d263d204c43a37d97392e9159db46307f36650/streamlit_authenticator-0.3.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5114d9f9dedd735ebfa48eb448ca5d7f8ebcb30bca7dce6678dded0de9127572","md5":"432eb20b3c3bbb1971d874dd57ab0b8b","sha256":"9c646f27759b908f3b678a3cba7fceed6be2ea43b873acaf9f632a18db765136"},"downloads":-1,"filename":"streamlit_authenticator-0.3.3.tar.gz","has_sig":false,"md5_digest":"432eb20b3c3bbb1971d874dd57ab0b8b","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":26265,"upload_time":"2024-07-27T14:14:56","upload_time_iso_8601":"2024-07-27T14:14:56.424731Z","url":"https://files.pythonhosted.org/packages/51/14/d9f9dedd735ebfa48eb448ca5d7f8ebcb30bca7dce6678dded0de9127572/streamlit_authenticator-0.3.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"9328c19eae3f2b29dd4658e16d3fd3e0164af13c501493e0bc260effcfe04407","md5":"a5099492a550086b1524d3035799a276","sha256":"776136e6a6ecde1ecc9dda054a7492290199b81e19268abff307a7d508685942"},"downloads":-1,"filename":"streamlit_authenticator-0.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"a5099492a550086b1524d3035799a276","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":34747,"upload_time":"2024-09-30T15:57:55","upload_time_iso_8601":"2024-09-30T15:57:55.562118Z","url":"https://files.pythonhosted.org/packages/93/28/c19eae3f2b29dd4658e16d3fd3e0164af13c501493e0bc260effcfe04407/streamlit_authenticator-0.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f87004c24fb2d9b372edfa2261cbec3828633bc997c4bf29310ff53cf092a647","md5":"4b2ec75077037cae6724ba81c8767c0d","sha256":"d4afeec5c972d794052a5552aa570e7eb620f0cc183484a5b052304907268381"},"downloads":-1,"filename":"streamlit_authenticator-0.4.1.tar.gz","has_sig":false,"md5_digest":"4b2ec75077037cae6724ba81c8767c0d","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":31401,"upload_time":"2024-09-30T15:57:57","upload_time_iso_8601":"2024-09-30T15:57:57.258239Z","url":"https://files.pythonhosted.org/packages/f8/70/04c24fb2d9b372edfa2261cbec3828633bc997c4bf29310ff53cf092a647/streamlit_authenticator-0.4.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9328c19eae3f2b29dd4658e16d3fd3e0164af13c501493e0bc260effcfe04407","md5":"a5099492a550086b1524d3035799a276","sha256":"776136e6a6ecde1ecc9dda054a7492290199b81e19268abff307a7d508685942"},"downloads":-1,"filename":"streamlit_authenticator-0.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"a5099492a550086b1524d3035799a276","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":34747,"upload_time":"2024-09-30T15:57:55","upload_time_iso_8601":"2024-09-30T15:57:55.562118Z","url":"https://files.pythonhosted.org/packages/93/28/c19eae3f2b29dd4658e16d3fd3e0164af13c501493e0bc260effcfe04407/streamlit_authenticator-0.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f87004c24fb2d9b372edfa2261cbec3828633bc997c4bf29310ff53cf092a647","md5":"4b2ec75077037cae6724ba81c8767c0d","sha256":"d4afeec5c972d794052a5552aa570e7eb620f0cc183484a5b052304907268381"},"downloads":-1,"filename":"streamlit_authenticator-0.4.1.tar.gz","has_sig":false,"md5_digest":"4b2ec75077037cae6724ba81c8767c0d","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":31401,"upload_time":"2024-09-30T15:57:57","upload_time_iso_8601":"2024-09-30T15:57:57.258239Z","url":"https://files.pythonhosted.org/packages/f8/70/04c24fb2d9b372edfa2261cbec3828633bc997c4bf29310ff53cf092a647/streamlit_authenticator-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
